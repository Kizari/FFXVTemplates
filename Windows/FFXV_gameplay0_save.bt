//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: FFXV_gameplay0_save.bt
//   Authors: Rinual
//   Version: 1.0
//   Purpose: Analyzing and debuging FFXV gameplay saves
//  Category: Save Files
//   History: Surihix - Header, Footer, Encryption // Alex - Misc Help
//   (Needs a decrypted save, for example https://github.com/Surihix/FFXVSaveCrypt)
//
//------------------------------------------------
LittleEndian();

typedef int32 FIXID;

typedef uint64 structid_t <format=hex, fgcolor=0x00C0FF>;
typedef ubyte bool <read=(this == 0 ? "false" : "true")>;

//Enums
enum SAVE_PLAYER
{
    SAVE_PLAYER_NONE = 0xFFFFFFFF,
    SAVE_PLAYER_NOCTIS = 0x0,
    SAVE_PLAYER_GLADIOLUS = 0x1,
    SAVE_PLAYER_IGNIS = 0x2,
    SAVE_PLAYER_PROMPTO = 0x3,
    SAVE_PLAYER_ARDYN = 0x4,
    SAVE_PLAYER_ARANEA = 0x5,
    SAVE_PLAYER_COR = 0x6,
    SAVE_PLAYER_IRIS = 0x7,
    SAVE_PLAYER_UMBRA = 0x8,
    SAVE_PLAYER_GENTIANA = 0x9,
    SAVE_PLAYER_TITAN = 0xA,
    SAVE_PLAYER_AVATAR = 0xB,
    SAVE_PLAYER_MULTIPLAYER_BUDDY1 = 0xC,
    SAVE_PLAYER_MULTIPLAYER_BUDDY2 = 0xD,
    SAVE_PLAYER_MULTIPLAYER_BUDDY3 = 0xE,
    SAVE_PLAYER_RAVUS = 0xF,
    SAVE_PLAYER_LUNA = 0x10,
    SAVE_PLAYER_SARAH = 0x11,
    SAVE_PLAYER_IFRIT = 0x12,
    SAVE_PLAYER_AMOUNT = 0x13, 
};

 enum WEAPON_ATTACK
 {                                      
     WEAPON_ATTACK_NONE       = 0xFFFFFFFF,
     WEAPON_ATTACK_MAIN_UP    = 0x0,     
     WEAPON_ATTACK_MAIN_LEFT  = 0x1,     
     WEAPON_ATTACK_MAIN_RIGHT = 0x2,     
     WEAPON_ATTACK_MAIN_DOWN  = 0x3,     
     WEAPON_ATTACK_AMOUNT     = 0x4,
     WEAPON_ATTACK_TOP        = 0x0,
     WEAPON_ATTACK_MAIN       = 0x0,
     WEAPON_ATTACK_SUB        = 0x1,
     WEAPON_ATTACK_MAGIC      = 0x2,
 };

enum STATUS_NORMAL
{
    STATUS_NORMAL_DEATH    = 0x0,
    STATUS_NORMAL_ALTERNA  = 0x1,
    STATUS_NORMAL_RESERVE1 = 0x2,
    STATUS_NORMAL_RESERVE2 = 0x3,
    STATUS_NORMAL_RESERVE3 = 0x4,
    STATUS_NORMAL_RESERVE4 = 0x5,
    STATUS_NORMAL_RESERVE5 = 0x6,
    STATUS_NORMAL_RESERVE6 = 0x7,
    STATUS_NORMAL_AMOUNT   = 0x8,
};
enum ABILITY_CONDITION 
 {                                       
     ABILITY_CONDITION_NONE    = 0x0,
     ABILITY_CONDITION_HP_LOW  = 0x1,
     ABILITY_CONDITION_HP_HIGH = 0x2,
     ABILITY_CONDITION_AMOUNT  = 0x3,
 };
  enum SAVE_SUMMON 
 {                                       
     SAVE_SUMMON_NONE          = 0xFFFFFFFF,
     SAVE_SUMMON_IFRIT         = 0x0,
     SAVE_SUMMON_SHIVA         = 0x1,
     SAVE_SUMMON_RAMUH         = 0x2,
     SAVE_SUMMON_TITAN         = 0x3,
     SAVE_SUMMON_LEVIATHAN     = 0x4,
     SAVE_SUMMON_BAHAMUT       = 0x5,
     SAVE_SUMMON_CARBUNCLE     = 0x6,
     SAVE_SUMMON_GARUDA        = 0x7,
     SAVE_SUMMON_BUFFER_AMOUNT = 0x20,
 };

 enum SAVE_SUMMON_DIRECTION
 {                                       
     SAVE_SUMMON_DIRECTION_DISABLE   = 0xFFFFFFFF,
     SAVE_SUMMON_DIRECTION_FULL_SPEC = 0x0,
     SAVE_SUMMON_DIRECTION_SIMPLE    = 0x1,
     SAVE_SUMMON_DIRECTION_SPECIAL1  = 0x2,
     SAVE_SUMMON_DIRECTION_SPECIAL2  = 0x3,
 };
  enum STATUS_ADJUST
 {
     STATUS_ADJUST_NONE            = 0xFFFFFFFF,
     STATUS_ADJUST_STRENGTH        = 0x0,
     STATUS_ADJUST_VITALITY        = 0x1,
     STATUS_ADJUST_MAGIC           = 0x2,
     STATUS_ADJUST_SPIRIT          = 0x3,
     STATUS_ADJUST_HP_MAX          = 0x4,
     STATUS_ADJUST_HP_RECOVER      = 0x5,
     STATUS_ADJUST_MP_MAX          = 0x6,
     STATUS_ADJUST_MP_RECOVER      = 0x7,
     STATUS_ADJUST_ELEMENT_SLASH   = 0x8,
     STATUS_ADJUST_ELEMENT_STRUCK  = 0x9,
     STATUS_ADJUST_ELEMENT_STAB    = 0xA,
     STATUS_ADJUST_ELEMENT_BULLET  = 0xB,
     STATUS_ADJUST_ELEMENT_FIRE    = 0xC,
     STATUS_ADJUST_ELEMENT_ICE     = 0xD,
     STATUS_ADJUST_ELEMENT_THUNDER = 0xE,
     STATUS_ADJUST_ELEMENT_DARK    = 0xF,
     STATUS_ADJUST_CRITICAL        = 0x10,
     STATUS_ADJUST_LEVEL_MAX       = 0x11,
     STATUS_ADJUST_EXP             = 0x12,
     STATUS_ADJUST_AMOUNT          = 0x13, 
 };

 enum SYSTEM_TOGGLE
 {                                       
     SYSTEM_TOGGLE_NONE               = 0xFFFFFFFF,
     SYSTEM_TOGGLE_MENU_MAIN          = 0x0,
     SYSTEM_TOGGLE_MENU_MAP           = 0x1,
     SYSTEM_TOGGLE_MENU_QUEST         = 0x2,
     SYSTEM_TOGGLE_MENU_EQUIPMENT     = 0x3,
     SYSTEM_TOGGLE_MENU_ABILITY       = 0x4,
     SYSTEM_TOGGLE_MENU_SKILL         = 0x5,
     SYSTEM_TOGGLE_MENU_MAGIC         = 0x6,
     SYSTEM_TOGGLE_MENU_ITEM          = 0x7,
     SYSTEM_TOGGLE_MENU_COLLECTION    = 0x8,
     SYSTEM_TOGGLE_MENU_DRIVE         = 0x9,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_SWORD = 0xA,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_LARGE_SWORD = 0xB,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_SPEAR = 0xC,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_DAGGER = 0xD,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_GUN = 0xE,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_SHIELD = 0xF,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_MACHINE = 0x10,
     SYSTEM_TOGGLE_FRIEND_ITEM        = 0x11,
     SYSTEM_TOGGLE_STRATEGY           = 0x12,
     SYSTEM_TOGGLE_COOPERATION        = 0x13,
     SYSTEM_TOGGLE_PICTURE            = 0x14,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_CLOTH = 0x15,
     SYSTEM_TOGGLE_WAIT_MODE          = 0x16,
     SYSTEM_TOGGLE_WARP               = 0x17,
     SYSTEM_TOGGLE_SUMMON             = 0x18,
     SYSTEM_TOGGLE_JOB_COMMAND        = 0x19,
     SYSTEM_TOGGLE_PHANTOM_GAUGE      = 0x1A,
     SYSTEM_TOGGLE_PHANTOM_BURST      = 0x1B,
     SYSTEM_TOGGLE_BATTLE_MENU        = 0x1C,
     SYSTEM_TOGGLE_ATTACK             = 0x1D,
     SYSTEM_TOGGLE_DEFENSE            = 0x1E,
     SYSTEM_TOGGLE_SHIFT              = 0x1F,
     SYSTEM_TOGGLE_MAP_SHIFT          = 0x20,
     SYSTEM_TOGGLE_SHIFT_BREAK        = 0x21,
     SYSTEM_TOGGLE_PARRY              = 0x22,
     SYSTEM_TOGGLE_JUMP               = 0x23,
     SYSTEM_TOGGLE_MOVE               = 0x24,
     SYSTEM_TOGGLE_CAMERA             = 0x25,
     SYSTEM_TOGGLE_TARGET_LOCK        = 0x26,
     SYSTEM_TOGGLE_WEAPON             = 0x27,
     SYSTEM_TOGGLE_MAGIC              = 0x28,
     SYSTEM_TOGGLE_DASH               = 0x29,
     SYSTEM_TOGGLE_WEAPON_MENU        = 0x2A,
     SYSTEM_TOGGLE_WEAPON_CHANGE      = 0x2B,
     SYSTEM_TOGGLE_ROLL_AVOID         = 0x2C,
     SYSTEM_TOGGLE_MENU_EQUIPMENT_WEAPON = 0x2D,
     SYSTEM_TOGGLE_STAMINA            = 0x2E,
     SYSTEM_TOGGLE_TROPHY             = 0x2F,
     SYSTEM_TOGGLE_MENU_LOAD          = 0x30,
     SYSTEM_TOGGLE_REWARD             = 0x31,
     SYSTEM_TOGGLE_TIPS               = 0x32,
     SYSTEM_TOGGLE_ITEM_MENU          = 0x33,
     SYSTEM_TOGGLE_MENU_TIMED_QUEST   = 0x34,
     SYSTEM_TOGGLE_SKILL_SURVIVAL     = 0x35,
     SYSTEM_TOGGLE_INVALID_LONG_RANGE_DAMAGE = 0x36,
     SYSTEM_TOGGLE_INVINCIBLE_SUITS   = 0x37,
     SYSTEM_TOGGLE_AMOUNT             = 0x80,
 };
 enum ABILITY_ENUM 
 {                                       
     ABILITY_NONE                     = 0xFFFFFFFF,
     RESERVED_OR_ABILITY_ACT_DODGE_ROLL           = 0x0,
     ABILITY_SPEC_AUTO_AVOID          = 0x1,
     ABILITY_SPEC_AUTO_AVOID_MP_REDUCE = 0x2,
     ABILITY_SPEC_JUST_GUARD_MP_RECOVER = 0x3,
     ABILITY_ACT_AIR_AVOID            = 0x4,
     ABILITY_ACT_DAMAGE_SHIFT         = 0x5,
     ABILITY_PS_ELEMENT_ABSORB_UP     = 0x6,
     ABILITY_PS_PHANTOM_SUMMON        = 0x7,
     ABILITY_PS_PHANTOM_GAUGE_REDUCE  = 0x8,
     ABILITY_PS_BURST                 = 0x9,
     ABILITY_PS_BURST_DAMAGE_UP       = 0xA,
     ABILITY_PS_BURST_EXP_UP          = 0xB,
     ABILITY_PS_BURST_MP_UNLIMITED    = 0xC,
     ABILITY_SPEC_LIBRA_1             = 0xD,
     ABILITY_SPEC_LIBRA_2             = 0xE,
     ABILITY_SPEC_LIBRA_3             = 0xF,
     ABILITY_SPEC_LIBRA_PARTS_DAMAGE_UP = 0x10,
     ABILITY_SPEC_LIBRA_ELEMENT_DAMAGE_UP = 0x11,
     ABILITY_SPEC_COVER_RECOVER_UP    = 0x12,
     ABILITY_SPEC_STAMINA_UP          = 0x13,
     ABILITY_SPEC_DECOY_MAP_SHIFT     = 0x14,
     ABILITY_SPEC_DECOY_EXTENSION     = 0x15,
     ABILITY_SPEC_DECOY_SHFT_ATTACK   = 0x16,
     ABILITY_LINK_ATTACK_LARGE_SWORD  = 0x17,
     ABILITY_LINK_ATTACK_SPEAR        = 0x18,
     ABILITY_LINK_CROSS               = 0x19,
     ABILITY_LINK_CROSS_DAMAGE_UP     = 0x1A,
     ABILITY_LINK_CROSS_CHANCE_UP     = 0x1B,
     ABILITY_ACT_SHIFT_RAID           = 0x1C,
     ABILITY_ACT_AIR_STEP             = 0x1D,
     ABILITY_ACT_AIR_STEP_COMBO       = 0x1E,
     ABILITY_ACT_AIR_STEP_UNLIMITED   = 0x1F,
     ABILITY_SPEC_COMBO_UP            = 0x20,
     ABILITY_SPEC_PHANTOM_GAUGE_UP    = 0x21,
     ABILITY_SPEC_BACK_STAB           = 0x22,
     ABILITY_SPEC_CHARGE_UP           = 0x23,
     ABILITY_SPEC_SUMMON_WEAPON       = 0x24,
     ABILITY_SPEC_EQUIP_MAGIC_NOCTIS  = 0x25,
     ABILITY_SPEC_JUST_GUARD          = 0x26,
     ABILITY_LINK_ATTACK_SWORD        = 0x27,
     ABILITY_MAGIC_CREATE             = 0x28,
     ABILITY_MAGIC_CUSTOMIZE          = 0x29,
     ABILITY_MAGIC_ADD_RA_TYPE        = 0x2A,
     ABILITY_MAGIC_ADD_GA_TYPE        = 0x2B,
     ABILITY_JOB_COMMAND_TEMPEST      = 0x2C,
     ABILITY_JOB_COMMAND_WARHAMMER    = 0x2D,
     ABILITY_JOB_COMMAND_SHIFTMINE    = 0x2E,
     ABILITY_JOB_COMMAND_KINGSHIELD   = 0x2F,
     ABILITY_JOB_COMMAND_SPECIAL_G    = 0x30,
     ABILITY_JOB_COMMAND_ASSALT       = 0x31,
     ABILITY_JOB_COMMAND_RECOVERY     = 0x32,
     ABILITY_JOB_COMMAND_MARKING      = 0x33,
     ABILITY_JOB_COMMAND_ENHANCE_FIRE = 0x34,
     ABILITY_JOB_COMMAND_ENHANCE_BLIZZARD = 0x35,
     ABILITY_JOB_COMMAND_ENHANCE_THUNDER = 0x36,
     ABILITY_JOB_COMMAND_SPECIAL_I    = 0x37,
     ABILITY_JOB_COMMAND_FLARE        = 0x38,
     ABILITY_JOB_COMMAND_PIERCINGBULLET = 0x39,
     ABILITY_JOB_COMMAND_BLASTER      = 0x3A,
     ABILITY_JOB_COMMAND_CONDENSER    = 0x3B,
     ABILITY_JOB_COMMAND_SNAPSHOT     = 0x3C,
     ABILITY_JOB_COMMAND_SPECIAL_P    = 0x3D,
     ABILITY_JOB_COMMAND_SHISHIKU     = 0x3E,
     ABILITY_JOB_COMMAND_AIR_SUPERIORITY = 0x3F,
     ABILITY_JOB_COMMAND_ECLIPSE      = 0x40,
     ABILITY_JOB_COMMAND_CHARGE       = 0x41,
     ABILITY_SKILL_FIRSTBREAK         = 0x42,
     ABILITY_SKILL_ANALYZE            = 0x43,
     ABILITY_SKILL_STARTERPISTOL      = 0x44,
     ABILITY_SKILL_INTERCEPT          = 0x45,
     ABILITY_SKILL_REGEN              = 0x46,
     ABILITY_SKILL_QUICKDRAW          = 0x47,
     ABILITY_SKILL_CROSSCOUNTER       = 0x48,
     ABILITY_SKILL_DRAGONLANCE        = 0x49,
     ABILITY_SKILL_PROMPTOCOUNTER     = 0x4A,
     ABILITY_SKILL_DUALCOUNTER        = 0x4B,
     ABILITY_SKILL_DOUBLESTAB         = 0x4C,
     ABILITY_SKILL_BINDBUNKER         = 0x4D,
     ABILITY_SKILL_DARKNESS           = 0x4E,
     ABILITY_SKILL_SHIELDTHROW        = 0x4F,
     ABILITY_SKILL_VENOMFANG          = 0x50,
     ABILITY_SKILL_CHERRYBLOSSOM      = 0x51,
     ABILITY_SKILL_GATLINGRUSH        = 0x52,
     ABILITY_SKILL_MACHINEATTACK      = 0x53,
     ABILITY_SPEC_MIGHTYRECOVER       = 0x54,
     ABILITY_SPEC_PROTECTRECOVER      = 0x55,
     ABILITY_SPEC_REVENGERECOVER      = 0x56,
     ABILITY_SPEC_EQUIP_SWORD         = 0x57,
     ABILITY_SPEC_EQUIP_LARGE_SWORD   = 0x58,
     ABILITY_SPEC_EQUIP_DAGGER        = 0x59,
     ABILITY_SPEC_EQUIP_GUN           = 0x5A,
     ABILITY_SPEC_EQUIP_SPEAR         = 0x5B,
     ABILITY_SPEC_EQUIP_SHIELD        = 0x5C,
     ABILITY_SPEC_EQUIP_MACHINE       = 0x5D,
     ABILITY_SPEC_EQUIP_MAGIC_FRIENDS = 0x5E,
     ABILITY_SPEC_ACCESSORY_SLOT_1    = 0x5F,
     ABILITY_SPEC_ACCESSORY_SLOT_2_NOCTIS = 0x60,
     ABILITY_SPEC_ACCESSORY_SLOT_3_NOCTIS = 0x61,
     ABILITY_SPEC_ACCESSORY_SLOT_2_GLADIOLUS = 0x62,
     ABILITY_SPEC_ACCESSORY_SLOT_3_GLADIOLUS = 0x63,
     ABILITY_SPEC_ACCESSORY_SLOT_2_IGNIS = 0x64,
     ABILITY_SPEC_ACCESSORY_SLOT_3_IGNIS = 0x65,
     ABILITY_SPEC_ACCESSORY_SLOT_2_PROMPTO = 0x66,
     ABILITY_SPEC_ACCESSORY_SLOT_3_PROMPTO = 0x67,
     ABILITY_SPEC_FIRSTAID_GLADIOLUS  = 0x68,
     ABILITY_SPEC_FIRSTAID_2_GLADIOLUS = 0x69,
     ABILITY_SPEC_FIRSTAID_3_GLADIOLUS = 0x6A,
     ABILITY_SPEC_FIRSTAID_IGNIS      = 0x6B,
     ABILITY_SPEC_FIRSTAID_2_IGNIS    = 0x6C,
     ABILITY_SPEC_FIRSTAID_3_IGNIS    = 0x6D,
     ABILITY_SPEC_FIRSTAID_PROMPTO    = 0x6E,
     ABILITY_SPEC_FIRSTAID_2_PROMPTO  = 0x6F,
     ABILITY_SPEC_FIRSTAID_3_PROMPTO  = 0x70,
     ABILITY_ENC_COMBO_BONUS          = 0x71,
     ABILITY_ENC_SINGLE_BONUS         = 0x72,
     ABILITY_ENC_CLOUD_BONUS          = 0x73,
     ABILITY_ENC_FIRE_ATTACK          = 0x74,
     ABILITY_ENC_ICE_ATTACK           = 0x75,
     ABILITY_ENC_THUNDER_ATTACK       = 0x76,
     ABILITY_ENC_LIGHT_ATTACK         = 0x77,
     ABILITY_ENC_CRITICAL_UP          = 0x78,
     ABILITY_ENC_SHIFT_ATTACK_UP      = 0x79,
     ABILITY_ENC_DOWN_BONUS           = 0x7A,
     ABILITY_ENC_PARTS_DAMAGE_UP      = 0x7B,
     ABILITY_ENC_JUMP_ATTACK_UP       = 0x7C,
     ABILITY_ENC_JUMP_MP_REDUCE       = 0x7D,
     ABILITY_ENC_DRAIN                = 0x7E,
     ABILITY_ENC_ANTI_STAMINA_ATTACK  = 0x7F,
     ABILITY_ENC_MP_ATTACK            = 0x80,
     ABILITY_ENC_HPMAX_RATIO_ATTACK   = 0x81,
     ABILITY_ENC_BERSERK              = 0x82,
     ABILITY_ENC_HPLOW_ATTACK_UP      = 0x83,
     ABILITY_ENC_HPLOW_CRITICAL_UP    = 0x84,
     ABILITY_ENC_RATIO_ATTACK         = 0x85,
     ABILITY_ENC_FINISH_ATTACK_UP     = 0x86,
     ABILITY_ENC_HPRATIO_ATTACK_UP    = 0x87,
     ABILITY_ENC_ADD_STRENGTH_DOWN    = 0x88,
     ABILITY_ENC_ADD_DEFENSE_DOWN     = 0x89,
     ABILITY_ENC_ADD_POISON           = 0x8A,
     ABILITY_ENC_ADD_STOP             = 0x8B,
     ABILITY_ENC_DEATH                = 0x8C,
     ABILITY_ENC_ADD_DEATH_COUNT      = 0x8D,
     ABILITY_ENC_JUST_GUARD_HP_RECOVER = 0x8E,
     ABILITY_ENC_SHIELD_COUNTER_ATTACK_UP = 0x8F,
     ABILITY_ENC_PHYSICAL_DAMAGE_REDUCE = 0x90,
     ABILITY_ENC_ELEMENT_DAMAGE_REDUCE = 0x91,
     ABILITY_ENC_SHIELD_DAMAGE_REDUCE_FIRE = 0x92,
     ABILITY_ENC_SHIELD_DAMAGE_REDUCE_ICE = 0x93,
     ABILITY_ENC_SHIELD_DAMAGE_REDUCE_THUNDER = 0x94,
     ABILITY_ENC_SHIELD_DAMAGE_REDUCE_DARK = 0x95,
     ABILITY_ENC_SHIELD_DAMAGE_REDUCE_BULLET = 0x96,
     ABILITY_ENC_EXP_BONUS            = 0x97,
     ABILITY_ENC_ITEM_DROP_BONUS      = 0x98,
     ABILITY_ENC_DRAW_ELEMENT         = 0x99,
     ABILITY_ENC_SNIPE_MODE           = 0x9A,
     ABILITY_ENC_DAMAGE_INVALID       = 0x9B,
     ABILITY_ENC_MACHINE_GRAVITY      = 0x9C,
     ABILITY_ENC_MACHINE_BIO          = 0x9D,
     ABILITY_ENC_MACHINE_VOICE        = 0x9E,
     ABILITY_ENC_MACHINE_DRILL        = 0x9F,
     ABILITY_ENC_MACHINE_BOW          = 0xA0,
     ABILITY_ENC_MACHINE_SAW          = 0xA1,
     ABILITY_ENC_PHANTOM_SWORD        = 0xA2,
     ABILITY_ENC_PHANTOM_AXE          = 0xA3,
     ABILITY_ENC_PHANTOM_BOW          = 0xA4,
     ABILITY_ENC_PHANTOM_DUAL         = 0xA5,
     ABILITY_ENC_PHANTOM_LONG         = 0xA6,
     ABILITY_ENC_PHANTOM_SHURIKEN     = 0xA7,
     ABILITY_ENC_PHANTOM_LARGE        = 0xA8,
     ABILITY_ENC_PHANTOM_SHIELD       = 0xA9,
     ABILITY_ENC_PHANTOM_MACE         = 0xAA,
     ABILITY_ENC_PHANTOM_WAND         = 0xAB,
     ABILITY_ENC_PHANTOM_SPEAR        = 0xAC,
     ABILITY_ENC_PHANTOM_KATANA       = 0xAD,
     ABILITY_ENC_PHANTOM_REGIS        = 0xAE,
     ABILITY_ENC_DAMAGE_9999          = 0xAF,
     ABILITY_ENC_INVALID_POISON       = 0xB0,
     ABILITY_ENC_INVALID_CONFUSE      = 0xB1,
     ABILITY_ENC_INVALID_TOAD         = 0xB2,
     ABILITY_ENC_INVALID_STONE        = 0xB3,
     ABILITY_ENC_INVALID_STOP         = 0xB4,
     ABILITY_ENC_INVALID_DEATH        = 0xB5,
     ABILITY_ENC_INVALID_STRENGTH     = 0xB6,
     ABILITY_ENC_INVALID_VITALITY     = 0xB7,
     ABILITY_ENC_INVALID_MAGIC        = 0xB8,
     ABILITY_ENC_INVALID_SPIRIT       = 0xB9,
     ABILITY_ENC_INVALID_ALL          = 0xBA,
     ABILITY_ENC_ABSORB_FIRE          = 0xBB,
     ABILITY_ENC_ABSORB_ICE           = 0xBC,
     ABILITY_ENC_ABSORB_THUNDER       = 0xBD,
     ABILITY_ENC_ABSORB_DARK          = 0xBE,
     ABILITY_ENC_PROTECT_DIRTY        = 0xBF,
     ABILITY_ENC_HARD_DIRTY           = 0xC0,
     ABILITY_ENC_EASY_DIRTY           = 0xC1,
     ABILITY_ENC_PROTECT_BLOODY       = 0xC2,
     ABILITY_ENC_HAIRSET              = 0xC3,
     ABILITY_ENC_AUTO_POTION          = 0xC4,
     ABILITY_ENC_AUTO_AVOID_MP_REDUCE = 0xC5,
     ABILITY_ENC_AUTO_AVOID_MP_REDUCE_1 = 0xC6,
     ABILITY_ENC_JUST_GUARD_HP_RECOVER_1 = 0xC7,
     ABILITY_ENC_ATTACK_UP_DIRTY      = 0xC8,
     ABILITY_ENC_ATTACK_UP_CLEAN      = 0xC9,
     ABILITY_ENC_LINK_CHANCE_UP       = 0xCA,
     ABILITY_ENC_RECOVER_PINCH        = 0xCB,
     ABILITY_ENC_ENDURE_DEATH         = 0xCC,
     ABILITY_ENC_SWITCH_BONUS         = 0xCD,
     ABILITY_ENC_AUTO_SWITCH          = 0xCE,
     ABILITY_ENC_AUTO_ETHER           = 0xCF,
     ABILITY_ENC_JUST_GUARD_MP_RECOVER = 0xD0,
     ABILITY_ENC_TRUE_AUTO_AVOID      = 0xD1,
     ABILITY_ENC_MAXHP_UP_ALL         = 0xD2,
     ABILITY_ENC_HP_RECOVER_UP_ALL    = 0xD3,
     ABILITY_ENC_MAGIC_DAMAGE_ATTACK_UP = 0xD4,
     ABILITY_ENC_ATTACK_UP_LARGE_ENEMY = 0xD5,
     ABILITY_ENC_COMMAND_GAUGE_UP     = 0xD6,
     ABILITY_ENC_ATTACK_UP_LIBRA_ENEMY = 0xD7,
     ABILITY_ENC_AUTO_POTION_NOCT     = 0xD8,
     ABILITY_ENC_AUTO_POTION_NOCT_1   = 0xD9,
     ABILITY_ENC_ATTACK_UP_SMALL_ENEMY = 0xDA,
     ABILITY_ENC_AP_BONUS             = 0xDB,
     ABILITY_ENC_CAMERA               = 0xDC,
     ABILITY_ENC_CAMERA_1             = 0xDD,
     ABILITY_ENC_EXP_BONUS_1          = 0xDE,
     ABILITY_ENC_NO_EXP               = 0xDF,
     ABILITY_ENC_STATUS_GUARD         = 0xE0,
     ABILITY_ENC_INVALID_FIRE         = 0xE1,
     ABILITY_ENC_INFINITE_SATAMINA    = 0xE2,
     ABILITY_SPEC_ADD_HP_ALL          = 0xE3,
     ABILITY_SPEC_ADD_HP_ALL_2        = 0xE4,
     ABILITY_SPEC_ADD_HP_ALL_3        = 0xE5,
     ABILITY_SPEC_ADD_STRENGTH_ALL    = 0xE6,
     ABILITY_SPEC_ADD_STRENGTH_ALL_2  = 0xE7,
     ABILITY_SPEC_ADD_STRENGTH_ALL_3  = 0xE8,
     ABILITY_SPEC_ADD_VITALITY_ALL    = 0xE9,
     ABILITY_SPEC_ADD_VITALITY_ALL_2  = 0xEA,
     ABILITY_SPEC_ADD_VITALITY_ALL_3  = 0xEB,
     ABILITY_SPEC_ADD_MAGIC_ALL       = 0xEC,
     ABILITY_SPEC_ADD_MAGIC_ALL_2     = 0xED,
     ABILITY_SPEC_ADD_MAGIC_ALL_3     = 0xEE,
     ABILITY_SPEC_ADD_SPIRIT_ALL      = 0xEF,
     ABILITY_SPEC_ADD_SPIRIT_ALL_2    = 0xF0,
     ABILITY_SPEC_ADD_SPIRIT_ALL_3    = 0xF1,
     ABILITY_ACT_AIR_MP_RECOVER       = 0xF2,
     ABILITY_ACT_SHIFT_BREAK_UP       = 0xF3,
     ABILITY_ACT_SHIFT_BREAK_UP_2     = 0xF4,
     ABILITY_ACT_SHIFT_BREAK_ZERO     = 0xF5,
     ABILITY_ACT_SHIFT_BREAK_SHIGAI_CRUSH = 0xF6,
     ABILITY_SPEC_AUTO_AVOID_MP_REDUCE_2 = 0xF7,
     ABILITY_SPEC_ADD_MP              = 0xF8,
     ABILITY_SPEC_ADD_MP_2            = 0xF9,
     ABILITY_SPEC_ADD_MP_3            = 0xFA,
     ABILITY_ACT_BACK_ATTACK_UP       = 0xFB,
     ABILITY_ACT_BACK_ATTACK_UP_2     = 0xFC,
     ABILITY_ACT_MP_BURST_ATTACK      = 0xFD,
     ABILITY_ACT_HANG_HP_RECOVER      = 0xFE,
     ABILITY_SPEC_STAMINA_UP_2        = 0xFF,
     ABILITY_SPEC_FULLRECOVER         = 0x100,
     ABILITY_ACT_LINK_ATTACK_UP       = 0x101,
     ABILITY_ACT_LINK_ATTACK_UP_2     = 0x102,
     ABILITY_ACT_LINK_CRITICAL        = 0x103,
     ABILITY_ACT_LINK_LIMIT_BREAK     = 0x104,
     ABILITY_SKILL_DUALCOUNTER_2      = 0x105,
     ABILITY_SKILL_BINDBUNKER_2       = 0x106,
     ABILITY_SKILL_DOUBLESTAB_2       = 0x107,
     ABILITY_SKILL_FATAL_ATTACK       = 0x108,
     ABILITY_SKILL_FATAL_ATTACK_2     = 0x109,
     ABILITY_JOB_COMMAND_LIMIT_BREAK_GLADIOLUS = 0x10A,
     ABILITY_JOB_COMMAND_LIMIT_BREAK_IGNIS = 0x10B,
     ABILITY_JOB_COMMAND_LIMIT_BREAK_PROMPTO = 0x10C,
     ABILITY_JOB_COMMAND_ENHANCE      = 0x10D,
     ABILITY_JOB_COMMAND_GAUGE_UP_ATK = 0x10E,
     ABILITY_JOB_COMMAND_GAUGE_UP_DMG = 0x10F,
     ABILITY_JOB_COMMAND_GAUGE_UP     = 0x110,
     ABILITY_PS_ELEMENT_ABSORB_UP_2   = 0x111,
     ABILITY_PS_ELEMENT_ABSORB_UP_3   = 0x112,
     ABILITY_PS_ELEMENT_ABSORB_UP_ENGINE = 0x113,
     ABILITY_MAGIC_POWER_UP           = 0x114,
     ABILITY_MAGIC_POWER_UP_2         = 0x115,
     ABILITY_MAGIC_POWER_UP_3         = 0x116,
     ABILITY_MAGIC_POWER_UP_4         = 0x117,
     ABILITY_MAGIC_AP                 = 0x118,
     ABILITY_MAGIC_AMOUNT_UP          = 0x119,
     ABILITY_MAGIC_AMOUNT_UP_2        = 0x11A,
     ABILITY_PS_PHANTOM_SUMMON_AP     = 0x11B,
     ABILITY_PS_BURST_AP              = 0x11C,
     ABILITY_SUBSKILL_PHOTO_IDOL      = 0x11D,
     ABILITY_SUBSKILL_FISHING_AP      = 0x11E,
     ABILITY_SUBSKILL_FISHING_FOOD    = 0x11F,
     ABILITY_SUBSKILL_FISHING_AP_2    = 0x120,
     ABILITY_SUBSKILL_FISHING_FOOD_3  = 0x121,
     ABILITY_SUBSKILL_FISHING_EXP     = 0x122,
     ABILITY_SUBSKILL_BUFF_TIME_UP    = 0x123,
     ABILITY_SUBSKILL_BUFF_TIME_UP_2  = 0x124,
     ABILITY_SUBSKILL_BUFF_TIME_UP_3  = 0x125,
     ABILITY_SUBSKILL_FAVORITE_FOOD_AP = 0x126,
     ABILITY_SUBSKILL_CAMP_AP         = 0x127,
     ABILITY_SUBSKILL_CAMP_AP_2       = 0x128,
     ABILITY_SUBSKILL_SURVIVAL_ITEM_UP = 0x129,
     ABILITY_SUBSKILL_SURVIVAL_ITEM_UP_2 = 0x12A,
     ABILITY_CAR_DRIVE_AP             = 0x12B,
     ABILITY_CAR_DRIVE_EXP            = 0x12C,
     ABILITY_CHOCOBO_RIDE_AP          = 0x12D,
     ABILITY_CHOCOBO_RIDE_EXP         = 0x12E,
     ABILITY_CHOCOBO_RACE_AP          = 0x12F,
     ABILITY_CHOCOBO_RACE_EXP         = 0x130,
     ABILITY_SPEC_LIBRA_PARTS_DAMAGE_UP_2 = 0x131,
     ABILITY_SPEC_LIBRA_ELEMENT_DAMAGE_UP_2 = 0x132,
     ABILITY_WAIT_TIME_UP             = 0x133,
     ABILITY_WAIT_TIME_UP_2           = 0x134,
     ABILITY_WAIT_TIME_UP_3           = 0x135,
     ABILITY_WAIT_INFO_DAMAGE         = 0x136,
     ABILITY_WAIT_INFO_TARGET         = 0x137,
     ABILITY_WAIT_WIN_AP              = 0x138,
     ABILITY_PS_PHANTOM_DEFEAT_HP_RECOVER = 0x139,
     ABILITY_PS_PHANTOM_MP_RECOVER    = 0x13A,
     ABILITY_WAIT_GAUGE_UNLIMITED     = 0x13B,
     ABILITY_WAIT_GAUGE_RECOVER       = 0x13C,
     ABILITY_WAIT_LIBRA_SPEED_UP      = 0x13D,
     ABILITY_WAIT_LIBRA_NUM_DAMAGE_UP = 0x13E,
     ABILITY_WAIT_LIBRA_PLUS          = 0x13F,
     ABILITY_WAIT_LIBRA_PLUS_AP       = 0x140,
     ABILITY_WAIT_SURPRISE_SHIFT_BREAK = 0x141,
     ABILITY_WAIT_PURSUIT_SHIFT_BREAK = 0x142,
     ABILITY_ENC_INVINCIBLE           = 0x143,
     ABILITY_ENC_INVINCIBLE_JO        = 0x144,
     ABILITY_ENC_AFRO_SWORD           = 0x145,
     ABILITY_ENC_BOOST_SWORD          = 0x146,
     ABILITY_ENC_NO_FRIENDLY_FIRE     = 0x147,
     ABILITY_ENC_NO_LEVEL_UP          = 0x148,
     ABILITY_ENC_EXP_TO_AP            = 0x149,
     ABILITY_ENC_COMMAND_GAUGE_ACCELERATE = 0x14A,
     ABILITY_ENC_PHANTOM_GAUGE_ACCELERATE = 0x14B,
     ABILITY_ENC_RESULT_OFFENCE_AP    = 0x14C,
     ABILITY_ENC_RESULT_TIME_AP       = 0x14D,
     ABILITY_ENC_RESULT_TECHNIQUE_AP  = 0x14E,
     ABILITY_ENC_ITEM_DROP_UP         = 0x14F,
     ABILITY_ENC_ALTERNA_PLUS         = 0x150,
     ABILITY_WE20_000_SWORD_SP_000    = 0x151,
     ABILITY_WE21_000_AXE_SP_000      = 0x152,
     ABILITY_WE22_000_BOW_SP_000      = 0x153,
     ABILITY_WE23_000_DUAL_SP_000     = 0x154,
     ABILITY_WE24_000_LONG_SP_000     = 0x155,
     ABILITY_WE25_000_SHURIKEN_SP_000 = 0x156,
     ABILITY_WE26_000_LARGE_SP_000    = 0x157,
     ABILITY_WE27_000_SHIELD_SP_000   = 0x158,
     ABILITY_WE28_000_MACE_SP_000     = 0x159,
     ABILITY_WE29_000_WAND_SP_000     = 0x15A,
     ABILITY_WE30_000_SPEAR_SP_000    = 0x15B,
     ABILITY_WE31_000_KATANA_SP_000   = 0x15C,
     ABILITY_WE32_000_REGIS_SP_000    = 0x15D,
     ABILITY_SKILL_EPG_FIRSTBREAK     = 0x15E,
     ABILITY_SKILL_EPG_CHARGEBREAK    = 0x15F,
     ABILITY_SKILL_EPG_WHIRLWIND      = 0x160,
     ABILITY_SKILL_EPG_TEMPEST_KAI    = 0x161,
     ABILITY_SKILL_EPG_RISINGHAMMER   = 0x162,
     ABILITY_ENC_DRAIN_MP_EPG         = 0x163,
     ABILITY_SPEC_EPG_ADD_MP          = 0x164,
     ABILITY_SPEC_EPG_ADD_MP_2        = 0x165,
     ABILITY_SPEC_EPG_ADD_MP_3        = 0x166,
     ABILITY_SPEC_EPG_ADD_MP_4        = 0x167,
     ABILITY_ENC_FINISH_ATTACK_MAX_UP = 0x168,
     ABILITY_ENC_ITEM_DROP_UP_CLOTH   = 0x169,
     ABILITY_ENC_MP_JOB_KNIGHT_000    = 0x16A,
     ABILITY_ENC_MP_JOB_DRAGOON_000   = 0x16B,
     ABILITY_ENC_MP_JOB_SAMURAI_000   = 0x16C,
     ABILITY_ENC_MP_JOB_RANGER_000    = 0x16D,
     ABILITY_ENC_MP_JOB_ILLUSIONIST_000 = 0x16E,
     ABILITY_ENC_MP_JOB_ASSASIN_000   = 0x16F,
     ABILITY_ENC_MP_JOB_ENGINEER_000  = 0x170,
     ABILITY_ENC_MP_JOB_BLACKMAGE_000 = 0x171,
     ABILITY_ENC_MP_JOB_PALADIN_000   = 0x172,
     ABILITY_ENC_MP_JOB_DARKKNIGHT_000 = 0x173,
     ABILITY_ENC_MP_JOB_BERSERKER_000 = 0x174,
     ABILITY_ENC_MP_JOB_WHITEMAGE_000 = 0x175,
     ABILITY_ENC_MP_ACT_BARRIER       = 0x176,
     ABILITY_ENC_MP_ACT_BARRIER_ATTACK = 0x177,
     ABILITY_ENC_MP_ACT_BARRIER_HUGE  = 0x178,
     ABILITY_ENC_MP_ACT_BARRIER_RECOVER = 0x179,
     ABILITY_ENC_MP_ACT_AVOID         = 0x17A,
     ABILITY_ENC_MP_ACT_AVOID_AIR     = 0x17B,
     ABILITY_ENC_MP_ACT_COVER_FREE    = 0x17C,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_COMBO = 0x17D,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_SP = 0x17E,
     ABILITY_ENC_MP_ACT_FINISH_JUMP   = 0x17F,
     ABILITY_ENC_MP_ACT_FINISH_MAGIC  = 0x180,
     ABILITY_ENC_MP_ACT_AIR_STEP      = 0x181,
     ABILITY_ENC_MP_ACT_AIR_STEP_UNLIMITED = 0x182,
     ABILITY_ENC_MP_ACT_SHIFT_RAID    = 0x183,
     ABILITY_ENC_MP_ACT_ATTACK_SUPER_ARMOR = 0x184,
     ABILITY_ENC_MP_ACT_ATTACK_HP_REDUCE = 0x185,
     ABILITY_ENC_MP_ACT_AUTO_SWITCH   = 0x186,
     ABILITY_ENC_MP_SPEC_PARTS_DAMAGE_BONUS = 0x187,
     ABILITY_ENC_MP_SPEC_COMBO_BONUS  = 0x188,
     ABILITY_ENC_MP_SPEC_ENCHANT_BONUS = 0x189,
     ABILITY_ENC_MP_SPEC_DROP_BONUS   = 0x18A,
     ABILITY_ENC_MP_MAG_ATK_FIRE_LV01 = 0x18B,
     ABILITY_ENC_MP_MAG_ATK_FIRE_LV02 = 0x18C,
     ABILITY_ENC_MP_MAG_ATK_FIRE_LV03 = 0x18D,
     ABILITY_ENC_MP_MAG_ATK_BLIZ_LV01 = 0x18E,
     ABILITY_ENC_MP_MAG_ATK_BLIZ_LV02 = 0x18F,
     ABILITY_ENC_MP_MAG_ATK_BLIZ_LV03 = 0x190,
     ABILITY_ENC_MP_MAG_ATK_THUN_LV01 = 0x191,
     ABILITY_ENC_MP_MAG_ATK_THUN_LV02 = 0x192,
     ABILITY_ENC_MP_MAG_ATK_THUN_LV03 = 0x193,
     ABILITY_ENC_MP_MAG_ATK_DIA_LV01  = 0x194,
     ABILITY_ENC_MP_MAG_ATK_DIA_LV02  = 0x195,
     ABILITY_ENC_MP_MAG_ATK_DIA_LV03  = 0x196,
     ABILITY_ENC_MP_MAG_HEAL_CURE_LV01 = 0x197,
     ABILITY_ENC_MP_MAG_HEAL_CURE_LV02 = 0x198,
     ABILITY_ENC_MP_MAG_HEAL_CURE_LV03 = 0x199,
     ABILITY_ENC_MP_MAG_HEAL_ATK_UP_LV01 = 0x19A,
     ABILITY_ENC_MP_MAG_HEAL_ATK_UP_LV02 = 0x19B,
     ABILITY_ENC_MP_MAG_HEAL_ATK_UP_LV03 = 0x19C,
     ABILITY_ENC_MP_MAG_HEAL_DEF_UP_LV01 = 0x19D,
     ABILITY_ENC_MP_MAG_HEAL_DEF_UP_LV02 = 0x19E,
     ABILITY_ENC_MP_MAG_HEAL_DEF_UP_LV03 = 0x19F,
     ABILITY_ENC_MP_MAG_HEAL_REGEN_LV01 = 0x1A0,
     ABILITY_ENC_MP_MAG_HEAL_REGEN_LV02 = 0x1A1,
     ABILITY_ENC_MP_MAG_HEAL_REGEN_LV03 = 0x1A2,
     ABILITY_ENC_MP_MAG_HEAL_POISONA_LV01 = 0x1A3,
     ABILITY_ENC_MP_MAG_HEAL_POISONA_LV02 = 0x1A4,
     ABILITY_ENC_MP_MAG_HEAL_POISONA_LV03 = 0x1A5,
     ABILITY_ENC_MP_MAG_HEAL_ESNA_LV01 = 0x1A6,
     ABILITY_ENC_MP_MAG_HEAL_ESNA_LV02 = 0x1A7,
     ABILITY_ENC_MP_MAG_HEAL_ESNA_LV03 = 0x1A8,
     ABILITY_ENC_MP_ACT_BREAK_AREA    = 0x1A9,
     ABILITY_ENC_MP_ACT_BREAK_BLOW    = 0x1AA,
     ABILITY_ENC_MP_ACT_BREAK_FIRE_LV01 = 0x1AB,
     ABILITY_ENC_MP_ACT_BREAK_FIRE_LV02 = 0x1AC,
     ABILITY_ENC_MP_ACT_BREAK_FIRE_LV03 = 0x1AD,
     ABILITY_ENC_MP_ACT_BREAK_BLIZ_LV01 = 0x1AE,
     ABILITY_ENC_MP_ACT_BREAK_BLIZ_LV02 = 0x1AF,
     ABILITY_ENC_MP_ACT_BREAK_BLIZ_LV03 = 0x1B0,
     ABILITY_ENC_MP_ACT_BREAK_THUN_LV01 = 0x1B1,
     ABILITY_ENC_MP_ACT_BREAK_THUN_LV02 = 0x1B2,
     ABILITY_ENC_MP_ACT_BREAK_THUN_LV03 = 0x1B3,
     ABILITY_ENC_MP_ACT_BREAK_DIA_LV01 = 0x1B4,
     ABILITY_ENC_MP_ACT_BREAK_DIA_LV02 = 0x1B5,
     ABILITY_ENC_MP_ACT_BREAK_DIA_LV03 = 0x1B6,
     ABILITY_ENC_MP_ACT_SLASH_AREA    = 0x1B7,
     ABILITY_ENC_MP_ACT_SLASH_BLOW    = 0x1B8,
     ABILITY_ENC_MP_ACT_SLASH_FIRE_LV01 = 0x1B9,
     ABILITY_ENC_MP_ACT_SLASH_FIRE_LV02 = 0x1BA,
     ABILITY_ENC_MP_ACT_SLASH_FIRE_LV03 = 0x1BB,
     ABILITY_ENC_MP_ACT_SLASH_BLIZ_LV01 = 0x1BC,
     ABILITY_ENC_MP_ACT_SLASH_BLIZ_LV02 = 0x1BD,
     ABILITY_ENC_MP_ACT_SLASH_BLIZ_LV03 = 0x1BE,
     ABILITY_ENC_MP_ACT_SLASH_THUN_LV01 = 0x1BF,
     ABILITY_ENC_MP_ACT_SLASH_THUN_LV02 = 0x1C0,
     ABILITY_ENC_MP_ACT_SLASH_THUN_LV03 = 0x1C1,
     ABILITY_ENC_MP_ACT_SLASH_DIA_LV01 = 0x1C2,
     ABILITY_ENC_MP_ACT_SLASH_DIA_LV02 = 0x1C3,
     ABILITY_ENC_MP_ACT_SLASH_DIA_LV03 = 0x1C4,
     ABILITY_ENC_MP_ACT_COUNTER_AREA  = 0x1C5,
     ABILITY_ENC_MP_ACT_COUNTER_BLOW  = 0x1C6,
     ABILITY_ENC_MP_ACT_COUNTER_FIRE_LV01 = 0x1C7,
     ABILITY_ENC_MP_ACT_COUNTER_FIRE_LV02 = 0x1C8,
     ABILITY_ENC_MP_ACT_COUNTER_FIRE_LV03 = 0x1C9,
     ABILITY_ENC_MP_ACT_COUNTER_BLIZ_LV01 = 0x1CA,
     ABILITY_ENC_MP_ACT_COUNTER_BLIZ_LV02 = 0x1CB,
     ABILITY_ENC_MP_ACT_COUNTER_BLIZ_LV03 = 0x1CC,
     ABILITY_ENC_MP_ACT_COUNTER_THUN_LV01 = 0x1CD,
     ABILITY_ENC_MP_ACT_COUNTER_THUN_LV02 = 0x1CE,
     ABILITY_ENC_MP_ACT_COUNTER_THUN_LV03 = 0x1CF,
     ABILITY_ENC_MP_ACT_COUNTER_DIA_LV01 = 0x1D0,
     ABILITY_ENC_MP_ACT_COUNTER_DIA_LV02 = 0x1D1,
     ABILITY_ENC_MP_ACT_COUNTER_DIA_LV03 = 0x1D2,
     ABILITY_ENC_MP_ACT_FINISH_AREA   = 0x1D3,
     ABILITY_ENC_MP_ACT_FINISH_BLOW   = 0x1D4,
     ABILITY_ENC_MP_ACT_FINISH_FIRE_LV01 = 0x1D5,
     ABILITY_ENC_MP_ACT_FINISH_FIRE_LV02 = 0x1D6,
     ABILITY_ENC_MP_ACT_FINISH_FIRE_LV03 = 0x1D7,
     ABILITY_ENC_MP_ACT_FINISH_BLIZ_LV01 = 0x1D8,
     ABILITY_ENC_MP_ACT_FINISH_BLIZ_LV02 = 0x1D9,
     ABILITY_ENC_MP_ACT_FINISH_BLIZ_LV03 = 0x1DA,
     ABILITY_ENC_MP_ACT_FINISH_THUN_LV01 = 0x1DB,
     ABILITY_ENC_MP_ACT_FINISH_THUN_LV02 = 0x1DC,
     ABILITY_ENC_MP_ACT_FINISH_THUN_LV03 = 0x1DD,
     ABILITY_ENC_MP_ACT_FINISH_DIA_LV01 = 0x1DE,
     ABILITY_ENC_MP_ACT_FINISH_DIA_LV02 = 0x1DF,
     ABILITY_ENC_MP_ACT_FINISH_DIA_LV03 = 0x1E0,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_AREA = 0x1E1,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_BLOW = 0x1E2,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_FIRE_LV01 = 0x1E3,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_FIRE_LV02 = 0x1E4,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_FIRE_LV03 = 0x1E5,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_BLIZ_LV01 = 0x1E6,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_BLIZ_LV02 = 0x1E7,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_BLIZ_LV03 = 0x1E8,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_THUN_LV01 = 0x1E9,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_THUN_LV02 = 0x1EA,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_THUN_LV03 = 0x1EB,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_DIA_LV01 = 0x1EC,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_DIA_LV02 = 0x1ED,
     ABILITY_ENC_MP_ACT_SHIFTBREAK_DIA_LV03 = 0x1EE,
     ABILITY_ENC_MP_ACT_ATK_STEP      = 0x1EF,
     ABILITY_ENC_MP_ACT_CANCEL_DODGE  = 0x1F0,
     ABILITY_ENC_MP_ACT_DODGE_COUNTER = 0x1F1,
     ABILITY_ENC_MP_ACT_MOTION_DANCE_LV01 = 0x1F2,
     ABILITY_ENC_MP_ACT_MOTION_DANCE_LV02 = 0x1F3,
     ABILITY_ENC_MP_ACT_MOTION_DANCE_LV03 = 0x1F4,
     ABILITY_ENC_MP_ATTACK_UP_SMALL_ENEMY_LV01 = 0x1F5,
     ABILITY_ENC_MP_ATTACK_UP_SMALL_ENEMY_LV02 = 0x1F6,
     ABILITY_ENC_MP_ATTACK_UP_SMALL_ENEMY_LV03 = 0x1F7,
     ABILITY_ENC_MP_ATTACK_UP_SMALL_ENEMY_LV04 = 0x1F8,
     ABILITY_ENC_MP_ATTACK_UP_SMALL_ENEMY_LV05 = 0x1F9,
     ABILITY_ENC_MP_ATTACK_UP_LARGE_ENEMY_LV01 = 0x1FA,
     ABILITY_ENC_MP_ATTACK_UP_LARGE_ENEMY_LV02 = 0x1FB,
     ABILITY_ENC_MP_ATTACK_UP_LARGE_ENEMY_LV03 = 0x1FC,
     ABILITY_ENC_MP_ATTACK_UP_LARGE_ENEMY_LV04 = 0x1FD,
     ABILITY_ENC_MP_ATTACK_UP_LARGE_ENEMY_LV05 = 0x1FE,
     ABILITY_ENC_MP_FIRE_ATTACK       = 0x1FF,
     ABILITY_ENC_MP_ICE_ATTACK        = 0x200,
     ABILITY_ENC_MP_THUNDER_ATTACK    = 0x201,
     ABILITY_ENC_MP_LIGHT_ATTACK      = 0x202,
     ABILITY_ENC_MP_ATTRIBUTE_BONNUS_LV01 = 0x203,
     ABILITY_ENC_MP_ATTRIBUTE_BONNUS_LV02 = 0x204,
     ABILITY_ENC_MP_ATTRIBUTE_BONNUS_LV03 = 0x205,
     ABILITY_ENC_MP_ATTRIBUTE_BONNUS_LV04 = 0x206,
     ABILITY_ENC_MP_ATTRIBUTE_BONNUS_LV05 = 0x207,
     ABILITY_ENC_MP_COMBO_BONUS_LV01  = 0x208,
     ABILITY_ENC_MP_COMBO_BONUS_LV02  = 0x209,
     ABILITY_ENC_MP_COMBO_BONUS_LV03  = 0x20A,
     ABILITY_ENC_MP_COMBO_BONUS_LV04  = 0x20B,
     ABILITY_ENC_MP_COMBO_BONUS_LV05  = 0x20C,
     ABILITY_ENC_MP_COMBO_CRITICAL_BONUS_LV01 = 0x20D,
     ABILITY_ENC_MP_COMBO_CRITICAL_BONUS_LV02 = 0x20E,
     ABILITY_ENC_MP_COMBO_CRITICAL_BONUS_LV03 = 0x20F,
     ABILITY_ENC_MP_COMBO_CRITICAL_BONUS_LV04 = 0x210,
     ABILITY_ENC_MP_COMBO_CRITICAL_BONUS_LV05 = 0x211,
     ABILITY_ENC_MP_COMBO_MP_RECOVER_LV01 = 0x212,
     ABILITY_ENC_MP_COMBO_MP_RECOVER_LV02 = 0x213,
     ABILITY_ENC_MP_COMBO_MP_RECOVER_LV03 = 0x214,
     ABILITY_ENC_MP_COMBO_MP_RECOVER_LV04 = 0x215,
     ABILITY_ENC_MP_COMBO_MP_RECOVER_LV05 = 0x216,
     ABILITY_ENC_MP_COMBO_BUFF_ATK_LV01 = 0x217,
     ABILITY_ENC_MP_COMBO_BUFF_ATK_LV02 = 0x218,
     ABILITY_ENC_MP_COMBO_BUFF_ATK_LV03 = 0x219,
     ABILITY_ENC_MP_COMBO_BUFF_ATK_LV04 = 0x21A,
     ABILITY_ENC_MP_COMBO_BUFF_ATK_LV05 = 0x21B,
     ABILITY_ENC_MP_COMBO_BUFF_DEF_LV01 = 0x21C,
     ABILITY_ENC_MP_COMBO_BUFF_DEF_LV02 = 0x21D,
     ABILITY_ENC_MP_COMBO_BUFF_DEF_LV03 = 0x21E,
     ABILITY_ENC_MP_COMBO_BUFF_DEF_LV04 = 0x21F,
     ABILITY_ENC_MP_COMBO_BUFF_DEF_LV05 = 0x220,
     ABILITY_ENC_MP_REACTION_DMG_LV01 = 0x221,
     ABILITY_ENC_MP_REACTION_DMG_LV02 = 0x222,
     ABILITY_ENC_MP_REACTION_DMG_LV03 = 0x223,
     ABILITY_ENC_MP_ENEMY_HPFULL_BONUS_LV01 = 0x224,
     ABILITY_ENC_MP_ENEMY_HPFULL_BONUS_LV02 = 0x225,
     ABILITY_ENC_MP_ENEMY_HPFULL_BONUS_LV03 = 0x226,
     ABILITY_ENC_MP_ENEMY_HPLOW_BONUS_LV01 = 0x227,
     ABILITY_ENC_MP_ENEMY_HPLOW_BONUS_LV02 = 0x228,
     ABILITY_ENC_MP_ENEMY_HPLOW_BONUS_LV03 = 0x229,
     ABILITY_ENC_MP_DOWN_BONUS_LV01   = 0x22A,
     ABILITY_ENC_MP_DOWN_BONUS_LV02   = 0x22B,
     ABILITY_ENC_MP_DOWN_BONUS_LV03   = 0x22C,
     ABILITY_ENC_MP_CLOUD_BONUS_LV01  = 0x22D,
     ABILITY_ENC_MP_CLOUD_BONUS_LV02  = 0x22E,
     ABILITY_ENC_MP_CLOUD_BONUS_LV03  = 0x22F,
     ABILITY_ENC_MP_SINGLE_BONUS_LV01 = 0x230,
     ABILITY_ENC_MP_SINGLE_BONUS_LV02 = 0x231,
     ABILITY_ENC_MP_SINGLE_BONUS_LV03 = 0x232,
     ABILITY_ENC_MP_PARTY_BONUS_LV01  = 0x233,
     ABILITY_ENC_MP_PARTY_BONUS_LV02  = 0x234,
     ABILITY_ENC_MP_PARTY_BONUS_LV03  = 0x235,
     ABILITY_ENC_MP_SOLO_BONUS_LV01   = 0x236,
     ABILITY_ENC_MP_SOLO_BONUS_LV02   = 0x237,
     ABILITY_ENC_MP_SOLO_BONUS_LV03   = 0x238,
     ABILITY_ENC_MP_PC_HPFULL_BONUS_LV01 = 0x239,
     ABILITY_ENC_MP_PC_HPFULL_BONUS_LV02 = 0x23A,
     ABILITY_ENC_MP_PC_HPFULL_BONUS_LV03 = 0x23B,
     ABILITY_ENC_MP_HPLOW_ATTACK_UP_LV01 = 0x23C,
     ABILITY_ENC_MP_HPLOW_ATTACK_UP_LV02 = 0x23D,
     ABILITY_ENC_MP_HPLOW_ATTACK_UP_LV03 = 0x23E,
     ABILITY_ENC_MP_HPLOW_ATTACK_UP_PARTY_LV01 = 0x23F,
     ABILITY_ENC_MP_HPLOW_ATTACK_UP_PARTY_LV02 = 0x240,
     ABILITY_ENC_MP_HPLOW_ATTACK_UP_PARTY_LV03 = 0x241,
     ABILITY_ENC_MP_HPLOW_CRITICAL_UP_LV01 = 0x242,
     ABILITY_ENC_MP_HPLOW_CRITICAL_UP_LV02 = 0x243,
     ABILITY_ENC_MP_HPLOW_CRITICAL_UP_LV03 = 0x244,
     ABILITY_ENC_MP_BREAK_BONUS_LV01  = 0x245,
     ABILITY_ENC_MP_BREAK_BONUS_LV02  = 0x246,
     ABILITY_ENC_MP_BREAK_BONUS_LV03  = 0x247,
     ABILITY_ENC_MP_BREAK_BONUS_LV04  = 0x248,
     ABILITY_ENC_MP_BREAK_BONUS_LV05  = 0x249,
     ABILITY_ENC_MP_SLASH_BONUS_LV01  = 0x24A,
     ABILITY_ENC_MP_SLASH_BONUS_LV02  = 0x24B,
     ABILITY_ENC_MP_SLASH_BONUS_LV03  = 0x24C,
     ABILITY_ENC_MP_SLASH_BONUS_LV04  = 0x24D,
     ABILITY_ENC_MP_SLASH_BONUS_LV05  = 0x24E,
     ABILITY_ENC_MP_COUNTER_BONUS_LV01 = 0x24F,
     ABILITY_ENC_MP_COUNTER_BONUS_LV02 = 0x250,
     ABILITY_ENC_MP_COUNTER_BONUS_LV03 = 0x251,
     ABILITY_ENC_MP_COUNTER_BONUS_LV04 = 0x252,
     ABILITY_ENC_MP_COUNTER_BONUS_LV05 = 0x253,
     ABILITY_ENC_MP_FINISH_BONUS_LV01 = 0x254,
     ABILITY_ENC_MP_FINISH_BONUS_LV02 = 0x255,
     ABILITY_ENC_MP_FINISH_BONUS_LV03 = 0x256,
     ABILITY_ENC_MP_FINISH_BONUS_LV04 = 0x257,
     ABILITY_ENC_MP_FINISH_BONUS_LV05 = 0x258,
     ABILITY_ENC_MP_PARRY_BONUS_LV01  = 0x259,
     ABILITY_ENC_MP_PARRY_BONUS_LV02  = 0x25A,
     ABILITY_ENC_MP_PARRY_BONUS_LV03  = 0x25B,
     ABILITY_ENC_MP_PARRY_BONUS_LV04  = 0x25C,
     ABILITY_ENC_MP_PARRY_BONUS_LV05  = 0x25D,
     ABILITY_ENC_MP_JUMP_ATTACK_UP_LV01 = 0x25E,
     ABILITY_ENC_MP_JUMP_ATTACK_UP_LV02 = 0x25F,
     ABILITY_ENC_MP_JUMP_ATTACK_UP_LV03 = 0x260,
     ABILITY_ENC_MP_JUMP_ATTACK_UP_LV04 = 0x261,
     ABILITY_ENC_MP_JUMP_ATTACK_UP_LV05 = 0x262,
     ABILITY_ENC_MP_SHIFT_ATTACK_UP_LV01 = 0x263,
     ABILITY_ENC_MP_SHIFT_ATTACK_UP_LV02 = 0x264,
     ABILITY_ENC_MP_SHIFT_ATTACK_UP_LV03 = 0x265,
     ABILITY_ENC_MP_PARTS_DAMAGE_UP_LV01 = 0x266,
     ABILITY_ENC_MP_PARTS_DAMAGE_UP_LV02 = 0x267,
     ABILITY_ENC_MP_PARTS_DAMAGE_UP_LV03 = 0x268,
     ABILITY_ENC_MP_STR_MINUS_MAG_PLUS_LV01 = 0x269,
     ABILITY_ENC_MP_STR_MINUS_MAG_PLUS_LV02 = 0x26A,
     ABILITY_ENC_MP_STR_MINUS_MAG_PLUS_LV03 = 0x26B,
     ABILITY_ENC_MP_STR_MINUS_MAG_PLUS_LV04 = 0x26C,
     ABILITY_ENC_MP_STR_MINUS_MAG_PLUS_LV05 = 0x26D,
     ABILITY_ENC_MP_MAG_MINUS_STR_PLUS_LV01 = 0x26E,
     ABILITY_ENC_MP_MAG_MINUS_STR_PLUS_LV02 = 0x26F,
     ABILITY_ENC_MP_MAG_MINUS_STR_PLUS_LV03 = 0x270,
     ABILITY_ENC_MP_MAG_MINUS_STR_PLUS_LV04 = 0x271,
     ABILITY_ENC_MP_MAG_MINUS_STR_PLUS_LV05 = 0x272,
     ABILITY_ENC_MP_DEF_MINUS_ATK_PLUS_LV01 = 0x273,
     ABILITY_ENC_MP_DEF_MINUS_ATK_PLUS_LV02 = 0x274,
     ABILITY_ENC_MP_DEF_MINUS_ATK_PLUS_LV03 = 0x275,
     ABILITY_ENC_MP_DEF_MINUS_ATK_PLUS_LV04 = 0x276,
     ABILITY_ENC_MP_DEF_MINUS_ATK_PLUS_LV05 = 0x277,
     ABILITY_ENC_MP_ATK_MINUS_DEF_PLUS_LV01 = 0x278,
     ABILITY_ENC_MP_ATK_MINUS_DEF_PLUS_LV02 = 0x279,
     ABILITY_ENC_MP_ATK_MINUS_DEF_PLUS_LV03 = 0x27A,
     ABILITY_ENC_MP_ATK_MINUS_DEF_PLUS_LV04 = 0x27B,
     ABILITY_ENC_MP_ATK_MINUS_DEF_PLUS_LV05 = 0x27C,
     ABILITY_ENC_MP_RECOVER_HP_DOWN_MP_UP_LV01 = 0x27D,
     ABILITY_ENC_MP_RECOVER_HP_DOWN_MP_UP_LV02 = 0x27E,
     ABILITY_ENC_MP_RECOVER_HP_DOWN_MP_UP_LV03 = 0x27F,
     ABILITY_ENC_MP_SHIFT_MP_REDUCE_LV01 = 0x280,
     ABILITY_ENC_MP_SHIFT_MP_REDUCE_LV02 = 0x281,
     ABILITY_ENC_MP_SHIFT_MP_REDUCE_LV03 = 0x282,
     ABILITY_ENC_MP_MP_ATTACK_LV01    = 0x283,
     ABILITY_ENC_MP_MP_ATTACK_LV02    = 0x284,
     ABILITY_ENC_MP_MP_ATTACK_LV03    = 0x285,
     ABILITY_ENC_MP_AUTO_AVOID_MP_REDUCE_LV01 = 0x286,
     ABILITY_ENC_MP_AUTO_AVOID_MP_REDUCE_LV02 = 0x287,
     ABILITY_ENC_MP_AUTO_AVOID_MP_REDUCE_LV03 = 0x288,
     ABILITY_ENC_MP_CRITICAL_UP_LV01  = 0x289,
     ABILITY_ENC_MP_CRITICAL_UP_LV02  = 0x28A,
     ABILITY_ENC_MP_CRITICAL_UP_LV03  = 0x28B,
     ABILITY_ENC_MP_CRITICAL_UP_LV04  = 0x28C,
     ABILITY_ENC_MP_CRITICAL_UP_LV05  = 0x28D,
     ABILITY_ENC_MP_JUMP_MP_REDUCE_LV01 = 0x28E,
     ABILITY_ENC_MP_JUMP_MP_REDUCE_LV02 = 0x28F,
     ABILITY_ENC_MP_JUMP_MP_REDUCE_LV03 = 0x290,
     ABILITY_ENC_MP_DAMAGE_INVALID_LV01 = 0x291,
     ABILITY_ENC_MP_DAMAGE_INVALID_LV02 = 0x292,
     ABILITY_ENC_MP_DAMAGE_INVALID_LV03 = 0x293,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_POISON_LV01 = 0x294,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_POISON_LV02 = 0x295,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_POISON_LV03 = 0x296,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_POISON_LV01 = 0x297,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_POISON_LV02 = 0x298,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_POISON_LV03 = 0x299,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_ATK_LV01 = 0x29A,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_ATK_LV02 = 0x29B,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_ATK_LV03 = 0x29C,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_ATK_LV01 = 0x29D,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_ATK_LV02 = 0x29E,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_ATK_LV03 = 0x29F,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_DEF_LV01 = 0x2A0,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_DEF_LV02 = 0x2A1,
     ABILITY_ENC_MP_ATK_DEBUFF_LONG_DEF_LV03 = 0x2A2,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_DEF_LV01 = 0x2A3,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_DEF_LV02 = 0x2A4,
     ABILITY_ENC_MP_ATK_DEBUFF_SHORT_DEF_LV03 = 0x2A5,
     ABILITY_ENC_MP_ATK_DEBUFF_BURN_LV01 = 0x2A6,
     ABILITY_ENC_MP_ATK_DEBUFF_BURN_LV02 = 0x2A7,
     ABILITY_ENC_MP_ATK_DEBUFF_BURN_LV03 = 0x2A8,
     ABILITY_ENC_MP_ATK_DEBUFF_FREEZE_LV01 = 0x2A9,
     ABILITY_ENC_MP_ATK_DEBUFF_FREEZE_LV02 = 0x2AA,
     ABILITY_ENC_MP_ATK_DEBUFF_FREEZE_LV03 = 0x2AB,
     ABILITY_ENC_MP_ATK_DEBUFF_SHOCK_LV01 = 0x2AC,
     ABILITY_ENC_MP_ATK_DEBUFF_SHOCK_LV02 = 0x2AD,
     ABILITY_ENC_MP_ATK_DEBUFF_SHOCK_LV03 = 0x2AE,
     ABILITY_ENC_MP_ATK_DEBUFF_STOP_LV01 = 0x2AF,
     ABILITY_ENC_MP_ATK_DEBUFF_STOP_LV02 = 0x2B0,
     ABILITY_ENC_MP_ATK_DEBUFF_STOP_LV03 = 0x2B1,
     ABILITY_ENC_MP_ATK_DEBUFF_DEATH_LV01 = 0x2B2,
     ABILITY_ENC_MP_ATK_DEBUFF_DEATH_LV02 = 0x2B3,
     ABILITY_ENC_MP_ATK_DEBUFF_DEATH_LV03 = 0x2B4,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_POISON_LV01 = 0x2B5,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_POISON_LV02 = 0x2B6,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_POISON_LV03 = 0x2B7,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_POISON_LV01 = 0x2B8,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_POISON_LV02 = 0x2B9,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_POISON_LV03 = 0x2BA,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_FINISH_LV01 = 0x2BB,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_FINISH_LV02 = 0x2BC,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_FINISH_LV03 = 0x2BD,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_FINISH_LV01 = 0x2BE,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_FINISH_LV02 = 0x2BF,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_FINISH_LV03 = 0x2C0,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_DEF_LV01 = 0x2C1,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_DEF_LV02 = 0x2C2,
     ABILITY_ENC_MP_FINISH_DEBUFF_LONG_DEF_LV03 = 0x2C3,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_DEF_LV01 = 0x2C4,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_DEF_LV02 = 0x2C5,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHORT_DEF_LV03 = 0x2C6,
     ABILITY_ENC_MP_FINISH_DEBUFF_BURN_LV01 = 0x2C7,
     ABILITY_ENC_MP_FINISH_DEBUFF_BURN_LV02 = 0x2C8,
     ABILITY_ENC_MP_FINISH_DEBUFF_BURN_LV03 = 0x2C9,
     ABILITY_ENC_MP_FINISH_DEBUFF_FREEZE_LV01 = 0x2CA,
     ABILITY_ENC_MP_FINISH_DEBUFF_FREEZE_LV02 = 0x2CB,
     ABILITY_ENC_MP_FINISH_DEBUFF_FREEZE_LV03 = 0x2CC,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHOCK_LV01 = 0x2CD,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHOCK_LV02 = 0x2CE,
     ABILITY_ENC_MP_FINISH_DEBUFF_SHOCK_LV03 = 0x2CF,
     ABILITY_ENC_MP_FINISH_DEBUFF_STOP_LV01 = 0x2D0,
     ABILITY_ENC_MP_FINISH_DEBUFF_STOP_LV02 = 0x2D1,
     ABILITY_ENC_MP_FINISH_DEBUFF_STOP_LV03 = 0x2D2,
     ABILITY_ENC_MP_FINISH_DEBUFF_DEATH_LV01 = 0x2D3,
     ABILITY_ENC_MP_FINISH_DEBUFF_DEATH_LV02 = 0x2D4,
     ABILITY_ENC_MP_FINISH_DEBUFF_DEATH_LV03 = 0x2D5,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_POISON_LV01 = 0x2D6,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_POISON_LV02 = 0x2D7,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_POISON_LV03 = 0x2D8,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_POISON_LV01 = 0x2D9,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_POISON_LV02 = 0x2DA,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_POISON_LV03 = 0x2DB,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_SLASH_LV01 = 0x2DC,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_SLASH_LV02 = 0x2DD,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_SLASH_LV03 = 0x2DE,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_SLASH_LV01 = 0x2DF,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_SLASH_LV02 = 0x2E0,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_SLASH_LV03 = 0x2E1,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_DEF_LV01 = 0x2E2,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_DEF_LV02 = 0x2E3,
     ABILITY_ENC_MP_SLASH_DEBUFF_LONG_DEF_LV03 = 0x2E4,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_DEF_LV01 = 0x2E5,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_DEF_LV02 = 0x2E6,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHORT_DEF_LV03 = 0x2E7,
     ABILITY_ENC_MP_SLASH_DEBUFF_BURN_LV01 = 0x2E8,
     ABILITY_ENC_MP_SLASH_DEBUFF_BURN_LV02 = 0x2E9,
     ABILITY_ENC_MP_SLASH_DEBUFF_BURN_LV03 = 0x2EA,
     ABILITY_ENC_MP_SLASH_DEBUFF_FREEZE_LV01 = 0x2EB,
     ABILITY_ENC_MP_SLASH_DEBUFF_FREEZE_LV02 = 0x2EC,
     ABILITY_ENC_MP_SLASH_DEBUFF_FREEZE_LV03 = 0x2ED,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHOCK_LV01 = 0x2EE,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHOCK_LV02 = 0x2EF,
     ABILITY_ENC_MP_SLASH_DEBUFF_SHOCK_LV03 = 0x2F0,
     ABILITY_ENC_MP_SLASH_DEBUFF_STOP_LV01 = 0x2F1,
     ABILITY_ENC_MP_SLASH_DEBUFF_STOP_LV02 = 0x2F2,
     ABILITY_ENC_MP_SLASH_DEBUFF_STOP_LV03 = 0x2F3,
     ABILITY_ENC_MP_SLASH_DEBUFF_DEATH_LV01 = 0x2F4,
     ABILITY_ENC_MP_SLASH_DEBUFF_DEATH_LV02 = 0x2F5,
     ABILITY_ENC_MP_SLASH_DEBUFF_DEATH_LV03 = 0x2F6,
     ABILITY_ENC_MP_RESIST_POISON     = 0x2F7,
     ABILITY_ENC_MP_RESIST_CONFUSE    = 0x2F8,
     ABILITY_ENC_MP_RESIST_TOAD       = 0x2F9,
     ABILITY_ENC_MP_RESIST_STONE      = 0x2FA,
     ABILITY_ENC_MP_RESIST_STOP       = 0x2FB,
     ABILITY_ENC_MP_RESIST_DEATH      = 0x2FC,
     ABILITY_ENC_MP_RESIST_STRENGTH   = 0x2FD,
     ABILITY_ENC_MP_RESIST_VITALITY   = 0x2FE,
     ABILITY_ENC_MP_RESIST_MAGIC      = 0x2FF,
     ABILITY_ENC_MP_RESIST_SPIRIT     = 0x300,
     ABILITY_ENC_MP_RESIST_ALL        = 0x301,
     ABILITY_ENC_MP_INVALID_POISON    = 0x302,
     ABILITY_ENC_MP_INVALID_CONFUSE   = 0x303,
     ABILITY_ENC_MP_INVALID_TOAD      = 0x304,
     ABILITY_ENC_MP_INVALID_STONE     = 0x305,
     ABILITY_ENC_MP_INVALID_STOP      = 0x306,
     ABILITY_ENC_MP_INVALID_DEATH     = 0x307,
     ABILITY_ENC_MP_INVALID_STRENGTH  = 0x308,
     ABILITY_ENC_MP_INVALID_VITALITY  = 0x309,
     ABILITY_ENC_MP_INVALID_MAGIC     = 0x30A,
     ABILITY_ENC_MP_INVALID_SPIRIT    = 0x30B,
     ABILITY_ENC_MP_INVALID_ALL       = 0x30C,
     ABILITY_ENC_MP_ATK_DEBUFF_ATTACH_LV01 = 0x30D,
     ABILITY_ENC_MP_ATK_DEBUFF_ATTACH_LV02 = 0x30E,
     ABILITY_ENC_MP_ATK_DEBUFF_ATTACH_LV03 = 0x30F,
     ABILITY_ENC_MP_SHIFTBREAK_DEBUFF_ATTACH_LV01 = 0x310,
     ABILITY_ENC_MP_SHIFTBREAK_DEBUFF_ATTACH_LV02 = 0x311,
     ABILITY_ENC_MP_SHIFTBREAK_DEBUFF_ATTACH_LV03 = 0x312,
     ABILITY_ENC_MP_COMBO_COUNT_UP_LV01 = 0x313,
     ABILITY_ENC_MP_COMBO_COUNT_UP_LV02 = 0x314,
     ABILITY_ENC_MP_COMBO_COUNT_UP_LV03 = 0x315,
     ABILITY_ENC_MP_DRAIN_LV01        = 0x316,
     ABILITY_ENC_MP_DRAIN_LV02        = 0x317,
     ABILITY_ENC_MP_DRAIN_LV03        = 0x318,
     ABILITY_ENC_MP_DRAIN_LV04        = 0x319,
     ABILITY_ENC_MP_DRAIN_LV05        = 0x31A,
     ABILITY_ENC_MP_ASPIR_LV01        = 0x31B,
     ABILITY_ENC_MP_ASPIR_LV02        = 0x31C,
     ABILITY_ENC_MP_ASPIR_LV03        = 0x31D,
     ABILITY_ENC_MP_ASPIR_LV04        = 0x31E,
     ABILITY_ENC_MP_ASPIR_LV05        = 0x31F,
     ABILITY_ENC_MP_FINISH_BUFF_ATK_LV01 = 0x320,
     ABILITY_ENC_MP_FINISH_BUFF_ATK_LV02 = 0x321,
     ABILITY_ENC_MP_FINISH_BUFF_ATK_LV03 = 0x322,
     ABILITY_ENC_MP_FINISH_BUFF_ATK_LV04 = 0x323,
     ABILITY_ENC_MP_FINISH_BUFF_ATK_LV05 = 0x324,
     ABILITY_ENC_MP_FINISH_BUFF_DEF_LV01 = 0x325,
     ABILITY_ENC_MP_FINISH_BUFF_DEF_LV02 = 0x326,
     ABILITY_ENC_MP_FINISH_BUFF_DEF_LV03 = 0x327,
     ABILITY_ENC_MP_FINISH_BUFF_DEF_LV04 = 0x328,
     ABILITY_ENC_MP_FINISH_BUFF_DEF_LV05 = 0x329,
     ABILITY_ENC_MP_EXP_BONUS_LV01    = 0x32A,
     ABILITY_ENC_MP_EXP_BONUS_LV02    = 0x32B,
     ABILITY_ENC_MP_EXP_BONUS_LV03    = 0x32C,
     ABILITY_ENC_MP_EXP_BONUS_LV04    = 0x32D,
     ABILITY_ENC_MP_EXP_BONUS_LV05    = 0x32E,
     ABILITY_ENC_MP_SWITCH_BUFF_ATK_LV01 = 0x32F,
     ABILITY_ENC_MP_SWITCH_BUFF_ATK_LV02 = 0x330,
     ABILITY_ENC_MP_SWITCH_BUFF_ATK_LV03 = 0x331,
     ABILITY_ENC_MP_SWITCH_BUFF_ATK_LV04 = 0x332,
     ABILITY_ENC_MP_SWITCH_BUFF_ATK_LV05 = 0x333,
     ABILITY_ENC_MP_SWITCH_BUFF_DEF_LV01 = 0x334,
     ABILITY_ENC_MP_SWITCH_BUFF_DEF_LV02 = 0x335,
     ABILITY_ENC_MP_SWITCH_BUFF_DEF_LV03 = 0x336,
     ABILITY_ENC_MP_SWITCH_BUFF_DEF_LV04 = 0x337,
     ABILITY_ENC_MP_SWITCH_BUFF_DEF_LV05 = 0x338,
     ABILITY_ENC_MP_ITEM_DROP_UP_LV01 = 0x339,
     ABILITY_ENC_MP_ITEM_DROP_UP_LV02 = 0x33A,
     ABILITY_ENC_MP_ITEM_DROP_UP_LV03 = 0x33B,
     ABILITY_ENC_MP_ITEM_DROP_UP_LV04 = 0x33C,
     ABILITY_ENC_MP_ITEM_DROP_UP_LV05 = 0x33D,
     ABILITY_ENC_MP_ACT_JUST_GUARD    = 0x33E,
     ABILITY_ENC_MP_ACT_DAMAGE_SHIFT  = 0x33F,
     ABILITY_ENC_MP_ACT_BONE_MEAT     = 0x340,
     ABILITY_ENC_MP_ACT_REVENGE       = 0x341,
     ABILITY_ENC_MP_ACT_JUMP          = 0x342,
     ABILITY_ENC_MP_ACT_PROVOCATION   = 0x343,
     ABILITY_ENC_MP_ACT_SONIC_BOOM    = 0x344,
     ABILITY_ENC_MP_ACT_ASPIR         = 0x345,
     ABILITY_ENC_MP_ACT_AURA          = 0x346,
     ABILITY_ENC_MP_ACT_KARMA         = 0x347,
     ABILITY_ENC_MP_ACT_ESUNA         = 0x348,
     ABILITY_ENC_MP_ACT_WALL          = 0x349,
     ABILITY_ENC_MP_ACT_DIA           = 0x34A,
     ABILITY_ENC_MP_ACT_SUPPORT       = 0x34B,
     ABILITY_ENC_MP_ACT_FIGHT         = 0x34C,
     ABILITY_ENC_MP_ACT_PINCH_GUARD   = 0x34D,
     ABILITY_ENC_MP_ACT_IMITATION     = 0x34E,
     ABILITY_ENC_MP_SPECIAL_COMBO     = 0x34F,
     ABILITY_ENC_MP_CHARGE_UP_LV01    = 0x350,
     ABILITY_ENC_MP_DEFENSE_PENETRATE_LV01 = 0x351,
     ABILITY_ENC_MP_DEFENSE_PENETRATE_LV02 = 0x352,
     ABILITY_ENC_MP_DEFENSE_PENETRATE_LV03 = 0x353,
     ABILITY_ENC_MP_PROTECT_DIRTY     = 0x354,
     ABILITY_ENC_MP_ACT_CURSE_001     = 0x355,
     ABILITY_ENC_MP_ACT_CURSE_002     = 0x356,
     ABILITY_ENC_MP_ACT_AREA_ELEMENT_UP = 0x357,
     ABILITY_ENC_MP_ACT_SLASH_ASPIR   = 0x358,
     ABILITY_ENC_MP_ACT_JUMP_ATTACK_UP = 0x359,
     ABILITY_WE31_SPECIAL01_000       = 0x35A,
     ABILITY_WE31_SPECIAL02_000       = 0x35B,
     ABILITY_WE31_SPECIAL03_000       = 0x35C,
     ABILITY_WE28_SPECIAL01_000       = 0x35D,
     ABILITY_WE28_SPECIAL02_000       = 0x35E,
     ABILITY_WE03_SPECIAL01_000       = 0x35F,
     ABILITY_WE04_SPECIAL01_000       = 0x360,
     ABILITY_WE04_SPECIAL02_000       = 0x361,
     ABILITY_WE22_SPECIAL01_000       = 0x362,
     ABILITY_WE25_SPECIAL01_000       = 0x363,
     ABILITY_ENC_MP_DAGGER_COMBO_UP   = 0x364,
     ABILITY_JOB_COMMAND_CCHANGE_G    = 0x365,
     ABILITY_JOB_COMMAND_CCHANGE_P    = 0x366,
     ABILITY_JOB_COMMAND_CCHANGE_I    = 0x367,
     ABILITY_ENC_MP_ATK_DEBUFF_STOP_PICO = 0x368,
     ABILITY_ENC_ARMEDFORM_AWAKENING  = 0x369,
     ABILITY_ENC_DMG_LIMITBREAK       = 0x36A,
     ABILITY_ENC_HP_RATIO_DOWN        = 0x36B,
     ABILITY_ENC_MACHINE_FLAMETHROWER = 0x36C,
     ABILITY_ENC_GLA_BRAKE_GAUGEUP    = 0x36D,
     ABILITY_ENC_IGN_SEARCHEYE_GAUGEUP = 0x36E,
     ABILITY_ENC_THREE_ELEMENT        = 0x36F,
     ABILITY_WE31_SPECIAL04_000       = 0x370,
     ABILITY_WE28_SPECIAL02_001       = 0x371,
     ABILITY_ENC_MP_PINCH_BARRIER_UP  = 0x372,
     ABILITY_ENC_MP_ACT_MAGICSWORD_FIRE = 0x373,
     ABILITY_ENC_MP_ACT_MAGICSWORD_ICE = 0x374,
     ABILITY_ENC_MP_ACT_MAGICSWORD_THUN = 0x375,
     ABILITY_ENC_MP_ACT_COMPOUND      = 0x376,
     ABILITY_ENC_MP_ACT_BIO           = 0x377,
     ABILITY_ENC_MP_ACT_GRAVITY       = 0x378,
     ABILITY_ENC_MP_ACT_COMET         = 0x379,
     ABILITY_ENC_MP_ACT_REVIVE        = 0x37A,
     ABILITY_ENC_MP_ACT_BIND          = 0x37B,
     ABILITY_ENC_MP_ACT_LEARNING      = 0x37C,
     ABILITY_MP_STORY_NOCTIS          = 0x37D,
     ABILITY_MP_STORY_GLADIOLUS       = 0x37E,
     ABILITY_MP_STORY_PROMPTO         = 0x37F,
     ABILITY_MP_STORY_IGNIS           = 0x380,
     ABILITY_AMOUNT                   = 0x400,
 };
  enum ABILITY_EFFECT
 {
     ABILITY_EFFECT_NONE              = 0x0,
     ABILITY_EFFECT_HIT_DAMAGE_UP     = 0x1,
     ABILITY_EFFECT_HIT_DAMAGE_DOWN   = 0x2,
     ABILITY_EFFECT_HIT_DAMAGE_ADD_STATUS = 0x3,
     ABILITY_EFFECT_HIT_CRITICAL_UP   = 0x4,
     ABILITY_EFFECT_HIT_EXP_UP        = 0x5,
     ABILITY_EFFECT_HIT_PHANTOM_ABILITY_CONSUME = 0x6,
     ABILITY_EFFECT_CRUSH_UP          = 0x7,
     ABILITY_EFFECT_ITEM_UP           = 0x8,
     ABILITY_EFFECT_HP_MAX_UP         = 0x9,
     ABILITY_EFFECT_HP_RECOVER_UP     = 0xA,
     ABILITY_EFFECT_MP_MAX_UP         = 0xB,
     ABILITY_EFFECT_MP_RECOVER_UP     = 0xC,
     ABILITY_EFFECT_STRENGTH_UP       = 0xD,
     ABILITY_EFFECT_VITALITY_UP       = 0xE,
     ABILITY_EFFECT_MAGIC_UP          = 0xF,
     ABILITY_EFFECT_SPIRIT_UP         = 0x10,
     ABILITY_EFFECT_CRITICAL_UP       = 0x11,
     ABILITY_EFFECT_ACCESSORY_SLOT    = 0x12,
     ABILITY_EFFECT_DAMAGE_ADD_STATUS = 0x13,
     ABILITY_EFFECT_GET_STATUS        = 0x14,
     ABILITY_EFFECT_HP_MAX_LEVEL_UP   = 0x15,
     ABILITY_EFFECT_MP_MAX_LEVEL_UP   = 0x16,
     ABILITY_EFFECT_STRENGTH_LEVEL_UP = 0x17,
     ABILITY_EFFECT_VITALITY_LEVEL_UP = 0x18,
     ABILITY_EFFECT_MAGIC_LEVEL_UP    = 0x19,
     ABILITY_EFFECT_SPIRIT_LEVEL_UP   = 0x1A,
     ABILITY_EFFECT_ELEMENT_ABSORB_UP = 0x1B,
     ABILITY_EFFECT_MAGIC_POWER_UP    = 0x1C,
     ABILITY_EFFECT_MAGIC_AMOUNT_UP   = 0x1D,
     ABILITY_EFFECT_BUFF_TIME_UP      = 0x1E,
     ABILITY_EFFECT_DAMAGE_LIMIT_OVER = 0x1F,
     ABILITY_EFFECT_CAMP_AP_UP        = 0x20,
     ABILITY_EFFECT_SURVIVAL_ITEM_UP  = 0x21,
     ABILITY_EFFECT_WEAPON_CRITICAL_UP = 0x22,
     ABILITY_EFFECT_HIT_CLOUD_BONUS   = 0x23,
     ABILITY_EFFECT_HIT_SINGLE_BONUS  = 0x24,
     ABILITY_EFFECT_HIT_PC_HPFULL_BONUS = 0x25,
     ABILITY_EFFECT_HIT_HPLOW_ATTACK_UP = 0x26,
     ABILITY_EFFECT_HIT_HPLOW_CRITICAL_UP = 0x27,
     ABILITY_EFFECT_COMBO_MP_RECOVER  = 0x28,
     ABILITY_EFFECT_SHIFT_ATTACK_UP   = 0x29,
     ABILITY_EFFECT_RECOVER_HP_DOWN_MP_UP = 0x2A,
     ABILITY_EFFECT_SHIFT_MP_REDUCE   = 0x2B,
     ABILITY_EFFECT_JUMP_MP_REDUCE    = 0x2C,
     ABILITY_EFFECT_DAMAGE_INVALID    = 0x2D,
     ABILITY_EFFECT_DRAIN             = 0x2E,
     ABILITY_EFFECT_ASPIR             = 0x2F,
     ABILITY_EFFECT_HIT_ATTACK_UP_SMALL_ENEMY = 0x30,
     ABILITY_EFFECT_HIT_ATTACK_UP_LARGE_ENEMY = 0x31,
     ABILITY_EFFECT_HIT_COMBO_BONUS   = 0x32,
     ABILITY_EFFECT_HIT_COMBO_UP      = 0x33,
     ABILITY_EFFECT_EXP_BONUS         = 0x34,
     ABILITY_EFFECT_ITEM_DROP_UP      = 0x35,
     ABILITY_EFFECT_HIT_ENEMY_HPFULL_BONUS = 0x36,
     ABILITY_EFFECT_HIT_ENEMY_HPLOW_BONUS = 0x37,
     ABILITY_EFFECT_HIT_DOWN_BONUS    = 0x38,
     ABILITY_EFFECT_HIT_JUMP_ATTACK_UP = 0x39,
     ABILITY_EFFECT_ATTRIBUTE_BONUS   = 0x3A,
     ABILITY_EFFECT_STR_MINUS_MAG_PLUS = 0x3B,
     ABILITY_EFFECT_MAG_MINUS_STR_PLUS = 0x3C,
     ABILITY_EFFECT_DEF_MINUS_ATK_PLUS = 0x3D,
     ABILITY_EFFECT_ATK_MINUS_DEF_PLUS = 0x3E,
     ABILITY_EFFECT_AUTO_AVOID_MP_REDUCE = 0x3F,
     ABILITY_EFFECT_HIT_COUNTER_BONUS = 0x40,
     ABILITY_EFFECT_HIT_REACTION_DMG  = 0x41,
     ABILITY_EFFECT_HIT_PARTY_BONUS   = 0x42,
     ABILITY_EFFECT_HIT_SOLO_BONUS    = 0x43,
     ABILITY_EFFECT_HIT_BREAK_BONUS   = 0x44,
     ABILITY_EFFECT_HIT_SLASH_BONUS   = 0x45,
     ABILITY_EFFECT_HIT_FINISH_BONUS  = 0x46,
     ABILITY_EFFECT_HIT_PARRY_BONUS   = 0x47,
     ABILITY_EFFECT_HIT_MP_ATTACK     = 0x48,
     ABILITY_EFFECT_DAMAGE_UP         = 0x49,
     ABILITY_EFFECT_DEFENSE_PENETRATE = 0x4A,
     ABILITY_EFFECT_ATTACK_MAGIC      = 0x4B,
     ABILITY_EFFECT_RECOVER_MAGIC     = 0x4C,
     ABILITY_EFFECT_HIT_HEAL_ADD_STATUS = 0x4D,
     ABILITY_EFFECT_AMOUNT            = 0x100,
 };

enum STATUS_COUNT 
{
    STATUS_COUNT_NONE                = 0xFFFFFFFF,
    STATUS_COUNT_STRENGTH_UP         = 0x0,
    STATUS_COUNT_VITALITY_UP         = 0x1,
    STATUS_COUNT_MAGIC_UP            = 0x2,
    STATUS_COUNT_SPIRIT_UP           = 0x3,
    STATUS_COUNT_ATTACK_FIRE         = 0x4,
    STATUS_COUNT_ATTACK_ICE          = 0x5,
    STATUS_COUNT_ATTACK_THUNDER      = 0x6,
    STATUS_COUNT_DEFENSE_FIRE        = 0x7,
    STATUS_COUNT_DEFENSE_ICE         = 0x8,
    STATUS_COUNT_DEFENSE_THUNDER     = 0x9,
    STATUS_COUNT_AVOID               = 0xA,
    STATUS_COUNT_MP0                 = 0xB,
    STATUS_COUNT_REGEN               = 0xC,
    STATUS_COUNT_STRONG              = 0xD,
    STATUS_COUNT_THROUGH             = 0xE,
    STATUS_COUNT_PINCH               = 0xF,
    STATUS_COUNT_FIRE                = 0x10,
    STATUS_COUNT_ICE                 = 0x11,
    STATUS_COUNT_THUNDER             = 0x12,
    STATUS_COUNT_EARTH               = 0x13,
    STATUS_COUNT_WATER               = 0x14,
    STATUS_COUNT_LIGHT               = 0x15,
    STATUS_COUNT_DARK                = 0x16,
    STATUS_COUNT_POISON              = 0x17,
    STATUS_COUNT_CONFUSE             = 0x18,
    STATUS_COUNT_TOAD                = 0x19,
    STATUS_COUNT_STONE               = 0x1A,
    STATUS_COUNT_STOP                = 0x1B,
    STATUS_COUNT_WEAK                = 0x1C,
    STATUS_COUNT_WET                 = 0x1D,
    STATUS_COUNT_DEATH_SENTENCE      = 0x1E,
    STATUS_COUNT_AURA                = 0x1F,
    STATUS_COUNT_ATTACH_TARGET       = 0x20,
    STATUS_COUNT_CONCENTRATION       = 0x21,
    STATUS_COUNT_WEAK_DAEMON         = 0x22,
    STATUS_COUNT_HYPER_SHIFT_BREAK   = 0x23,
    STATUS_COUNT_MAGIC_SWORD_FIRE    = 0x24,
    STATUS_COUNT_MAGIC_SWORD_BLIZZARD = 0x25,
    STATUS_COUNT_MAGIC_SWORD_THUNDER = 0x26,
    STATUS_COUNT_CARBUNCLE_PROTECT   = 0x27,
    STATUS_COUNT_JOB_COMMAND_CRITICAL = 0x28,
    STATUS_COUNT_EXP_UP              = 0x29,
    STATUS_COUNT_CRITICAL            = 0x2A,
    STATUS_COUNT_LIBRA               = 0x2B,
    STATUS_COUNT_BERSERK             = 0x2C,
    STATUS_COUNT_ATTACK_PARTS_BREAK  = 0x2D,
    STATUS_COUNT_DEFENSE_PARTS_BREAK = 0x2E,
    STATUS_COUNT_DEADLY_POISON       = 0x2F,
    STATUS_COUNT_COMMAND_POWER_UP    = 0x30,
    STATUS_COUNT_GLADIOLUS           = 0x31,
    STATUS_COUNT_NOCTIS              = 0x32,
    STATUS_COUNT_MAGIC_RATIO_UP      = 0x33,
    STATUS_COUNT_SPIRIT_RATIO_UP     = 0x34,
    STATUS_COUNT_BURNING             = 0x35,
    STATUS_COUNT_FRIGID              = 0x36,
    STATUS_COUNT_STRENGTH_RATIO_UP   = 0x37,
    STATUS_COUNT_VITALITY_RATIO_UP   = 0x38,
    STATUS_COUNT_PHOENIX_PROTECT     = 0x39,
    STATUS_COUNT_PINCH_GUARD         = 0x3A,
    STATUS_COUNT_INVINCIBLE_SUITS    = 0x3B,
    STATUS_COUNT_GUARD_BREAK         = 0x3C,
    STATUS_COUNT_SHIFT_MARK          = 0x3D,
    STATUS_COUNT_KILL_SIGHT          = 0x3E,
    STATUS_COUNT_AMOUNT              = 0x40,
};
 enum MOVE_DISTANCE_TYPE
 {                                      
     MOVE_DISTANCE_TYPE_NONE    = 0xFFFFFFFF,
     MOVE_DISTANCE_TYPE_WALK    = 0x0,
     MOVE_DISTANCE_TYPE_VEHICLE = 0x1,
     MOVE_DISTANCE_TYPE_CHOCOBO = 0x2,
     MOVE_DISTANCE_TYPE_AMOUNT  = 0x3,
 };
 enum BUFF 
 {                                       
     BUFF_NONE                    = 0xFFFFFFFF,
     BUFF_GOOD                    = 0x0, 
     BUFF_BEST                    = 0x1, 
     BUFF_BAD                     = 0x2, 
     BUFF_WORST                   = 0x3, 
     BUFF_CRITICAL                = 0x4, 
     BUFF_ABSOLUTE_CRITICAL       = 0x5, 
     BUFF_ATTACK_SMALL            = 0x6, 
     BUFF_MAGIC_SMALL             = 0x7, 
     BUFF_SPIRIT_SMALL            = 0x8, 
     BUFF_DEFENSE_FIRE            = 0x9, 
     BUFF_DEFENSE_ICE             = 0xA, 
     BUFF_DEFENSE_THUNDER         = 0xB, 
     BUFF_LINK_BOOST              = 0xC, 
     BUFF_COMMAND_BOOST           = 0xD, 
     BUFF_DEFIANT                 = 0xE, 
     BUFF_WEAK_ATTACK             = 0xF, 
     BUFF_VICTORY                 = 0x10,
     BUFF_MAX_HP_UP               = 0x11,
     BUFF_DEFENSE_SMALL           = 0x12,
     BUFF_REGEN_SMALL             = 0x13,
     BUFF_TOLERANCE               = 0x14,
     BUFF_IMMUNITY                = 0x15,
     BUFF_PERSEVERANCE            = 0x16,
     BUFF_NO_POISON               = 0x17,
     BUFF_NO_TOAD                 = 0x18,
     BUFF_INDOMITABLE             = 0x19,
     BUFF_DESPERATE               = 0x1A,
     BUFF_DISCOVERY               = 0x1B,
     BUFF_STAMINA                 = 0x1C,
     BUFF_INFINITY_STAMINA        = 0x1D,
     BUFF_EXP                     = 0x1E,
     BUFF_ENERGY                  = 0x1F,
     BUFF_SUMMON_RECAST           = 0x20,
     BUFF_LIGHTNING_SPEED         = 0x21,
     BUFF_PINCH_ATTACK            = 0x22,
     BUFF_REVENGE                 = 0x23,
     BUFF_NO_INSTANT_DEATH        = 0x24,
     BUFF_INVALID_ELEMENT         = 0x25,
     BUFF_MASTER_MAGIC            = 0x26,
     BUFF_BATTLE_DAEMON           = 0x27,
     BUFF_BACK_WALL               = 0x28,
     BUFF_CLEAR                   = 0x29,
     BUFF_CHOCOBO_SPEED_UP        = 0x2A,
     BUFF_CHOCOBO_JUMP_UP         = 0x2B,
     BUFF_CHOCOBO_STAMINA_UP      = 0x2C,
     BUFF_DEFENSE                 = 0x2D,
     BUFF_DAMAGE_UP               = 0x2E,
     BUFF_REGEN                   = 0x2F,
     BUFF_ATTACK                  = 0x30,
     BUFF_CRUSH_BOOST             = 0x31,
     BUFF_PHANTOM_BOOST           = 0x32,
     BUFF_REST                    = 0x33,
     BUFF_CHOCOBO_COST            = 0x34,
     BUFF_FISHING_LINE            = 0x35,
     BUFF_CRAFT_WEAPON_ABILITY_UP = 0x36,
     BUFF_CRAFT_WEAPON_EFFECT_UP  = 0x37,
     BUFF_SHOP_DISCOUNT           = 0x38,
     BUFF_AMOUNT                  = 0x39,
 };
 
enum STATUS_ELEMENT 
{
    STATUS_ELEMENT_NONE            = 0xFFFFFFFF,
    STATUS_ELEMENT_PHYSICS         = 0x0,
    STATUS_ELEMENT_MAGIC           = 0x1,
    STATUS_ELEMENT_SLASH           = 0x2,
    STATUS_ELEMENT_STRUCK          = 0x3,
    STATUS_ELEMENT_STAB            = 0x4,
    STATUS_ELEMENT_BULLET          = 0x5,
    STATUS_ELEMENT_DAGGER          = 0x6,
    STATUS_ELEMENT_SHIELD          = 0x7,
    STATUS_ELEMENT_MACHINE         = 0x8,
    STATUS_ELEMENT_FIRE            = 0x9,
    STATUS_ELEMENT_ICE             = 0xA,
    STATUS_ELEMENT_THUNDER         = 0xB,
    STATUS_ELEMENT_EARTH           = 0xC,
    STATUS_ELEMENT_WATER           = 0xD,
    STATUS_ELEMENT_LIGHT           = 0xE,
    STATUS_ELEMENT_DARK            = 0xF,
    STATUS_ELEMENT_PHANTOM_SWORD   = 0x10,
    STATUS_ELEMENT_AMOUNT          = 0x11,
    STATUS_ELEMENT_FIRE_ICE        = 0x12,
    STATUS_ELEMENT_FIRE_THUNDER    = 0x13,
    STATUS_ELEMENT_ICE_FIRE        = 0x14,
    STATUS_ELEMENT_ICE_THUNDER     = 0x15,
    STATUS_ELEMENT_THUNDER_FIRE    = 0x16,
    STATUS_ELEMENT_THUNDER_ICE     = 0x17,
    STATUS_ELEMENT_MISCELLANEOUS   = 0x18,
};
 enum JOB_TYPE
 {                                       
     JOB_NONE        = 0xFFFFFFFF,
     JOB_BUSTER      = 0x0,
     JOB_MEDIC       = 0x1,
     JOB_CHANCEMAKER = 0x2,
     JOB_MAGICIAN    = 0x3,
     JOB_BUDDY       = 0x4,
     JOB_CAPTAIN     = 0x5,
     JOB_NUM         = 0x6,
 };

 enum WEAPON_TYPE 
 {                                       
     WEAPON_TYPE_NONE                = 0xFFFFFFFF,
     WEAPON_TYPE_SWORD               = 0x0, 
     WEAPON_TYPE_LARGE_SWORD         = 0x1, 
     WEAPON_TYPE_SPEAR               = 0x2,                                                                                  
     WEAPON_TYPE_DAGGER              = 0x3,
     WEAPON_TYPE_GUN                 = 0x4, 
     WEAPON_TYPE_SHIELD              = 0x5,                                        
     WEAPON_TYPE_MACHINE             = 0x6, 
     WEAPON_TYPE_RIFLE               = 0x7,
     WEAPON_TYPE_SUBMACHINE_GUN      = 0x8,
     WEAPON_TYPE_GRENADE             = 0x9,
     WEAPON_TYPE_ROCKET_LAUNCHER     = 0xA,
     WEAPON_TYPE_MAGIC               = 0xC,
     WEAPON_TYPE_RING_MAGIC          = 0xD,
     WEAPON_TYPE_ITEM                = 0xE,
     WEAPON_TYPE_CAMERA              = 0xF,
     WEAPON_TYPE_PHANTOM_SWORD       = 0x14,
     WEAPON_TYPE_PHANTOM_AXE         = 0x15,
     WEAPON_TYPE_PHANTOM_BOW         = 0x16,
     WEAPON_TYPE_PHANTOM_DUAL        = 0x17,
     WEAPON_TYPE_PHANTOM_LONG        = 0x18,
     WEAPON_TYPE_PHANTOM_SHURIKEN    = 0x19,
     WEAPON_TYPE_PHANTOM_LARGE       = 0x1A,
     WEAPON_TYPE_PHANTOM_SHIELD      = 0x1B,
     WEAPON_TYPE_PHANTOM_MACE        = 0x1C,
     WEAPON_TYPE_PHANTOM_WAND        = 0x1D,
     WEAPON_TYPE_PHANTOM_SPEAR       = 0x1E,
     WEAPON_TYPE_PHANTOM_KATANA      = 0x1F,
     WEAPON_TYPE_PHANTOM_REGIS       = 0x20,
     WEAPON_TYPE_AMOUNT              = 0x21,
     WEAPON_TYPE_TOP                 = 0x0,
     WEAPON_TYPE_ACCESSORY           = 0x30,
     WEAPON_TYPE_ACCESSORY_NOCTIS    = 0x31,
     WEAPON_TYPE_ACCESSORY_GLADIOLUS = 0x32,
     WEAPON_TYPE_ACCESSORY_IGNIS     = 0x33,
     WEAPON_TYPE_ACCESSORY_PROMPTO   = 0x34,
     WEAPON_TYPE_ACCESSORY_FRIEND    = 0x35,
     WEAPON_TYPE_KATANA              = 0x40,
     WEAPON_TYPE_ENEMY_FIREARMS      = 0x41,
     WEAPON_TYPE_NORMAL              = 0x50,
     WEAPON_TYPE_PHANTOM             = 0x51,
 };
 
 enum WEAPON_CATEGORY
 {
     WEAPON_CATEGORY_NONE          = 0xFFFFFFFF,
     WEAPON_CATEGORY_NORMAL        = 0x0,
     WEAPON_CATEGORY_PHANTOM_SWORD = 0x1,
     WEAPON_CATEGORY_MAGIC         = 0x2,
     WEAPON_CATEGORY_RING          = 0x3,
     WEAPON_CATEGORY_ITEM          = 0x4,
     WEAPON_CATEGORY_ACCESSORY     = 0x5,
     WEAPON_CATEGORY_AMOUNT        = 0x6,
 };
 
 enum GAME_MODE 
 {                                       
     GAME_MODE_VERY_EASY = 0x0,
     GAME_MODE_EASY      = 0x1,
     GAME_MODE_NORMAL    = 0x2,
     GAME_MODE_HARD      = 0x3,
     GAME_MODE_VERY_HARD = 0x4,
     GAME_MODE_AMOUNT    = 0x5,
 };
enum NEW_GAME_MODE
{
  NEW_GAME_MODE_NORMAL = 0x0,
  NEW_GAME_MODE_PLUS = 0x1,
  NEW_GAME_MODE_GOTY = 0x2,
  NEW_GAME_MODE_AMOUNT = 0x3,
};
  enum REWARD_TIMING
 {                                       
     REWARD_TIMING_NONE             = 0xFFFFFFFF,
     REWARD_TIMING_LEVEL_UP         = 0x0,
     REWARD_TIMING_F2F              = 0x1,
     REWARD_TIMING_STRATEGY         = 0x2,
     REWARD_TIMING_SHIFTBREAK       = 0x3,
     REWARD_TIMING_PARRY            = 0x4,
     REWARD_TIMING_BACKATTACKLINK   = 0x5,
     REWARD_TIMING_PHANTOM_SUMMON   = 0x6,
     REWARD_TIMING_BURST            = 0x7,
     REWARD_TIMING_ITEM             = 0x8,
     REWARD_TIMING_CAMP             = 0x9,
     REWARD_TIMING_MAGIC            = 0xA,
     REWARD_TIMING_FISHING          = 0xB,
     REWARD_TIMING_FISHING_BIG      = 0xC,
     REWARD_TIMING_FAVORITE         = 0xD,
     REWARD_TIMING_CAR_DRIVE        = 0xE,
     REWARD_TIMING_CHOCOBO_RIDE     = 0xF,
     REWARD_TIMING_CHOCOBO_RACE     = 0x10,
     REWARD_TIMING_WAIT_WIN         = 0x11,
     REWARD_TIMING_FISHING_EXP      = 0x12,
     REWARD_TIMING_PHOTO_IDOL_EXP   = 0x13,
     REWARD_TIMING_CAR_DRIVE_EXP    = 0x14,
     REWARD_TIMING_CHOCOBO_RIDE_EXP = 0x15,
     REWARD_TIMING_CHOCOBO_RACE_EXP = 0x16,
     REWARD_TIMING_PHANTOM_LINK_EXP = 0x17,
     REWARD_TIMING_WAIT_LIBRA_PLUS  = 0x18,
     REWARD_TIMING_AP               = 0x19,
     REWARD_TIMING_EXP              = 0x1A,
     REWARD_TIMING_EXP_TO_AP        = 0x1B,
     REWARD_TIMING_BATTLE_RESULT_AP = 0x1C,
     REWARD_TIMING_GLADIOLUS        = 0x1D,
     REWARD_TIMING_IGNIS            = 0x1E,
     REWARD_TIMING_PROMPTO          = 0x1F,
     REWARD_TIMING_AMOUNT           = 0x40,
 };
 enum SAVE_TYPE
 {                                       
     SAVE_TYPE_STAY              = 0x0,
     SAVE_TYPE_TEMPORARY         = 0x1,
     SAVE_TYPE_MISSION_TEMPORARY = 0x2,
     SAVE_TYPE_SYSTEM            = 0x3,
     SAVE_TYPE_PLATINUMDEMO      = 0x4,
     SAVE_TYPE_CLEAR             = 0x5,
     SAVE_TYPE_SYSTEM_NOX_EPG    = 0x6,
     SAVE_TYPE_SYSTEM_NOX_EPP    = 0x7,
     SAVE_TYPE_SYSTEM_NOX_EPI    = 0x8,
     SAVE_TYPE_SYSTEM_NOX_MULTI  = 0x9,
     SAVE_TYPE_AVATAR            = 0xA,
     SAVE_TYPE_AVATAR_MOD        = 0xB,
     SAVE_TYPE_AMOUNT            = 0xC,
     SAVE_TYPE_TRIAL_GAME        = 0x0,
     SAVE_TYPE_TRIAL_SYSTEM      = 0x3,
 };
enum SortieStatus 
 {   
     SORTIE_STATUS_ON             = 0x0,
     SORTIE_STATUS_OFF            = 0x1,
     SORTIE_STATUS_OFF_VISIBLE_ON = 0x2,
     SORTIE_STATUS_AMOUNT         = 0x3,
 };
  enum AUTO_SAVE_TYPE
 {                                     
     AUTO_SAVE_TYPE_NONE     = 0x0,
     AUTO_SAVE_TYPE_DINNER   = 0x1,
     AUTO_SAVE_TYPE_PARKING  = 0x2,
     AUTO_SAVE_TYPE_CARNIVAL = 0x3,
     AUTO_SAVE_TYPE_NUM      = 0x4,
 };

 enum WeatherType
{
  WEATHER_TYPE_UNSPECIFIED = 0xFFFFFFFF,
  WEATHER_TYPE_A = 0x0,
  WEATHER_TYPE_B = 0x1,
  WEATHER_TYPE_C = 0x2,
};
enum CHOCOBO_PERSONALITY 
 {                                       
     CHOCOBO_PERSONALITY_INVALID = 0xFFFFFFFF,
     CHOCOBO_PERSONALITY_NORMAL             = 0x0,
     CHOCOBO_PERSONALITY_STAMINA_UP         = 0x1,
     CHOCOBO_PERSONALITY_JUMP_UP            = 0x2,
     CHOCOBO_PERSONALITY_SPEED_UP           = 0x3,
     CHOCOBO_PERSONALITY_ALL_ROUNDER        = 0x4,
     CHOCOBO_PERSONALITY_EVENT_UP           = 0x5,
     CHOCOBO_PERSONALITY_PERSONALITY_MAX    = 0x6,
 };
 
enum CHOCOBO_COLOR 
 {                                       
     CHOCOBO_COLOR_INVALID = 0xFFFFFFFF,
     CHOCOBO_COLOR_BLACK         = 0x0,
     CHOCOBO_COLOR_YELLOW        = 0x1,
     CHOCOBO_COLOR_BLUE          = 0x2,
     CHOCOBO_COLOR_RED           = 0x3,
     CHOCOBO_COLOR_GREEN         = 0x4,
     CHOCOBO_COLOR_MAX     = 0x5,
 };
 
 enum CHOCOBO_RARITY 
 {                                       
     CHOCOBO_RARITY_INVALID = 0xFFFFFFFF,
     CHOCOBO_RARE_D         = 0x0,
     CHOCOBO_RARE_C         = 0x1,
     CHOCOBO_RARE_B         = 0x2,
     CHOCOBO_RARE_A         = 0x3,
     CHOCOBO_RARE_S         = 0x4,
     CHOCOBO_RARITY_MAX     = 0x5,
 };

 enum CHOCOBO_TRAINING
 {
     CHOCOBO_TRAINING_STAMINA = 0x0,
     CHOCOBO_TRAINING_JUMP    = 0x1,
     CHOCOBO_TRAINING_SPEED   = 0x2,
     CHOCOBO_TRAINING_ALL     = 0x3,
     CHOCOBO_TRAINING_CUR_MAX = 0x4,
     CHOCOBO_TRAINING_MAX     = 0x5,
 };

 enum CHOCOBO_SPECIAL_TRAINING
 {
     CHOCOBO_SPECIAL_TRAINING_0   = 0x0,
     CHOCOBO_SPECIAL_TRAINING_1   = 0x1,
     CHOCOBO_SPECIAL_TRAINING_2   = 0x2, 
     CHOCOBO_SPECIAL_TRAINING_3   = 0x3, 
     CHOCOBO_SPECIAL_TRAINING_4   = 0x4, 
     CHOCOBO_SPECIAL_TRAINING_MAX = 0x5,
 };
 
 enum SAVE_COMMON_RESERVED
 {
     RESERVED_INDEX_MAINMENU_ALREADY_OPENED = 0x0,
     RESERVED_FILTERED_MAP_ICON_1 = 0x1,
     RESERVED_FILTERED_MAP_ICON_2 = 0x2,
     RESERVED_MENU_ACTIVE_QUESTID = 0x3,
     RESERVED_MENU_ACTIVE_QUESTID_DEST = 0x4,
     RESERVED_CARNIVAL_SCORE_AE1  = 0x5,
     RESERVED_CARNIVAL_SCORE_AE2  = 0x6,
     RESERVED_CARNIVAL_SCORE_AE3  = 0x7,
     RESERVED_CARNIVAL_SCORE_AN1  = 0x8,
     RESERVED_CARNIVAL_SCORE_AN2  = 0x9,
     RESERVED_CARNIVAL_SCORE_AN3  = 0xA,
     RESERVED_CARNIVAL_SCORE_AH1  = 0xB,
     RESERVED_CARNIVAL_SCORE_AH2  = 0xC,
     RESERVED_CARNIVAL_SCORE_AH3  = 0xD,
     RESERVED_CARNIVAL_SCORE_BE1  = 0xE,
     RESERVED_CARNIVAL_SCORE_BE2  = 0xF,
     RESERVED_CARNIVAL_SCORE_BE3  = 0x10,
     RESERVED_CARNIVAL_SCORE_BN1  = 0x11,
     RESERVED_CARNIVAL_SCORE_BN2  = 0x12,
     RESERVED_CARNIVAL_SCORE_BN3  = 0x13,
     RESERVED_CARNIVAL_SCORE_BH1  = 0x14,
     RESERVED_CARNIVAL_SCORE_BH2  = 0x15,
     RESERVED_CARNIVAL_SCORE_BH3  = 0x16,
     RESERVED_CARNIVAL_SCORE_CE1  = 0x17,
     RESERVED_CARNIVAL_SCORE_CE2  = 0x18,
     RESERVED_CARNIVAL_SCORE_CE3  = 0x19,
     RESERVED_CARNIVAL_SCORE_CN1  = 0x1A,
     RESERVED_CARNIVAL_SCORE_CN2  = 0x1B,
     RESERVED_CARNIVAL_SCORE_CN3  = 0x1C,
     RESERVED_CARNIVAL_SCORE_CH1  = 0x1D,
     RESERVED_CARNIVAL_SCORE_CH2  = 0x1E,
     RESERVED_CARNIVAL_SCORE_CH3  = 0x1F,
     RESERVED_CARNIVAL_SCORE_DE1  = 0x20,
     RESERVED_CARNIVAL_SCORE_DE2  = 0x21,
     RESERVED_CARNIVAL_SCORE_DE3  = 0x22,
     RESERVED_CARNIVAL_SCORE_DN1  = 0x23,
     RESERVED_CARNIVAL_SCORE_DN2  = 0x24,
     RESERVED_CARNIVAL_SCORE_DN3  = 0x25,
     RESERVED_NOX_MULTI_POWER     = 0x26,
     RESERVED_NOX_EPP_VEHICLE_CUSTAMIZE = 0x27,
     RESERVED_MENU_ACTIVE_QUESTID_FEATHER = 0x28,
     RESERVED_MENU_ACTIVE_QUESTID_DEST_FEATHER = 0x29,
     RESERVED_NUM                 = 0x32,
 };
 
  enum EPI_RESULT_SCENE
 {                                                                                
     EPI_RESULT_SCENE_SETTING_CHAPTER = 0xFFFFFFFF,
     EPI_RESULT_SCENE_BATTLE          = 0x0,
     EPI_RESULT_SCENE_CHAPTER1        = 0x1,
     EPI_RESULT_SCENE_CHAPTER2        = 0x2,
     EPI_RESULT_SCENE_CHAPTER3        = 0x3,
     EPI_RESULT_SCENE_CHAPTER_IF      = 0x4,
     EPI_RESULT_SCENE_EXTRA_BATTLE    = 0x5,
     EPI_RESULT_SCENE_CHAPTER_RESERVE = 0x6,
     EPI_RESULT_SCENE_FINAL           = 0x7,
     EPI_RESULT_SCENE_AMOUNT          = 0x8,
 };
 
  enum EPI_RESULT
 {                                       
     EPI_RESULT_BATTLE_COUNT        = 0x0,
     EPI_RESULT_COMBO_MAX           = 0x1,
     EPI_RESULT_COMBO_MAX_SCORE     = 0x2,
     EPI_RESULT_DAMAGE              = 0x3,
     EPI_RESULT_DAMAGE_SCORE        = 0x4,
     EPI_RESULT_TIME                = 0x5,
     EPI_RESULT_TIME_SCORE          = 0x6,
     EPI_RESULT_TOTAL_SCORE         = 0x7,
     EPI_RESULT_RANK                = 0x8,
     EPI_RESULT_CHAPTER_TOTAL_SCORE = 0x9,
     EPI_RESULT_CHAPTER_BONUS       = 0xA,
     EPI_RESULT_FINAL_SCORE         = 0xB,
     EPI_RESULT_AMOUNT              = 0xC,
 };
 
enum SAVE_COMMON_EFFECTED_ENTITLEMENT
 {                                      
     JET_TWITCH_GIL   = 0x0,
     JET_TWITCH_AP    = 0x1,
     JET_TWITCH_COINS = 0x2,
 };

// Shared structs

typedef struct STRING_T
{
    uint32 stringLength; 
    if (stringLength != 0)
    {
        char stringData[stringLength];
    }
} string_t <name="string_t", read=(this.stringLength == 0 ? "null" : this.stringData)>;

typedef struct tagDoubleVector4 {
  double x, y, z, w;
} DoubleVector4<read=Str("%.3f, %.3f, %.3f, %.3f", this.x, this.y, this.z, this.w)>;

typedef struct tagDoubleVector3 {
  double x, y, z;
} DoubleVector3<read=Str("%.3f, %.3f, %.3f", this.x, this.y, this.z)>;

typedef struct tagVector4{
    float x, y, z, w;
} Vector4<read=Str("%.3f, %.3f, %.3f, %.3f", this.x, this.y, this.z, this.w)>;


//guess work structs / needs more research
//----------------------------------------
typedef struct INTERACTION_STRINGS
{    
    string_t interactString;
    int32 unk; 
    int32 unk2; 
};
 
typedef struct GlobalLabel1
{
    FIXID Label_ID <name="Gloabl Label ID", comment="type: FIXID", bgcolor=cDkBlue>;
    bool value; 
    byte unused1; 
};

typedef struct GlobalLabel2 {
    byte unused1; 
    byte unused2; 
    short unkShort1;
    short unkShort2; 
    FIXID Label_ID <name="Global Label ID", bgcolor=cDkBlue>;
    byte alwaysTwo; 
    byte alwaysZero; 
};
 
 typedef struct GlobalLabelStruct {
   uint32 globalLabel1Count<bgcolor=cRed>; 
    if (globalLabel1Count != 0)
    {
        GlobalLabel1 globalLabel1[globalLabel1Count]<name="Global Label 1", read=(this.Label_ID), bgcolor=cDkRed, optimize=false>;
    }     
    local int globalLabel2ArrayCount = 2241; // 2241 always except 2098 for practice arena. Cant see where it pulls this number from, but its consistent across all *standard* saves.
    GlobalLabel2 globalLabel2Array[globalLabel2ArrayCount]<name="Global Label 2", read=(this.Label_ID), bgcolor=cDkGreen, optimize=false>; 
    byte padding[6]; 
    uint32 interactionCount<bgcolor=cDkBlue>; //seems to always return 47 more than the Item Interaction Strings, regardless of the save, which matches 47 global label buddy interaction Strings, practice arena only has those 47
    INTERACTION_STRINGS interactionPoints[interactionCount]<name="Interaction Point", optimize=false, bgcolor=cBlue>;
};

typedef struct SQEX_EBONY_BASE_RTC_DATETIME
{  //currently unused needs SIMD functions to calculate correctly. See SQEX::Ebony::Base::RTC::GetDateSecond
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>; //for sure has this, but the rest is needs proccessing
    int year <name="Year", comment="type: int", bgcolor=cDkYellow>;
    int month <name="Month", comment="type: int", bgcolor=cDkYellow>;
    int day <name="Day", comment="type: int", bgcolor=cDkYellow>;
    int weekDay <name="WeekDay", comment="type: int", bgcolor=cDkYellow>;
    int hour <name="Hour", comment="type: int", bgcolor=cDkYellow>;
    int minute <name="Minute", comment="type: int", bgcolor=cDkYellow>;
    int second <name="Second", comment="type: int", bgcolor=cDkYellow>;
} SQEX_Ebony_Base_RTC_DateTime;
//----------------------------------------

// Main structs
typedef struct HEADER
{
    char magic[4]<comment="not decrypted correctly", bgcolor=cDkPurple>;
    uint32 version<bgcolor=cDkGreen>;
    uint32 reserved;
    uint32 footerStructsOffset<bgcolor=cDkGreen>;
    uint32 formatId<bgcolor=cDkGreen>;
    uint32 versionId<bgcolor=cDkGreen>;
}Header;

typedef struct BLACK_SAVE_SAVEINFORMATION
{ 
    structid_t structId<bgcolor=cBlack>;
    SAVE_TYPE saveType<name="SaveType", comment="type: Black.Save.SAVE_TYPE", bgcolor=cDkGreen>;
    string_t areaFilePath<name="AreaFilePath", comment="type: Ebony.Base.String", bgcolor=cDkGreen>;
    FIXID playerRestartPointID<name="PlayerRestartPointID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkGreen>;
    DoubleVector4 playerWorldPos <name="PlayerWorldPos", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkGreen>;
    Vector4 playerRotation<name="PlayerRotation", comment="type: Luminous.Math.VectorA", bgcolor=cDkGreen>;
    FIXID activeQuestFixID<name="ActiveQuestFixID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkGreen>;
    int32 slotNo<name="SlotNo", comment="type: int", bgcolor=cDkGreen>;
    int32 tmSec<name="tm_sec", comment="type: int", bgcolor=cDkGreen>;
    int32 tmMin<name="tm_min", comment="type: int", bgcolor=cDkGreen>;
    int32 tmHour<name="tm_hour", comment="type: int", bgcolor=cDkGreen>;
    int32 tmMday<name="tm_mday", comment="type: int", bgcolor=cDkGreen>;
    int32 tmMon<name="tm_mon", comment="type: int", bgcolor=cDkGreen>;
    int32 tmYear<name="tm_year", comment="type: int", bgcolor=cDkGreen>;
    int32 tmWday<name="tm_wday", comment="type: int", bgcolor=cDkGreen>;
    int32 tmYday<name="tm_yday", comment="type: int", bgcolor=cDkGreen>;
    int32 tmIsdst<name="tm_isdst", comment="type: int", bgcolor=cDkGreen>;
    uint32 playerLevel<name="PlayerLevel", comment="type: uint32_t", bgcolor=cDkGreen>;
    int32 chapterNo<name="ChapterNo", comment="type: int", bgcolor=cDkGreen>;
    AUTO_SAVE_TYPE autoSaveType<name="AutoSaveType", comment="type: Black.Save.AUTO_SAVE_TYPE", bgcolor=cDkGreen>;
    FIXID campPlaceFixID <name="CampPlaceFixID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkGreen>;
    int64 playTime<name="PlayTime", comment="type: int64_t", bgcolor=cDkGreen>;
    bool isClear<name="IsClear", comment="type: bool", bgcolor=cDkGreen>;
    bool isNewPlus<name="IsNewPlus", comment="type: bool", bgcolor=cDkGreen>;
    bool isClearGOTY<name="IsClearGOTY", comment="type: bool", bgcolor=cDkGreen>;
    int16 reserved0<name="Reserved0", comment="type: int", bgcolor=cDkGreen>;
    int32 reserved1<name="Reserved1", comment="type: int", bgcolor=cDkGreen>;
    int32 reserved2<name="Reserved2", comment="type: int", bgcolor=cDkGreen>;
    int32 reserved3<name="Reserved3", comment="type: int", bgcolor=cDkGreen>;
    int32 screenShotWidth<name="ScreenShotWidth", comment="type: int", bgcolor=cDkGreen>;
    int32 screenShotHeight<name="ScreenShotHeight", comment="type: int", bgcolor=cDkGreen>;
    uint saveThumbnailBinaryDataSize;
    if (saveThumbnailBinaryDataSize != 0)
    {
        // possibly raw image data with no header / footer for save file images
        ubyte saveThumbnailBinaryData[saveThumbnailBinaryDataSize]<name="Save Thumbnail Data", comment="type: Luminous.Core.Memory.Buffer", bgcolor=cDkGreen>;
    }  
    uint32 noxScore<name="NoxScore", comment="type: uint32_t", bgcolor=cDkYellow>;
    GAME_MODE noxGameMode<name="NoxGameMode", comment="type: Black.Save.GAME_MODE", bgcolor=cDkYellow>;    
    //no documentation exists from here till end of struct, names and data types are all gueses
    uint32 interactionDataSize<bgcolor=cWhite>; 
    GlobalLabelStruct globalLabel<name="Global Label Interaction Data", comment="assumed struct", bgcolor=cDkYellow>;     
    ubyte unk[2]<comment="always two bytes and always zero for both">;
}Black_Save_SaveInformation;

typedef struct SaveMoveDistanceStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    bool flag;
    double distance;
    DoubleVector4 position;
    double distance_ability_point;
    double distance_exp;
};

 struct Black_Save_Player_SavePlayerPositionStruct 
 { 
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;                                      
     bool available_;
     DoubleVector4 playerWorldPos <name="PlayerWorldPos", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkGreen>;
     Vector4 playerRotation<name="PlayerRotation", comment="type: Luminous.Math.VectorA", bgcolor=cDkGreen>;
 };
 
 typedef struct Black_Save_MemoryQuest_SaveMemoryQuestDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    int64 worldTime_ <name="World Time", comment="type: int64", bgcolor=cDkGreen>;
    string_t areaFilePath <name="Area File Path", comment="type: string_t", bgcolor=cDkGreen>;
    DoubleVector4 playerWorldPos <name="Player World Position", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkGreen>;
    Vector4 playerRotation <name="Player Rotation", comment="type: Luminous.Math.VectorA", bgcolor=cDkGreen>;
    WeatherType weatherType_ <name="Weather Type", comment="type: int", bgcolor=cDkGreen>;
    FIXID campPoint_ <name="Camp Point", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkGreen>;
} Black_Save_MemoryQuest_SaveMemoryQuestDataStruct;

typedef struct Black_Save_MemoryQuest_SaveMemoryQuestStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 version_ <name="Version", comment="type: uint32", bgcolor=cDkGreen>;
    bool isNowCurrent_ :1 <name="Is Now Current", comment="type: bool", bgcolor=cDkGreen>;
    bool isReturnCaem_ :1 <name="Is Return Caem", comment="type: bool", bgcolor=cDkGreen>;
    bool isCanReturn_ :1 <name="Is Can Return", comment="type: bool", bgcolor=cDkGreen>;
    uint32 memoryQuestDataCount <name="Memory Quest Data Count", comment="size of memoryQuestData array", bgcolor=cDkGreen>;
    Black_Save_MemoryQuest_SaveMemoryQuestDataStruct memoryQuestData[memoryQuestDataCount] <name="Memory Quest Data", comment="type: Black.Save.MemoryQuest.SaveMemoryQuestDataStruct, count: MEMORY_QUEST_PLACE_COUNT_MAX", bgcolor=cDkGreen, optimize=false>;
} Black_Save_MemoryQuest_SaveMemoryQuestStruct;

typedef struct SaveBuffStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     BUFF buff;
     int32 level;                          
 }; 
 
 typedef struct SaveAbilityEquipmentStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID equipmentAbility;
     int32 bank_number;                          
 };
 
 typedef struct SaveAbilityEquipmentMenuStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID equipmentMenuAbility;                          
 };
 
 typedef struct SaveWeaponEquipmentStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID weaponFixid <name="Equipment ID">;
     WEAPON_TYPE equipmentType;
     WEAPON_CATEGORY equipmentCategory;
     int32 bank_number;                          
 };
 
 typedef struct SaveJobCommandEquipmentStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID jobCommand;
     int32 bank_number;                          
 };
 
 typedef struct SaveClothEquipmentStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID clothFixid <name="Cloth ID">;
     FIXID clothType;
     int32 bank_number;                          
 };
 
 typedef struct SaveAbilityCountOneStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     int16 count;
     int16 weaponAttack;                        
 };

typedef struct SaveAbilityCountStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    int32 abilityCount;
    struct AbilityStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < abilityCount; i++) {
            typedef struct EnumAbilityField(int32 val) {
                local ABILITY_ENUM Name = val;
                SaveAbilityCountOneStruct abilityData; 
            } EnumeratedAbility<name=EnumToString(this.Name)>;
            EnumeratedAbility reserved(i);
        }
    } abilities<name="Abilities", optimize=false>;
} SaveAbilityCountStruct;

typedef struct Black_Save_Ability_SaveAbilityEffectCountStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    int32 abilityEffectCount;
    struct AbilityEffectStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < abilityEffectCount; i++) {
            typedef struct enumAbilityEffectField(int32 val) {
                local ABILITY_EFFECT Name = val;
                int32 value;
            } EnumeratedAbilityEffect<name=EnumToString(this.Name), read=this.value>;
            EnumeratedAbilityEffect reserved(i);
        }
    } abilityEffects<name="Ability Effects", optimize=false>;
} Black_Save_Ability_SaveAbilityEffectCountStruct;

 typedef struct SaveEnchantCountOneStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     ABILITY_ENUM abilityID;
     ABILITY_EFFECT abilityEffect;
     SaveAbilityCountOneStruct ability;
     int32 attack_ID;
     int32 effect;                             
 };
 
 typedef struct Black_Save_Ability_SaveEnchantCountStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     int32 enchantCount;
     SaveEnchantCountOneStruct enchant[enchantCount];                          
 };
 
 typedef struct Black_Save_Ability_SaveInspirationCheckStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     int32 Count;                           
 };
 
 typedef struct Black_Save_Ability_SaveInspirationElementCheckStruct
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     int32 Count;                           
 };
 
 typedef struct Black_Save_Ability_SaveJobCommandStruct
 {   
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID id;
     bool exist;                         
     int32 exp;                            
     int32 level;                          
 };
 
 typedef struct Black_Save_Ability_SaveSkillStruct
 {   
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID id <name="Skill Name">;
     int32 exp;                         
     int32 exp_total;                            
     int32 level;                          
 };
 
 typedef struct Black_Save_Ability_SaveInspirationStruct
 {   
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     FIXID id;
     bool exist;                   
 };
 
 typedef struct Black_Save_Party_SavePartyMemberStruct 
 {                                  
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
     SAVE_PLAYER save_bank_number <name="Player Save Bank Number">;                          
 };
 
  typedef struct Black_Save_Party_SaveJobPlayerStruct
 {   
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;                          
     int32 level;                          
 };
 
 typedef struct Black_Save_Party_SaveSystemToggleStruct
 {   
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;                          
     bool flag;                          
 };
 
 typedef struct Black_Save_Party_SaveTrophyStruct
 {                                       
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;                                  
     FIXID id <name="Trophy FIXID">;
     bool exist;                      
 };
 
 typedef struct Black_Save_Ability_SaveAbilityInformationStruct
 {   
     structid_t struct_id <name="Struct ID", bgcolor=cBlack>;                          
     ABILITY_EFFECT effect; 
     int32 value;   
     int32 attack;   
     ABILITY_CONDITION condition;                            
 };
 
typedef struct Black_Save_Party_SaveJobStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="Job FIXID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    SAVE_PLAYER save_bank_number <name="SaveBankNumber", comment="type: Black.Save.SAVE_PLAYER", bgcolor=cDkYellow>;
    FIXID name_id <name="NameId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool exist <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_PLAYER_AMOUNT;
    struct PlayerStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_Save_SAVE_PLAYER_AMOUNT; i++) {
            typedef struct EnumPlayerField(int32 val) {
                local SAVE_PLAYER Name = val;
                Black_Save_Party_SaveJobPlayerStruct playerData;
            } EnumeratedPlayer<name=EnumToString(this.Name)>;
            EnumeratedPlayer reserved(i);
        }
    } players<name="Players", optimize=false>;
} Black_Save_Party_SaveJobStruct;

 typedef struct Black_Save_Ability_SaveAbilityStruct
{  
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="Ability Fixid", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    ABILITY_ENUM ability_id <name="Name", comment="type: Black.Actor.ABILITY", bgcolor=cDkYellow>;
    int32 level <name="Level", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 weapon_bank_number <name="WeaponBankNumber", comment="type: int32_t", bgcolor=cDkYellow>;
    bool exist :1 <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    bool enchant :1 <name="Enchant", comment="type: bool", bgcolor=cDkYellow>;
    bool noctis_only :1 <name="NoctisOnly", comment="type: bool", bgcolor=cDkYellow>;
    bool weapon_only :1 <name="WeaponOnly", comment="type: bool", bgcolor=cDkYellow>;
    bool party :1 <name="Party", comment="type: bool", bgcolor=cDkYellow>;
    int32 count <name="Count", comment="type: int32_t", bgcolor=cDkYellow>;
} Black_Save_Ability_SaveAbilityStruct;

typedef struct BLACK_SAVE_PLAYER_SAVEPLAYERSTATUSSTRUCT
{  
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 exp <name="Exp", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 exp_total <name="ExpTotal", comment="type: uint32_t", bgcolor=cDkYellow>;
    int32 ability_point <name="AbilityPoint", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 step_count <name="StepCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 step_count_battle_result <name="StepCountBattleResult", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 step_count_camp <name="StepCountCamp", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 step_count_gladiolus <name="StepCountGladiolus", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 phantom_sword_amount <name="PhantomSwordAmount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 kill_count <name="KillCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 damage_count <name="DamageCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 damage_ratio <name="DamageRatio", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 damage_ratio_max <name="DamageRatioMax", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve1 <name="Reserve1", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve2 <name="Reserve2", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve3 <name="Reserve3", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve4 <name="Reserve4", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve5 <name="Reserve5", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve6 <name="Reserve6", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve7 <name="Reserve7", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve8 <name="Reserve8", comment="type: int32_t", bgcolor=cDkYellow>;
    //SQEX_EBONY_BASE_RTC_DATETIME invincible_suits_date <name="InvincibleSuitsDate", comment="type= SQEX.Ebony.Base.RTC.DateTime", bgcolor=cDkYellow>;
    structid_t sqexEbonyBaseRTCdateTimeStructID;
    uint32 unProccessedRTCData[4]; //using this till SIMD function to read RTC_DATETIME setup
    int32 invincible_suits_count <name="InvincibleSuitsCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 invincible_suits_time <name="InvincibleSuitsTime", comment="type: int32_t", bgcolor=cDkYellow>;    
} Black_Save_Player_SavePlayerStatusStruct;

typedef struct Black_Save_Equipment_SaveWeaponStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="Weapon ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool reserve_flag :1 <name="ReserveFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool exist :1 <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    bool new_flag :1 <name="NewFlag", comment="type: bool", bgcolor=cDkYellow>;
    SAVE_PLAYER equipment <name="Equipment", comment="type: Black.Save.SAVE_PLAYER", bgcolor=cDkYellow>;
    int32 equipment_weapon_bank_number <name="EquipmentWeaponBankNumber", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID name_id <name="NameId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    WEAPON_TYPE type <name="Type", comment="type: Black.Actor.WEAPON_TYPE", bgcolor=cDkYellow>;
    int32 rank <name="Rank", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 strength <name="Strength", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 vitality <name="Vitality", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 critical <name="Critical", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 recover_mp <name="RecoverMp", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 slot <name="Slot", comment="type: int32_t", bgcolor=cDkYellow>;    
    uint32 Black_Actor_EQUIPMENT_ABILITY_EQUIP_AMOUNT;
    SaveAbilityEquipmentStruct ability[Black_Actor_EQUIPMENT_ABILITY_EQUIP_AMOUNT] <name="Ability", read=(this.equipmentAbility), comment="type: Black.Save.Ability.SaveAbilityEquipmentStruct, count: Black::Actor::EQUIPMENT_ABILITY_EQUIP_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Actor_EQUIPMENT_RESIDENT_ABILITY_EQUIP_AMOUNT;
    SaveAbilityEquipmentStruct resident_ability[Black_Actor_EQUIPMENT_RESIDENT_ABILITY_EQUIP_AMOUNT] <name="ResidentAbility", read=(this.equipmentAbility), comment="type: Black.Save.Ability.SaveAbilityEquipmentStruct, count: Black::Actor::EQUIPMENT_RESIDENT_ABILITY_EQUIP_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Actor_STATUS_ADJUST_AMOUNT;
    struct Status_Adjust_Struct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_Actor_STATUS_ADJUST_AMOUNT; i++) {
            typedef struct Enum_STATUS_ADJUST_Field(int32 val) {
                local STATUS_ADJUST Name = val;
                int32 value;
            } Enumerated_STATUS_ADJUST<name=EnumToString(this.Name), read=this.value>;
            Enumerated_STATUS_ADJUST reserved(i);
        }
    } status_adjust<name="StatusAdjust", comment="type: Black.Actor.STATUS_ADJUST, count: Black::Actor::STATUS_ADJUST_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 remodel_fail_count <name="RemodelFailCount", comment="type: int32_t", bgcolor=cDkYellow>;
} Black_Save_Equipment_SaveWeaponStruct;

typedef struct Black_Save_Equipment_SaveClothStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="Cloth Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID type <name="Type", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    SAVE_PLAYER equipment <name="Equipment", comment="type: Black.Save.SAVE_PLAYER", bgcolor=cDkYellow>;
    int32 equipment_cloth_bank_number <name="EquipmentClothBankNumber", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID name_id <name="NameId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool exist : 1 <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    bool new_flag : 1 <name="NewFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool jacket_off : 1 <name="JacketOff", comment="type: bool", bgcolor=cDkYellow>;
    bool cap_on : 1 <name="CapOn", comment="type: bool", bgcolor=cDkYellow>;
    int32 occlusion_set <name="OcclusionSet", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 strength <name="Strength", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 vitality <name="Vitality", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 critical <name="Critical", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 recover_mp <name="RecoverMp", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Actor_EQUIPMENT_ABILITY_EQUIP_AMOUNT<bgcolor=cAqua >;
    SaveAbilityEquipmentStruct ability[Black_Actor_EQUIPMENT_ABILITY_EQUIP_AMOUNT] <name="Ability", read=(this.equipmentAbility), comment="type: Black.Save.Ability.SaveAbilityEquipmentStruct, count: Black::Actor::EQUIPMENT_ABILITY_EQUIP_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Actor_STATUS_ADJUST_AMOUNT;
    struct Status_AdjustCloth_Struct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_Actor_STATUS_ADJUST_AMOUNT; i++) {
            typedef struct Enum_STATUS_ADJUST_CLOTH_Field(int32 val) {
                local STATUS_ADJUST Name = val;
                int32 value;
            } Enumerated_STATUS_ADJUST_CLOTH<name=EnumToString(this.Name), read=this.value>;
            Enumerated_STATUS_ADJUST_CLOTH reserved(i);
        }
    } status_adjustCloth<name="StatusAdjustCloth", comment="type: Black.Actor.STATUS_ADJUST_CLOTH, count: Black::Actor::STATUS_ADJUST_AMOUNT", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Equipment_SaveClothStruct;

typedef struct Black_Save_Equipment_SaveEquipmentStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 Black_Save_SAVE_WEAPON_AMOUNT<bgcolor=cAqua >;
    Black_Save_Equipment_SaveWeaponStruct weapon[Black_Save_SAVE_WEAPON_AMOUNT] <name="Weapon", read=(this.id), comment="type: Black.Save.Equipment.SaveWeaponStruct, count: Black::Save::SAVE_WEAPON_AMOUNT", bgcolor=cLtBlue, optimize=false>;
    uint32 Black_Save_SAVE_PHANTOM_SWORD_AMOUNT<bgcolor=cAqua >;
    Black_Save_Equipment_SaveWeaponStruct phantom_sword[Black_Save_SAVE_PHANTOM_SWORD_AMOUNT] <name="PhantomSword", read=(this.id), comment="type: Black.Save.Equipment.SaveWeaponStruct, count: Black::Save::SAVE_PHANTOM_SWORD_AMOUNT", bgcolor=cLtBlue, optimize=false>;
    uint32 Black_Save_SAVE_ACCESSORY_AMOUNT<bgcolor=cAqua >;
    Black_Save_Equipment_SaveWeaponStruct accessory[Black_Save_SAVE_ACCESSORY_AMOUNT] <name="Accessory", read=(this.id), comment="type: Black.Save.Equipment.SaveWeaponStruct, count: Black::Save::SAVE_ACCESSORY_AMOUNT", bgcolor=cLtBlue, optimize=false>;
    uint32 Black_Save_SAVE_CLOTH_AMOUNT<bgcolor=cAqua >;
    Black_Save_Equipment_SaveClothStruct cloth[Black_Save_SAVE_CLOTH_AMOUNT] <name="Cloth", read=(this.id), comment="type: Black.Save.Equipment.SaveClothStruct, count: Black::Save::SAVE_CLOTH_AMOUNT", bgcolor=cLtBlue, optimize=false>;

} Black_Save_Equipment_SaveEquipmentStruct;

typedef struct Black_Save_Item_SaveItemDataStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID id <name="Item Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 amount <name="Amount", comment="type: int32_t", bgcolor=cDkYellow>;
} Black_Save_Item_SaveItemDataStruct;

typedef struct Black_Save_Item_SaveMagicBottleStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID id <name="Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 amount <name="Amount", comment="type: int32_t", bgcolor=cDkYellow>;
    bool new_flag : 1 <name="NewFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool get_flag : 1 <name="GetFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool original : 1 <name="Original", comment="type: bool", bgcolor=cDkYellow>;
    SAVE_PLAYER equipment <name="Equipment", comment="type: Black.Save.SAVE_PLAYER", bgcolor=cDkYellow>;
    int32 equipment_weapon_bank_number <name="EquipmentWeaponBankNumber", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID name <name="Name ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID help <name="Description ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    STATUS_ELEMENT element <name="Element", comment="type: Black.Actor.STATUS_ELEMENT", bgcolor=cDkYellow>;
    FIXID magic <name="Magic", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 power <name="Power", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID effect <name="Effect", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 effect_level <name="EffectLevel", comment="type: int32_t", bgcolor=cDkYellow>;
} Black_Save_Item_SaveMagicBottleStruct;

typedef struct Black_Save_Item_SaveMagicRecipeItemStruct
{
    structid_t structId <bgcolor=cBlack>;
    STATUS_ELEMENT element <name="Element", comment="type: Black.Actor.STATUS_ELEMENT", bgcolor=cDkYellow>;
    FIXID item <name="Item", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 amount <name="Amount", comment="type: int32_t", bgcolor=cDkYellow>;
} Black_Save_Item_SaveMagicRecipeItemStruct;

typedef struct Black_Save_Item_SaveMagicRecipeStruct
{
    structid_t structId <bgcolor=cBlack>;
    bool favorite : 1 <name="Favorite", comment="type: bool", bgcolor=cDkYellow>;
    bool disable : 1 <name="Disable", comment="type: bool", bgcolor=cDkYellow>;
    int8 disable_level <name="DisableLevel", comment="type: int8_t", bgcolor=cDkYellow>;
    bool disable_delete : 1 <name="DisableDelete", comment="type: bool", bgcolor=cDkYellow>;
    FIXID magic_bottle_id <name="MagicBottleId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 magic_bottle_amount <name="MagicBottleAmount", comment="type: int32_t", bgcolor=cDkYellow>;
    STATUS_ELEMENT element <name="Element", comment="type: Black.Actor.STATUS_ELEMENT", bgcolor=cDkYellow>;
    int32 power <name="Power", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID effect <name="Effect", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 effect_level <name="EffectLevel", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_MAGIC_RECIPE_ITEM_AMOUNT <name="MagicRecipeItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveMagicRecipeItemStruct components[Black_Save_SAVE_MAGIC_RECIPE_ITEM_AMOUNT] <name=EnumToString(this.element), read=(this.amount), comment="type: Black.Save.Item.SaveMagicRecipeItemStruct, count: Black::Save::SAVE_MAGIC_RECIPE_ITEM_AMOUNT", bgcolor=cDkYellow>;
} Black_Save_Item_SaveMagicRecipeStruct;

typedef struct Black_Save_Item_SaveMagicRecipeListStruct
{
    structid_t structId <bgcolor=cBlack>;
    int32 magic_recipe_amount <name="MagicRecipeAmount", comment="type: int32_t", bgcolor=cDkYellow>;    
    uint32 Black_Save_SAVE_MAGIC_RECIPE_AMOUNT <name="Number of Magic Recipes", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveMagicRecipeStruct magic_recipe[Black_Save_SAVE_MAGIC_RECIPE_AMOUNT] <name="Magic Recipe", read=(this.magic_bottle_id), comment="type: Black.Save.Item.SaveMagicRecipeStruct, count: Black::Save::SAVE_MAGIC_RECIPE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Item_SaveMagicRecipeListStruct;

typedef struct Black_Save_Item_SaveRingStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID id <name="Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool exist : 1 <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    bool new_flag : 1 <name="NewFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool get_flag : 1 <name="GetFlag", comment="type: bool", bgcolor=cDkYellow>;
    SAVE_PLAYER equipment <name="Equipment", comment="type: Black.Save.SAVE_PLAYER", bgcolor=cDkYellow>;
    int32 equipment_weapon_bank_number <name="EquipmentWeaponBankNumber", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID name <name="Name ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID help <name="Description ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 element <name="Element", comment="type: int", bgcolor=cDkYellow>;
    int32 element_power_max <name="ElementPowerMax", comment="type: int", bgcolor=cDkYellow>;
    FIXID magic <name="Magic", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
} Black_Save_Item_SaveRingStruct;

typedef struct Black_Save_Item_SaveItemInformationStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID id <name="Item Fixid", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool get_flag : 1 <name="GetFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool new_flag : 1 <name="NewFlag", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Item_SaveItemInformationStruct;

typedef struct Black_Save_Item_SaveItemStruct
{
    structid_t structId <bgcolor=cBlack>;
    uint32 Black_Save_SAVE_BATTLE_ITEM_AMOUNT <name="BattleItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct battle_item[Black_Save_SAVE_BATTLE_ITEM_AMOUNT] <name="BattleItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_BATTLE_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_EVENT_ITEM_AMOUNT <name="EventItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct event_item[Black_Save_SAVE_EVENT_ITEM_AMOUNT] <name="EventItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_EVENT_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_FOOD_ITEM_AMOUNT <name="FoodItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct food_item[Black_Save_SAVE_FOOD_ITEM_AMOUNT] <name="FoodItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_FOOD_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_TREASURE_ITEM_AMOUNT <name="TreasureItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct treasure_item[Black_Save_SAVE_TREASURE_ITEM_AMOUNT] <name="TreasureItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_TREASURE_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_CAR_ITEM_AMOUNT <name="CarItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct car_item[Black_Save_SAVE_CAR_ITEM_AMOUNT] <name="CarItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_CAR_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_LEISURE_ITEM_AMOUNT <name="LeisureItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct leisure_item[Black_Save_SAVE_LEISURE_ITEM_AMOUNT] <name="LeisureItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_LEISURE_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_REINFORCEMENT_ITEM_AMOUNT <name="ReinforcementItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct reinforcement_item[Black_Save_SAVE_REINFORCEMENT_ITEM_AMOUNT] <name="ReinforcementItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_REINFORCEMENT_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_TRUNK_ITEM_AMOUNT <name="TrunkItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemDataStruct trunk_item[Black_Save_SAVE_TRUNK_ITEM_AMOUNT] <name="TrunkItem", read=(this.id), comment="type: Black.Save.Item.SaveItemDataStruct, count: Black::Save::SAVE_TRUNK_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 magic_bottle_amount <name="Number of Magic Bottles", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_MAGIC_BOTTLE_AMOUNT <name="MagicBottleAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveMagicBottleStruct magic_bottle[Black_Save_SAVE_MAGIC_BOTTLE_AMOUNT] <name="MagicBottle", read=(this.id), comment="type: Black.Save.Item.SaveMagicBottleStruct, count: Black::Save::SAVE_MAGIC_BOTTLE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_MAGIC_BOTTLE_AVAILABLE_AMOUNT <name="MagicBottleAvailableAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveMagicBottleStruct magic_bottle_available[Black_Save_SAVE_MAGIC_BOTTLE_AVAILABLE_AMOUNT] <name="MagicBottleAvailable", read=(this.id), comment="type: Black.Save.Item.SaveMagicBottleStruct, count: Black::Save::SAVE_MAGIC_BOTTLE_AVAILABLE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_RING_AMOUNT <name="RingAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveRingStruct ring[Black_Save_SAVE_RING_AMOUNT] <name="Ring", read=(this.id), comment="type: Black.Save.Item.SaveRingStruct, count: Black::Save::SAVE_RING_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_MAGIC_RECIPE_TYPE_AMOUNT <name="MagicRecipeListAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveMagicRecipeListStruct magic_recipe_list[Black_Save_MAGIC_RECIPE_TYPE_AMOUNT] <name="MagicRecipeList", comment="type: Black.Save.Item.SaveMagicRecipeListStruct, count: Black::Save::MAGIC_RECIPE_TYPE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_BATTLE_ITEM_INFORMATION_AMOUNT <name="InformationBattleItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_battle_item[Black_Save_SAVE_BATTLE_ITEM_INFORMATION_AMOUNT] <name="InformationBattleItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_BATTLE_ITEM_INFORMATION_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_battle_item_amount <name="Number of Battle Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_EVENT_ITEM_INFORMATION_AMOUNT <name="InformationEventItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_event_item[Black_Save_SAVE_EVENT_ITEM_INFORMATION_AMOUNT] <name="InformationEventItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_EVENT_ITEM_INFORMATION_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_event_item_amount <name="Number of Event Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_FOOD_ITEM_AMOUNT <name="InformationFoodItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_food_item[Black_Save_SAVE_FOOD_ITEM_AMOUNT] <name="InformationFoodItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_FOOD_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_food_item_amount <name="Number of Food Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_TREASURE_ITEM_INFORMATION_AMOUNT <name="InformationTreasureItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_treasure_item[Black_Save_SAVE_TREASURE_ITEM_INFORMATION_AMOUNT] <name="InformationTreasureItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_TREASURE_ITEM_INFORMATION_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_treasure_item_amount <name="Number of Treasure Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_CAR_ITEM_AMOUNT <name="InformationCarItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_car_item[Black_Save_SAVE_CAR_ITEM_AMOUNT] <name="InformationCarItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_CAR_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_car_item_amount <name="Number of Car Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_LEISURE_ITEM_AMOUNT <name="InformationLeisureItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_leisure_item[Black_Save_SAVE_LEISURE_ITEM_AMOUNT] <name="InformationLeisureItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_LEISURE_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_leisure_item_amount <name="Number of Leisure Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_REINFORCEMENT_ITEM_AMOUNT <name="InformationReinforcementItemAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_reinforcement_item[Black_Save_SAVE_REINFORCEMENT_ITEM_AMOUNT] <name="InformationReinforcementItem", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_REINFORCEMENT_ITEM_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_reinforcement_item_amount <name="Number of Reinforcement Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_MAGIC_BOTTLE_AMOUNT <name="InformationMagicBottleAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_magic_bottle[Black_Save_SAVE_MAGIC_BOTTLE_AMOUNT] <name="InformationMagicBottle", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_MAGIC_BOTTLE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_magic_bottle_amount <name="Number of Magic Bottles", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_MAGIC_BOTTLE_AVAILABLE_AMOUNT <name="InformationMagicBottleAvailableAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_magic_bottle_available[Black_Save_SAVE_MAGIC_BOTTLE_AVAILABLE_AMOUNT] <name="InformationMagicBottleAvailable", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_MAGIC_BOTTLE_AVAILABLE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_magic_bottle_available_amount <name="Number of Magic Bottles Available", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_RING_AMOUNT <name="InformationRingAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_ring[Black_Save_SAVE_RING_AMOUNT] <name="InformationRing", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_RING_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_ring_amount <name="Number of Ring Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_WEAPON_AMOUNT <name="InformationWeaponAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_weapon[Black_Save_SAVE_WEAPON_AMOUNT] <name="InformationWeapon", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_WEAPON_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_weapon_amount <name="Number of Weapon Items", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_PHANTOM_SWORD_AMOUNT <name="InformationPhantomSwordAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_phantom_sword[Black_Save_SAVE_PHANTOM_SWORD_AMOUNT] <name="InformationPhantomSword", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_PHANTOM_SWORD_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_phantom_sword_amount <name="Number of Phantom Swords", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_ACCESSORY_AMOUNT <name="InformationAccessoryAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_accessory[Black_Save_SAVE_ACCESSORY_AMOUNT] <name="InformationAccessory", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_ACCESSORY_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    int32 information_accessory_amount <name="InformationAccessoryAmount", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_CLOTH_AMOUNT <name="ClothAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_cloth[Black_Save_SAVE_CLOTH_AMOUNT] <name="InformationCloth", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_CLOTH_AMOUNT", bgcolor=cDkYellow>;
    int32 information_cloth_amount <name="InformationClothAmount", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_JOB_COMMAND_INFORMATION_AMOUNT <name="JobCommandInformationAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_job_command[Black_Save_SAVE_JOB_COMMAND_INFORMATION_AMOUNT] <name="InformationJobCommand", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_JOB_COMMAND_INFORMATION_AMOUNT", bgcolor=cDkYellow>;
    int32 information_job_command_amount <name="InformationJobCommandAmount", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_RECIPE_AMOUNT <name="RecipeAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Item_SaveItemInformationStruct information_recipe[Black_Save_SAVE_RECIPE_AMOUNT] <name="InformationRecipe", read=(this.id), comment="type: Black.Save.Item.SaveItemInformationStruct, count: Black::Save::SAVE_RECIPE_AMOUNT", bgcolor=cDkYellow>;
    int32 information_recipe_amount <name="InformationRecipeAmount", comment="type: int32_t", bgcolor=cDkYellow>;    
} Black_Save_Item_SaveItemStruct;

typedef struct Black_Save_Quest_QuestSaveInformation_ConditionWork
{
    uint32 id <name="Id", comment="type: uint32_t", bgcolor=cDkYellow>; 
    int32 value <name="Value", comment="type: int32_t", bgcolor=cDkYellow>; 
} Black_Save_Quest_QuestSaveInformation_ConditionWork;

typedef struct Black_Save_Quest_SaveQuestGameInformationStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID questId <name="QuestId", comment="type: Black.Save.Quest.SaveQuestGameInformationStruct.Fixid", bgcolor=cDkYellow>;
    uint32 progressHistoryListSize <name="ProgressHistoryListSize", comment="size of progressHistoryList array", bgcolor=cDkYellow>;
    FIXID progressHistoryList[progressHistoryListSize] <name="ProgressHistoryList", comment="type: SQEX.Ebony.Std.DynamicArray<int32_t> (Fixid)", bgcolor=cDkYellow>;
    uint32 conditionWorkSize <name="ConditionWorkSize", comment="size of conditionWork array", bgcolor=cDkYellow>;
    Black_Save_Quest_QuestSaveInformation_ConditionWork conditionWork[conditionWorkSize] <name="ConditionWork", read=this.id, comment="type: QuestSaveInformation.ConditionWork", bgcolor=cDkYellow>;
    bool isEnableUpdateUIMark <name="IsEnableUpdateUIMark", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Quest_SaveQuestGameInformationStruct;

typedef struct Black_Save_Quest_SaveQuestDataStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 saveVersion <name="SaveVersion", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 gameInformationCount <name="GameInformationCount", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 gameInformationListSize <name="GameInformationListSize", comment="size of gameInformationList array", bgcolor=cDkYellow>;
    Black_Save_Quest_SaveQuestGameInformationStruct SaveQuestGameInformationStruct[gameInformationListSize] <name="GameInformationList", read=(this.questId), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Quest.SaveQuestGameInformationStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 acceptQuestIdListSize <name="AcceptQuestIdListSize", comment="size of acceptQuestIdList array", bgcolor=cDkYellow>;
    FIXID acceptQuestIdList[acceptQuestIdListSize] <name="AcceptQuestIdList", comment="type: SQEX.Ebony.Std.DynamicArray<int32_t> (Fixid)", bgcolor=cDkYellow>;
} Black_Save_Quest_SaveQuestDataStruct;

typedef struct Black_Save_Quest_SaveQuestStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    Black_Save_Quest_SaveQuestDataStruct quest_data <name="QuestData", comment="type: Black.Save.Quest.SaveQuestDataStruct", bgcolor=cDkYellow>;
} Black_Save_Quest_SaveQuestStruct;

typedef struct Black_Save_Diner_SaveDinerDataStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID dinerId_ <name="DinerId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool updateInformation_ : 1 <name="UpdateInformation", comment="type: bool", bgcolor=cDkYellow>;
    bool updateMobHunt_ : 1 <name="UpdateMobHunt", comment="type: bool", bgcolor=cDkYellow>;
    bool updateRecipe_ : 1 <name="UpdateRecipe", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Diner_SaveDinerDataStruct;

typedef struct Black_Save_Diner_SaveDinerInformationStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID informationId_ <name="InformationId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool unlock_ : 1 <name="Unlock", comment="type: bool", bgcolor=cDkYellow>;
    bool check_ : 1 <name="Check", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Diner_SaveDinerInformationStruct;

typedef struct Black_Save_Diner_SaveDinerPlaceStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID diner_id_ <name="DinerId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID map_icon_id_ <name="MapIconId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 object_condition_ <name="ObjectCondition", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 icon_condition_ <name="IconCondition", comment="type: uint32_t", bgcolor=cDkYellow>;
} Black_Save_Diner_SaveDinerPlaceStruct;

typedef struct Black_Save_Diner_SaveDinerStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID currentDinerId_ <name="CurrentDinerId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_DINER_DATA_AMOUNT <name="DinerDataAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Diner_SaveDinerDataStruct dataLists[Black_Save_SAVE_DINER_DATA_AMOUNT] <name="DataLists", read=(this.dinerId_), comment="type: Black.Save.Diner.SaveDinerDataStruct, count: Black::Save::SAVE_DINER_DATA_AMOUNT", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_DINER_INFORMATION_AMOUNT <name="DinerInformationAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Diner_SaveDinerInformationStruct informationLists[Black_Save_SAVE_DINER_INFORMATION_AMOUNT] <name="InformationLists", read=(this.informationId_), comment="type: Black.Save.Diner.SaveDinerInformationStruct, count: Black::Save::SAVE_DINER_INFORMATION_AMOUNT", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_DINER_PLACE_AMOUNT <name="DinerPlaceAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Diner_SaveDinerPlaceStruct placeLists[Black_Save_SAVE_DINER_PLACE_AMOUNT] <name="Place List", read=this.map_icon_id_, comment="type: Black.Save.Diner.SaveDinerPlaceStruct, count: Black::Save::SAVE_DINER_PLACE_AMOUNT", bgcolor=cDkYellow>;
} Black_Save_Diner_SaveDinerStruct;

typedef struct Black_Save_Dinner_SaveDinnerRecipeStruct
{
    structid_t structId <bgcolor=cBlack>;
    FIXID id <name="Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool exist : 1 <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    int32 count <name="Count", comment="type: int", bgcolor=cDkYellow>;
} Black_Save_Dinner_SaveDinnerRecipeStruct;

typedef struct Black_Save_Dinner_SaveDinnerStruct
{
    structid_t structId <bgcolor=cBlack>;
    uint32 Black_Save_SAVE_DINNER_FOOD_RECORD_AMOUNT <name="DinnerFoodRecordAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    FIXID foodRecordId[Black_Save_SAVE_DINNER_FOOD_RECORD_AMOUNT] <name="FoodRecordId", comment="type: SQEX.Ebony.Std.Fixid, count: Black::Save::SAVE_DINNER_FOOD_RECORD_AMOUNT", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_RECIPE_AMOUNT <name="RecipeAmount", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Dinner_SaveDinnerRecipeStruct recipe[Black_Save_SAVE_RECIPE_AMOUNT] <name="Recipe", read=(this.id), comment="type: Black.Save.Dinner.SaveDinnerRecipeStruct, count: Black::Save::SAVE_RECIPE_AMOUNT", bgcolor=cDkYellow>;
} Black_Save_Dinner_SaveDinnerStruct;

typedef struct Black_Save_Menu_SaveMenuFootprint {
    structid_t struct_id <name="Struct ID", comment="Unique identifier for the footprint", bgcolor=cBlack>;
    FIXID id_ <name="Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 bitsetCount <name="BitsetCount", comment="Number of bitset entries", bgcolor=cDkYellow>;
    uint32 bitset_ [bitsetCount] <name="Bitset", comment="type: SQEX.Ebony.Std.DynamicArray<int32_t>", bgcolor=cDkYellow>;
} Black_Save_Menu_SaveMenuFootprint;

typedef struct Black_Save_Menu_SaveMenuStruct {
    structid_t struct_id <name="Struct ID", comment="Unique identifier for the menu", bgcolor=cBlack>;
    uint32 version_ <name="Version", comment="type: uint32_t", bgcolor=cDkYellow>;
    FIXID activeQuestId_ <name="ActiveQuestId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID activeQuestDestId_ <name="ActiveQuestDestId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 discoveredLocationsCount <name="DiscoveredLocationsCount", comment="Number of discovered locations", bgcolor=cDkYellow>;
    FIXID discoveredLocations_[discoveredLocationsCount] <name="DiscoveredLocations", comment="type: SQEX.Ebony.Std.DynamicArray<SQEX.Ebony.Std.Fixid>", bgcolor=cDkYellow>;
    uint32 footPrintsCount <name="FootprintsCount", comment="Number of footprints", bgcolor=cDkYellow>;
    Black_Save_Menu_SaveMenuFootprint footPrints_[footPrintsCount] <name="Footprints", comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Menu.SaveMenuFootprint>", bgcolor=cDkYellow, optimize=false>;
    int32 userDestType_ <name="UserDestinationType", comment="type: int", bgcolor=cDkYellow>;
    FIXID userDestId_ <name="UserDestinationId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    DoubleVector4 userDestLocation <name="UserDestinationLocation", comment="type: SQEX.Luminous.Math.DoubleVector4", bgcolor=cDkYellow>;
    int32 visibleFlag_ <name="VisibleFlag", comment="type: int", bgcolor=cDkYellow>;
    uint32 battleItemOrderListCount <name="BattleItemOrderListCount", comment="Number of battle items", bgcolor=cDkYellow>;
    FIXID battleItemOrderList_[battleItemOrderListCount] <name="BattleItemOrderList", comment="type: SQEX.Ebony.Std.DynamicArray<SQEX.Ebony.Std.Fixid>", bgcolor=cDkYellow>;
} Black_Save_Menu_SaveMenuStruct;

typedef struct Black_Save_Vehicle_SaveVehicleColorStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID id_ <name="ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isCreated_ : 1 <name="Is Created", comment="type: bool", bgcolor=cDkYellow>;
    bool isNew_ : 1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleColorStruct;

typedef struct Black_Save_Vehicle_SaveVehicleMaterialStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID materialId_ <name="Material ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    float currentValue_ <name="Current Value", comment="type: float", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleMaterialStruct;

typedef struct Black_Save_Vehicle_SaveVehiclePartsStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID id_ <name="ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isEquip_ : 1 <name="Is Equipped", comment="type: bool", bgcolor=cDkYellow>;
    bool isNew_ : 1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehiclePartsStruct;

typedef struct Black_Save_Vehicle_SaveVehicleScore
{
    structid_t struct_id <bgcolor=cBlack>;
    uint32 jumpScoreCount <name="Jump Score Count", comment="size of jumpScore array", bgcolor=cDkYellow>;
    int jumpScore_[jumpScoreCount] <name="Jump Scores", comment="type: int, count: SCORE_NUM", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Vehicle_SaveVehicleScore;

typedef struct Black_Save_Vehicle_SaveVehicleStickerStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID stickerId_ <name="Sticker ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    string texturePath_ <name="Texture Path", comment="type: Ebony.Base.String", bgcolor=cDkYellow>;
    float rotate_ <name="Rotation", comment="type: float", bgcolor=cDkYellow>;
    float scale_[2] <name="Scale", comment="type: float[2]", bgcolor=cDkYellow>;
    float trans_[2] <name="Translation", comment="type: float[2]", bgcolor=cDkYellow>;
    int reserved[2];
    byte padding[3];
} Black_Save_Vehicle_SaveVehicleStickerStruct;

typedef struct Black_Save_Vehicle_SaveVehicleSpecStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    int level_ <name="Level", comment="type: int", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleSpecStruct;

typedef struct Black_Save_Vehicle_SaveVehicleStatusStruct2
{
    structid_t struct_id <bgcolor=cBlack>;
    int regaliaType_ <name="Regalia Type", comment="type: int", bgcolor=cDkYellow>;
    DoubleVector3 spare_pos_ <name="Spare Position", comment="type: double count: 3", bgcolor=cDkYellow>;
    Vector4 spare_rotate_ <name="Spare Rotation", comment="type: SQEX.Luminous.Math.VectorA", bgcolor=cDkYellow>;
    ubyte unk[4];
} Black_Save_Vehicle_SaveVehicleStatusStruct2;

typedef struct Black_Save_Vehicle_SaveVehicleUnlockStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID id_ <name="Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isNew_ : 1 <name="IsNew", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleUnlockStruct;

typedef struct Black_Save_Vehicle_SaveVehicleVisitedParkingStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID id_ <name="Id", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleVisitedParkingStruct;

typedef struct Black_Save_Vehicle_SaveVehicleLooksStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    uint32 materialCount <name="Material Count", comment="size of material array", bgcolor=cDkYellow>;   
    if (materialCount != 0)
    {
       Black_Save_Vehicle_SaveVehicleMaterialStruct material_[materialCount] <name="Material Mask Ammount", read=this.currentValue_, comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleMaterialStruct>", bgcolor=cDkYellow, optimize=false>; 
    }     
    uint32 colorIdCount <name="Color ID Count", comment="size of colorId array", bgcolor=cDkYellow>;
    FIXID colorId_[colorIdCount] <name="Color IDs", comment="type: SQEX.Ebony.Std.Fixid, count: Black::Physics::Vehicle::COLOR_CUSTOMIZE_COUNT_MAX", bgcolor=cDkYellow, optimize=false>;
    FIXID setStickerId_ <name="Set Sticker ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 stickerCount <name="Sticker Count", comment="size of sticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleStickerStruct sticker_[stickerCount] <name="Stickers", read=(this.stickerId_), comment="type: Black.Save.Vehicle.SaveVehicleStickerStruct, count: Black::Physics::Vehicle::STICKER_COUNT_MAX", bgcolor=cDkYellow, optimize=false>;
    bool isUseSticker_ : 1 <name="Is Use Sticker", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleLooksStruct;

typedef struct Black_Save_Vehicle_SaveVehicleStatusStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    int padding;
    int32 rideStatus_ <name="Ride Status", comment="type: int32_t", bgcolor=cDkYellow>;
    DoubleVector3 pos_ <name="Position", comment="type: double count: 3", bgcolor=cDkYellow>;
    Vector4 rotate_ <name="Rotation", comment="type: SQEX.Luminous.Math.VectorA", bgcolor=cDkYellow>;
    float restFuel_ <name="Remaining Fuel", comment="type: float", bgcolor=cDkYellow>;
    float totalDistance_ <name="Total Distance", comment="type: float", bgcolor=cDkYellow>;
    int hp_ <name="HP", comment="type: int", bgcolor=cDkYellow>;
    int maxHp_ <name="Max HP", comment="type: int", bgcolor=cDkYellow>;
    int roofState_ <name="Roof State", comment="type: int", bgcolor=cDkYellow>;
    uint32 visitedParkingListCount <name="Visited Parking List Count", comment="size of visitedParkingList array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleVisitedParkingStruct visitedParkingList_[visitedParkingListCount] <name="Visited Parking List", comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleVisitedParkingStruct>", bgcolor=cDkYellow, optimize=false>;
    bool isFreeSelectDriveMode_ <name="Is Free Select Drive Mode", comment="type: bool", bgcolor=cDkYellow>;
    uint32 specLevelCount <name="Spec Level Count", comment="size of specLevel array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleSpecStruct specLevel_[specLevelCount] <name="Spec Levels", comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleSpecStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 looksCount <name="Looks Count", comment="size of looks array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleLooksStruct looks_[looksCount] <name="Looks", comment="type: Black.Save.Vehicle.SaveVehicleLooksStruct, count: Black::Physics::Vehicle::REGALIA_TYPE_COUNT_MAX", bgcolor=cDkYellow, optimize=false>;
    bool isAirCraft_ : 1 <name="Is Aircraft", comment="type: bool", bgcolor=cDkYellow>;
    FIXID albumId_ <name="Album ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID musicId_ <name="Music ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleStatusStruct;

typedef struct Black_Save_Vehicle_SaveVehicleCustomizeStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    uint32 unlockedBodyColorCount <name="Unlocked Body Color Count", comment="size of unlockedBodyColor array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleColorStruct unlockedBodyColor_[unlockedBodyColorCount] <name="Unlocked Body Colors", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleColorStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedInteriorColorCount <name="Unlocked Interior Color Count", comment="size of unlockedInteriorColor array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleColorStruct unlockedInteriorColor_[unlockedInteriorColorCount] <name="Unlocked Interior Colors", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleColorStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedTireColorCount <name="Unlocked Tire Color Count", comment="size of unlockedTireColor array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleColorStruct unlockedTireColor_[unlockedTireColorCount] <name="Unlocked Tire Colors", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleColorStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedSetStickerCount <name="Unlocked Set Sticker Count", comment="size of unlockedSetSticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleUnlockStruct unlockedSetSticker_[unlockedSetStickerCount] <name="Unlocked Set Stickers", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleUnlockStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedLeftStickerCount <name="Unlocked Left Sticker Count", comment="size of unlockedLeftSticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleUnlockStruct unlockedLeftSticker_[unlockedLeftStickerCount] <name="Unlocked Left Stickers", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleUnlockStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedRightStickerCount <name="Unlocked Right Sticker Count", comment="size of unlockedRightSticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleUnlockStruct unlockedRightSticker_[unlockedRightStickerCount] <name="Unlocked Right Stickers", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleUnlockStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedTopStickerCount <name="Unlocked Top Sticker Count", comment="size of unlockedTopSticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleUnlockStruct unlockedTopSticker_[unlockedTopStickerCount] <name="Unlocked Top Stickers", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleUnlockStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedFrontStickerCount <name="Unlocked Front Sticker Count", comment="size of unlockedFrontSticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleUnlockStruct unlockedFrontSticker_[unlockedFrontStickerCount] <name="Unlocked Front Stickers", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleUnlockStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedRearStickerCount <name="Unlocked Rear Sticker Count", comment="size of unlockedRearSticker array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleUnlockStruct unlockedRearSticker_[unlockedRearStickerCount] <name="Unlocked Rear Stickers", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehicleUnlockStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 unlockedPartsCount <name="Unlocked Parts Count", comment="size of unlockedParts array", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehiclePartsStruct unlockedParts_[unlockedPartsCount] <name="Unlocked Parts", read=(this.id_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Vehicle.SaveVehiclePartsStruct>", bgcolor=cDkYellow, optimize=false>;
    int lastUnlockedBodyColorNum_ <name="Last Unlocked Body Color Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedInteriorColorNum_ <name="Last Unlocked Interior Color Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedTireColorNum_ <name="Last Unlocked Tire Color Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedSetStickerNum_ <name="Last Unlocked Set Sticker Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedLeftStickerNum_ <name="Last Unlocked Left Sticker Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedRightStickerNum_ <name="Last Unlocked Right Sticker Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedTopStickerNum_ <name="Last Unlocked Top Sticker Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedFrontStickerNum_ <name="Last Unlocked Front Sticker Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedRearStickerNum_ <name="Last Unlocked Rear Sticker Number", comment="type: int", bgcolor=cDkYellow>;
    int lastUnlockedPartsStickerNum_ <name="Last Unlocked Parts Sticker Number", comment="type: int", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleCustomizeStruct;

typedef struct Black_Save_Vehicle_SaveVehicleStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    uint32 version_ <name="Version", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleStatusStruct status_ <name="Status", comment="type: Black.Save.Vehicle.SaveVehicleStatusStruct", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleCustomizeStruct customize_ <name="Customize", comment="type: Black.Save.Vehicle.SaveVehicleCustomizeStruct", bgcolor=cDkYellow>;
    int32 reserve_[4] <name="Reserve", comment="type: SQEX.Ebony.Std.DynamicArray<int>", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Vehicle_SaveVehicleStruct;

typedef struct Black_Save_Vehicle_SaveVehicleStruct2
{
    structid_t struct_id <bgcolor=cBlack>;
    Black_Save_Vehicle_SaveVehicleStatusStruct2 status_ <name="Status", comment="type: Black.Save.Vehicle.SaveVehicleStatusStruct2", bgcolor=cDkYellow>;
    Black_Save_Vehicle_SaveVehicleScore scores_ <name="Scores", comment="type: Black.Save.Vehicle.SaveVehicleScore", bgcolor=cDkYellow>;
} Black_Save_Vehicle_SaveVehicleStruct2;

typedef struct Black_Save_Fishing_SaveFishingEquipmentData
{
    structid_t struct_id <bgcolor=cBlack>;

    FIXID lureId_ <name="Lure ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID lineId_ <name="Line ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID rodId_ <name="Rod ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID reelId_ <name="Reel ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isLureEquipped_ : 1 <name="Is Lure Equipped", comment="type: bool", bgcolor=cDkYellow>;
    bool isLineEquipped_ : 1 <name="Is Line Equipped", comment="type: bool", bgcolor=cDkYellow>;
    bool isRodEquipped_ : 1 <name="Is Rod Equipped", comment="type: bool", bgcolor=cDkYellow>;
    bool isReelEquipped_ : 1 <name="Is Reel Equipped", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Fishing_SaveFishingEquipmentData;

typedef struct Black_Save_Fishing_SaveFishingLineData
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID lineId_ <name="Line ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    float remainStammina_ <name="Remaining Stamina", comment="type: float", bgcolor=cDkYellow>;
} Black_Save_Fishing_SaveFishingLineData;

typedef struct Black_Save_Fishing_SaveFishingGetFishData
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID fishId_ <name="Fish ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    float getMaxSize_ <name="Max Size", comment="type: float", bgcolor=cDkYellow>;
    int getCount_ <name="Get Count", comment="type: int", bgcolor=cDkYellow>;
    FIXID lureId_Rec_ <name="Lure ID Record", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int hour24_Rec_ <name="Hour 24 Record", comment="type: int", bgcolor=cDkYellow>;
    FIXID fishingSpotId_Rec_ <name="Fishing Spot ID Record", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
} Black_Save_Fishing_SaveFishingGetFishData;

typedef struct Black_Save_Fishing_SaveFishingStruct
{
    structid_t struct_id <bgcolor=cBlack>;

    uint32 saveVersion <name="Save Version", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 getFishCount <name="Get Fish Count", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 getFishListCount <name="Get Fish List Count", comment="size of getFishList array", bgcolor=cDkYellow>;
    Black_Save_Fishing_SaveFishingGetFishData getFishList[getFishListCount] <name="Fishing Record", read=(this.fishId_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Fishing.SaveFishingGetFishData>", bgcolor=cDkYellow, optimize=false>;
    int unk1; 
    uint32 lineInfoCount <name="Line Info Count", comment="size of lineInfoList array", bgcolor=cDkYellow>;
    Black_Save_Fishing_SaveFishingLineData lineInfoList[lineInfoCount] <name="Line Info List", read=(this.lineId_), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.Fishing.SaveFishingLineData>", bgcolor=cDkYellow, optimize=false>;
    Black_Save_Fishing_SaveFishingEquipmentData selectEquipment <name="Selected Equipment", comment="type: Black.Save.Fishing.SaveFishingEquipmentData", bgcolor=cDkYellow>;
} Black_Save_Fishing_SaveFishingStruct;

typedef struct Black_Save_EventScript_SaveEventScriptGroupDataStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    FIXID groupId <name="Group ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int64 lastElapsedGameTime <name="Last Elapsed Game Time", comment="type: int64_t", bgcolor=cDkYellow>;
} Black_Save_EventScript_SaveEventScriptGroupDataStruct;

typedef struct Black_Save_EventScript_SaveEventScriptSceneDataStruct
{
    structid_t struct_id <bgcolor=cBlack>;

    FIXID sceneId <name="Scene ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int64 lastElapsedGameTime <name="Last Elapsed Game Time", comment="type: int64_t", bgcolor=cDkYellow>;
} Black_Save_EventScript_SaveEventScriptSceneDataStruct;

typedef struct Black_Save_EventScript_SaveEventScriptStruct
{
    structid_t struct_id <bgcolor=cBlack>;
    uint32 saveEventScriptGroupDataStructListCount <name="Event Script Group Data Count", comment="size of saveEventScriptGroupDataStructList array", bgcolor=cDkYellow>;
    Black_Save_EventScript_SaveEventScriptGroupDataStruct saveEventScriptGroupDataStructList[saveEventScriptGroupDataStructListCount] <name="Event Script Group Data List", read=(this.groupId), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.EventScript.SaveEventScriptGroupDataStruct>", bgcolor=cDkYellow, optimize=false>;
    uint32 saveEventScriptSceneDataStructListCount <name="Event Script Scene Data Count", comment="size of saveEventScriptSceneDataStructList array", bgcolor=cDkYellow>;
    Black_Save_EventScript_SaveEventScriptSceneDataStruct saveEventScriptSceneDataStructList[saveEventScriptSceneDataStructListCount] <name="Event Script Scene Data List", read=(this.sceneId), comment="type: SQEX.Ebony.Std.DynamicArray<Black.Save.EventScript.SaveEventScriptSceneDataStruct>", bgcolor=cDkYellow, optimize=false>;
} Black_Save_EventScript_SaveEventScriptStruct;

typedef struct Black_Save_Mobhunt_SaveMobhuntPartsDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID partsId_ <name="Parts ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isDestructed_ : 1 <name="Is Destructed", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Mobhunt_SaveMobhuntPartsDataStruct;

typedef struct Black_Save_Mobhunt_SaveMobhuntVDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    int id_ <name="ID", comment="type: int", bgcolor=cDkYellow>;
    FIXID elementId_ <name="Element ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 partsDataCount <name="Parts Data Count", comment="size of partsData array", bgcolor=cDkYellow>;
    Black_Save_Mobhunt_SaveMobhuntPartsDataStruct partsData[partsDataCount] <name="Parts Data", read=(this.partsId_), comment="type: Black.Save.Mobhunt.SaveMobhuntPartsDataStruct", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Mobhunt_SaveMobhuntVDataStruct;

typedef struct Black_Save_Mobhunt_SaveMobhuntVDataStructNew {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    int id_ <name="ID", comment="type: int", bgcolor=cDkYellow>;
    FIXID elementId_ <name="Element ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 partsDataArrayCount <name="Parts Data Array Count", comment="size of partsDataArray array", bgcolor=cDkYellow>;
    Black_Save_Mobhunt_SaveMobhuntPartsDataStruct partsDataArray_[partsDataArrayCount] <name="Parts Data Array", read=(this.partsId_), comment="type: Black.Save.Mobhunt.SaveMobhuntPartsDataStruct", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Mobhunt_SaveMobhuntVDataStructNew;

typedef struct Black_Save_Mobhunt_SaveMobhuntDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id_ <name="ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isCleared_ : 1 <name="Is Cleared", comment="type: bool", bgcolor=cDkYellow>;
    bool isRecieved_ : 1 <name="Is Received", comment="type: bool", bgcolor=cDkYellow>;
    bool isReported_ : 1 <name="Is Reported", comment="type: bool", bgcolor=cDkYellow>;
    bool isKilledAll_ : 1 <name="Is Killed All", comment="type: bool", bgcolor=cDkYellow>;
    bool isNew_ : 1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
    uint32 mobhuntVDataNewArrayCount <name="Mobhunt VData New Array Count", comment="size of mobhuntVDataNewArray_", bgcolor=cDkYellow>;
    if (mobhuntVDataNewArrayCount != 0)
    {
        Black_Save_Mobhunt_SaveMobhuntVDataStructNew mobhuntVDataNewArray_[mobhuntVDataNewArrayCount] <name="Mobhunt VData New Array", read=(this.id_), comment="type: Black.Save.Mobhunt.SaveMobhuntVDataStructNew", bgcolor=cDkYellow, optimize=false>; //Not sure what triggers this generating, but the spam is bad if it hasnt registered any
    }        
    uint8 killCount0_ <name="Kill Count 0", comment="type: uint8_t", bgcolor=cDkYellow>;
    uint8 killCount1_ <name="Kill Count 1", comment="type: uint8_t", bgcolor=cDkYellow>;
    uint8 killCount2_ <name="Kill Count 2", comment="type: uint8_t", bgcolor=cDkYellow>;
} Black_Save_Mobhunt_SaveMobhuntDataStruct;

typedef struct Black_Save_Mobhunt_SaveMobhuntStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID dinnerId_ <name="Dinner ID", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 mobhuntDataCount <name="Mobhunt Data Count", comment="size of mobhuntData array", bgcolor=cDkYellow>;
    Black_Save_Mobhunt_SaveMobhuntDataStruct mobhuntData[mobhuntDataCount] <name="Mobhunt Data", read=(this.id_), comment="type: Black.Save.Mobhunt.SaveMobhuntDataStruct", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Mobhunt_SaveMobhuntStruct;

typedef struct Black_Save_Mobhunt_SaveMobhuntMainStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 version_ <name="Version", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 mobhuntDinnerDataCount <name="Mobhunt Dinner Data Count", comment="size of mobhuntDinnerData array", bgcolor=cDkYellow>;
    Black_Save_Mobhunt_SaveMobhuntStruct mobhuntDinnerData[mobhuntDinnerDataCount] <name="Mobhunt Dinner Data", read=(this.dinnerId_), comment="type: Black.Save.Mobhunt.SaveMobhuntStruct", bgcolor=cDkYellow, optimize=false>;
    int killCount_ <name="Kill Count", comment="type: int", bgcolor=cDkYellow>;
    int killCount1_ <name="Kill Count 1", comment="type: int", bgcolor=cDkYellow>;
    int killCount2_ <name="Kill Count 2", comment="type: int", bgcolor=cDkYellow>;
    FIXID currenDinnerId_ <name="Current Dinner ID", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 rank_ <name="Rank", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 exp_ <name="Experience", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 currentDinnerQuestTargetId_ <name="Current Dinner Quest Target ID", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 mobhuntVDataCount <name="Mobhunt VData Count", comment="size of mobhuntVData array", bgcolor=cDkYellow>;
    Black_Save_Mobhunt_SaveMobhuntVDataStruct mobhuntVData[mobhuntVDataCount] <name="Mobhunt VData", read=(this.id_), comment="type: Black.Save.Mobhunt.SaveMobhuntVDataStruct", bgcolor=cDkYellow, optimize=false>;
    bool isFistMobhuntClear_ : 1 <name="Is First Mobhunt Clear", comment="type: bool", bgcolor=cDkYellow>;
    bool isAdamanClear_ : 1 <name="Is Adaman Clear", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Mobhunt_SaveMobhuntMainStruct;

typedef struct Black_Save_Player_SaveStatusStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 id <name="CharaParamId", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 party_index <name="party_index", comment="type: int32_t", bgcolor=cDkGreen>;
    bool join : 1 <name="join", comment="type: bool", bgcolor=cDkGreen>;
    bool joined : 1 <name="joined", comment="type: bool", bgcolor=cDkGreen>;
    SortieStatus sortie <name="sortie", comment="type: Black.Actor.SORTIE_STATUS", bgcolor=cDkGreen>;
    bool disable_sortie : 1 <name="disable_sortie", comment="type: bool", bgcolor=cDkGreen>;
    bool menu_invisible : 1 <name="menu_invisible", comment="type: bool", bgcolor=cDkGreen>;
    bool immortal : 1 <name="immortal", comment="type: bool", bgcolor=cDkGreen>;
    bool pinch_available : 1 <name="pinch_available", comment="type: bool", bgcolor=cDkGreen>;
    bool damage_limit_over : 1 <name="damage_limit_over", comment="type: bool", bgcolor=cDkGreen>;
    bool parameter_limit_over : 1 <name="parameter_limit_over", comment="type: bool", bgcolor=cDkGreen>;
    int32 pinch_time <name="pinch_time", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 pinch_no_hit_time <name="pinch_no_hit_time", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 pinch_recover_no_hit_time <name="pinch_recover_no_hit_time", comment="type: int32_t", bgcolor=cDkGreen>;
    bool recover_non_battle_only <name="recover_non_battle_only", comment="type: bool", bgcolor=cDkGreen>;
    int32 hp <name="hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 hp_max <name="hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 maximum_hp_max <name="maximum_hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 minimum_hp_max <name="minimum_hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 maximum_hp_max_buffer <name="maximum_hp_max_buffer", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_minimum_hp_max <name="ratio_minimum_hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_auto_recover_hp <name="ratio_auto_recover_hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_pinch_damage_hp_max <name="ratio_pinch_damage_hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_poison_damage_hp <name="ratio_poison_damage_hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_poison_damage_hp_max <name="ratio_poison_damage_hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_pinch_poison_hp_max <name="ratio_pinch_poison_hp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_deadly_poison_damage_hp <name="ratio_deadly_poison_damage_hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_burning_damage_hp <name="ratio_burning_damage_hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_frigid_damage_hp <name="ratio_frigid_damage_hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_ring_damage_hp <name="ratio_ring_damage_hp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_auto_recover_mp <name="ratio_auto_recover_mp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_armed_form_use_mp <name="ratio_armed_form_use_mp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_death_use_mp <name="ratio_death_use_mp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 ratio_holy_use_mp <name="ratio_holy_use_mp", comment="type: int32_t", bgcolor=cDkGreen>;
    float death_sentence <name="death_sentence", comment="type: float", bgcolor=cDkGreen>;
    int32 hp_bonus <name="hp_bonus", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 mp <name="mp", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 mp_max <name="mp_max", comment="type: int32_t", bgcolor=cDkGreen>;
    float ep <name="ep", comment="type: float", bgcolor=cDkGreen>;
    float ep_max <name="ep_max", comment="type: float", bgcolor=cDkGreen>;
    float stamina <name="stamina", comment="type: float", bgcolor=cDkGreen>;
    float stamina_max <name="stamina_max", comment="type: float", bgcolor=cDkGreen>;
    uint32 level <name="level", comment="type: uint32_t", bgcolor=cDkGreen>;
    uint32 level_cap <name="level_cap", comment="type: uint32_t", bgcolor=cDkGreen>;
    uint32 level_max <name="level_max", comment="type: uint32_t", bgcolor=cDkGreen>;
    int32 strength <name="strength", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 vitality <name="vitality", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 magic <name="magic", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 spirit <name="spirit", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 critical <name="critical", comment="type: int32_t", bgcolor=cDkGreen>;
    uint32 element_attack <name="element_attack", comment="type: uint32_t", bgcolor=cDkGreen>;
    uint32 element_absorption <name="element_absorption", comment="type: uint32_t", bgcolor=cDkGreen>;
    uint32 element_invalidity <name="element_invalidity", comment="type: uint32_t", bgcolor=cDkGreen>;    
   
    uint32 elementTolerenceCount;
    typedef struct enumElementTolerenceField(int32 val) {
        local STATUS_ELEMENT Name = val;
        int16 value;
    } EnumeratedElementTolerence<name=EnumToString(this.Name), read=this.value>;
    struct elementTolerenceStruct { 
      local int32 i <hidden=true>;
      for(i = 0; i < elementTolerenceCount; i++) {
        EnumeratedElementTolerence reserved(i);
      }
    }elementTolerence;
    uint32 status_auto <name="status_auto", comment="type: uint32_t", bgcolor=cDkGreen>;
    uint32 status <name="status", comment="type: uint32_t", bgcolor=cDkGreen>;    
    uint32 status_attackCount;
    typedef struct enumStatusField(int32 val) {
        local STATUS_NORMAL Name = val;
        uint8 value;
    } EnumeratedStatus<name=EnumToString(this.Name), read=this.value>;
    struct statusAttackStruct { 
      local int32 i <hidden=true>;
      for(i = 0; i < status_attackCount; i++) {
        EnumeratedStatus reserved(i);
      }
    }statusAttack<name="Status Attack">;
    uint32 status_DefenceCount;
	struct statusDefenceStruct { 
      local int32 i <hidden=true>;
      for(i = 0; i < status_DefenceCount; i++) {
        EnumeratedStatus reserved(i);
      }
    }statusDefence<name="Status Defence">;    
    uint64 status_count_auto <name="status_count_auto", comment="type: uint64_t", bgcolor=cDkGreen>;    
    uint32 status_countCount;
    typedef struct enumStatusCountField(int32 val) {
        local STATUS_COUNT Name = val;
        int8 value;
    } EnumeratedStatusCount<name=EnumToString(this.Name), read=this.value>;
    
    struct statusCountStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countCount; i++) {
            EnumeratedStatusCount reserved(i - 1);
        }
    } statusCount;    
    uint32 status_countAttackCount;
    typedef struct enumStatusCountAttackField(int32 val) {
        local STATUS_COUNT Name = val;
        uint8 value;
    } EnumeratedStatusCountAttack<name=EnumToString(this.Name), read=this.value>;    
    struct statusCountAttackStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countAttackCount; i++) {
            EnumeratedStatusCountAttack reserved(i - 1);
        }
    } statusCountAttack;    
    uint32 status_countAttackTimeCount;
    typedef struct enumStatusCountAttackTimeField(int32 val) {
        local STATUS_COUNT Name = val;
        int8 value;
    } EnumeratedStatusCountAttackTime<name=EnumToString(this.Name), read=this.value>;    
    struct statusCountAttackTimeStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countAttackTimeCount; i++) {
            EnumeratedStatusCountAttackTime reserved(i - 1);
        }
    } statusCountAttackTime;    
    uint32 status_countDefenceCount;
    typedef struct enumStatusCountDefenceField(int32 val) {
        local STATUS_COUNT Name = val;
        uint8 value;
    } EnumeratedStatusCountDefence<name=EnumToString(this.Name), read=this.value>;    
    struct statusCountDefenceStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countDefenceCount; i++) {
            EnumeratedStatusCountDefence reserved(i - 1);
        }
    } statusCountDefence;    
    uint32 status_countDefenseTimeCount;
    typedef struct enumStatusCountTimeField(int32 val) {
        local STATUS_COUNT Name = val;
        uint16 value;
    } EnumeratedStatusCountTime<name=EnumToString(this.Name), read=this.value>;    
    struct statusCountTimeStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countDefenseTimeCount; i++) {
            EnumeratedStatusCountTime reserved(i - 1);
        }
    } statusCountTime;    
    uint32 status_countDeltaTimeCount;
    typedef struct enumStatusCountDeltaTimeField(int32 val) {
        local STATUS_COUNT Name = val;
        float value;
    } EnumeratedStatusCountDeltaTime<name=EnumToString(this.Name), read=this.value>;    
    struct statusCountDeltaTimeStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countDeltaTimeCount; i++) {
            EnumeratedStatusCountDeltaTime reserved(i - 1);
        }
    } statusCountDeltaTime;    
    uint32 status_countRecordCount;
    typedef struct enumStatusCountRecordField(int32 val) {
        local STATUS_COUNT Name = val;
        uint8 value;
    } EnumeratedStatusCountRecord<name=EnumToString(this.Name), read=this.value>;    
    struct statusCountRecordStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < status_countRecordCount; i++) {
            EnumeratedStatusCountRecord reserved(i - 1);
        }
    } statusCountRecord;
    int32 buff_registration_count <name="buff_registration_count", comment="type: int32_t", bgcolor=cDkGreen>;
    uint32 Black_Actor_BuffEquipmentAmount;
    SaveBuffStruct buff[Black_Actor_BuffEquipmentAmount] <name="buff", comment="type: Black.Save.Player.SaveBuffStruct", bgcolor=cDkGreen>;    
    uint32 buffAmount;
    typedef struct buffCountField(int32 val) {
        local BUFF Name = val;
        int32 value;
    } EnumeratedBuffCount<name=EnumToString(this.Name), read=this.value>;    
    struct buffCountStruct { 
        local int32 i <hidden=true>;
        for(i = 0; i < buffAmount; i++) {
            EnumeratedBuffCount reserved(i);
        }
    } buffCount;
    float buff_time <name="buff_time", comment="type: float", bgcolor=cDkGreen>;
    float start_buff_time <name="start_buff_time", comment="type: float", bgcolor=cDkGreen>;
    float mp_burst_time <name="mp_burst_time", comment="type: float", bgcolor=cDkGreen>;
    float mp_burst_time_max <name="mp_burst_time_max", comment="type: float", bgcolor=cDkGreen>;
    float element_damage_time <name="element_damage_time", comment="type: float", bgcolor=cDkGreen>;
    WEAPON_ATTACK weapon_use_number <name="weapon_use_number", comment="type: Black.Actor.WEAPON_ATTACK", bgcolor=cDkGreen>;
    int32 weapon_slot_amount <name="weapon_slot_amount", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 knights_of_eos <name="knights_of_eos", comment="type: int32_t", bgcolor=cDkGreen>;
    bool age : 1 <name="age", comment="type: bool", bgcolor=cDkGreen>;
    bool injured : 1 <name="injured", comment="type: bool", bgcolor=cDkGreen>;
    bool child : 1 <name="child", comment="type: bool", bgcolor=cDkGreen>;
    bool miners : 1 <name="miners", comment="type: bool", bgcolor=cDkGreen>;
    bool first_person : 1 <name="first_person", comment="type: bool", bgcolor=cDkGreen>;
    bool friend_control : 1 <name="friend_control", comment="type: bool", bgcolor=cDkGreen>;
    bool jacket_off : 1 <name="jacket_off", comment="type: bool", bgcolor=cDkGreen>;
    bool tears : 1 <name="tears", comment="type: bool", bgcolor=cDkGreen>;
    bool ring : 1 <name="ring", comment="type: bool", bgcolor=cDkGreen>;
    bool ability_available : 1 <name="ability_available", comment="type: bool", bgcolor=cDkGreen>;
    float dirty <name="dirty", comment="type: float", bgcolor=cDkGreen>;
    uint32 abilityEquipmentAmount;
    SaveAbilityEquipmentStruct ability[abilityEquipmentAmount] <name="ability", read=(this.equipmentAbility), comment="type: Black.Save.Ability.SaveAbilityEquipmentStruct", bgcolor=cDkGreen>;
    uint32 equipmentMenuAmount;
    SaveAbilityEquipmentMenuStruct ability_menu[equipmentMenuAmount] <name="ability_menu", read=(this.equipmentMenuAbility), comment="type: Black.Save.Ability.SaveAbilityEquipmentMenuStruct", bgcolor=cDkGreen>;
    uint32 weaponAttackAmount;
    SaveWeaponEquipmentStruct weapon[weaponAttackAmount] <name="weapon", read=(this.weaponFixid), comment="type: Black.Save.Equipment.SaveWeaponEquipmentStruct", bgcolor=cDkGreen>;
    SaveJobCommandEquipmentStruct job_command <name="job_command", read=(this.jobCommand), comment="type: Black.Save.Ability.SaveJobCommandEquipmentStruct", bgcolor=cDkGreen>;
    uint32 AccessoryEquipmentAmount;
    SaveWeaponEquipmentStruct accessory[AccessoryEquipmentAmount] <name="accessory", read=(this.weaponFixid), comment="type: Black.Save.Equipment.SaveWeaponEquipmentStruct", bgcolor=cDkGreen>;
    uint32 ClothEquipmentAmount;
    SaveClothEquipmentStruct cloth[ClothEquipmentAmount] <name="cloth", read=(this.clothFixid), comment="type: Black.Save.Equipment.SaveClothEquipmentStruct", bgcolor=cDkGreen>;
    int32 reserve1 <name="reserve1", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve2 <name="reserve2", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve3 <name="reserve3", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve4 <name="reserve4", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve5 <name="reserve5", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve6 <name="reserve6", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve7 <name="reserve7", comment="type: int32_t", bgcolor=cDkGreen>;
    int32 reserve8 <name="reserve8", comment="type: int32_t", bgcolor=cDkGreen>;   
} Black_Save_Player_SaveStatusStruct;

typedef struct Black_Save_Player_SavePlayerStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    Assert(struct_id == 0x5D01AC46C823F725); 
    FIXID object_entry_id<name="ObjectEntryId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID character_entry_id<name="CharacterEntryId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    FIXID default_character_entry_id<name="DefaultCharacterEntryId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    string_t name <name="Name", comment="type: char, count: Black::Actor::ACTOR_NAME_LENGTH", bgcolor=cDkYellow>;
    FIXID name_id <name="NameFIXID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    Black_Save_Player_SaveStatusStruct Status<name="Status", comment="type: Black.Save.Player.SaveStatusStruct", bgcolor=cDkYellow>;   
    Black_Save_Player_SavePlayerStatusStruct player_status<name="PlayerStatus", comment="type: Black.Save.Player.SavePlayerStatusStruct", bgcolor=cDkYellow>;
    struct Weapon_Attack_Struct {
        local int32 i <hidden=true>;
        for (i = 0; i < WEAPON_ATTACK_AMOUNT; i++) {
            typedef struct Enum_Weapon_Attack_Field(int32 val) {
                local WEAPON_ATTACK WeaponAttackType = val;
                WEAPON_TYPE WeaponType;
            } Enumerated_Weapon_Attack <name=EnumToString(this.WeaponAttackType), read=EnumToString(this.WeaponType)>;
            Enumerated_Weapon_Attack weaponAttack(i);
        }
    } weapon_Attack_Struct<name="WeaponType", comment="type: Black.Actor.WEAPON_TYPE, count: Black.Actor.WEAPON_ATTACK_AMOUNT", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_ABILITY_AMOUNT;
    Black_Save_Ability_SaveAbilityStruct ability[Black_Save_SAVE_ABILITY_AMOUNT]<name="Ability", read=(this.ability_id), comment="type: Black.Save.Ability.SaveAbilityStruct, count: Black::Save::SAVE_ABILITY_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Actor_ABILITY_TYPE_AMOUNT;
    SaveAbilityCountStruct ability_count[Black_Actor_ABILITY_TYPE_AMOUNT]<name="AbilityCount", comment="type: Black.Save.Ability.SaveAbilityCountStruct, count: Black::Actor::ABILITY_TYPE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Actor_ABILITY_EFFECT_AMOUNT;
    Black_Save_Ability_SaveAbilityEffectCountStruct ability_effect_count[Black_Actor_ABILITY_EFFECT_AMOUNT]<name="AbilityEffectCount", comment="type: Black.Save.Ability.SaveAbilityEffectCountStruct, count: Black::Actor::ABILITY_TYPE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Actor_WEAPON_ABILITY_AMOUNT;
    Black_Save_Ability_SaveEnchantCountStruct weapon_ability[Black_Actor_WEAPON_ABILITY_AMOUNT]<name="WeaponAbility", comment="type: Black.Save.Ability.SaveEnchantCountStruct, count: Black::Actor::ABILITY_TYPE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_JOB_COMMAND_AMOUNT;
    Black_Save_Ability_SaveJobCommandStruct job_command[Black_Save_SAVE_JOB_COMMAND_AMOUNT]<name="JobCommand", read=(this.id), comment="type: Black.Save.Ability.SaveJobCommandStruct, count: Black::Save::SAVE_JOB_COMMAND_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_INSPIRATION_AMOUNT;
    Black_Save_Ability_SaveInspirationStruct inspiration[Black_Save_SAVE_INSPIRATION_AMOUNT]<name="Inspiration", read=(this.id), comment="type: Black.Save.Ability.SaveInspirationStruct, count: Black::Save::SAVE_INSPIRATION_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_INSPIRATION_CHECK_AMOUNT;
    Black_Save_Ability_SaveInspirationCheckStruct inspiration_check[Black_Save_SAVE_INSPIRATION_CHECK_AMOUNT]<name="InspirationCheck", comment="type: Black.Save.Ability.SaveInspirationCheckStruct, count: Black::Save::SAVE_INSPIRATION_CHECK_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_Save_SAVE_INSPIRATION_ELEMENT_AMOUNT;
    Black_Save_Ability_SaveInspirationElementCheckStruct inspiration_element_check[Black_Save_SAVE_INSPIRATION_ELEMENT_AMOUNT]<name="InspirationElementCheck", comment="type: Black.Save.Ability.SaveInspirationElementCheckStruct, count: Black::Save::SAVE_INSPIRATION_ELEMENT_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    Black_Save_Ability_SaveSkillStruct skill<name="Skill", read=(this.id), comment="type: Black.Save.Ability.SaveSkillStruct", bgcolor=cDkYellow>;
    Black_Save_Player_SavePlayerPositionStruct position<name="Position", comment="type: Black.Save.Player.SavePlayerPositionStruct", bgcolor=cDkYellow>;
} SavePlayerStruct;

typedef struct Black_Save_Player_SaveDataStruct
{
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    int32 gameVersion<name="GameVersion", comment="type: int32_t", bgcolor=cDkGreen>;
    int64 startTime<name="Time Stamp Upper", comment="type: SQEX.Ebony.Base.Timer.TimeStamp", bgcolor=cDkGreen>;
    int64 endTime<name="Time Stamp Lower", comment="type: SQEX.Ebony.Base.Timer.TimeStamp", bgcolor=cDkGreen>;
    uint32 player_count;    
    struct Save_Player_Struct {
        local int32 i <hidden=true>;
        for (i = 0; i < player_count; i++) {
            typedef struct Enum_Save_Player_Field(int32 val) {
                local SAVE_PLAYER Name = val;
                SavePlayerStruct playerData;
            } Enumerated_Save_Player<name=EnumToString(this.Name)>;
            Enumerated_Save_Player reserved(i);
        }
    } save_Player_Struct<name="Player", comment="type: Black.Save.Player.SavePlayerStruct, count: Black::Save::SAVE_PLAYER_AMOUNT", bgcolor=cDkGreen, optimize=false>;
} Black_Save_Player_SaveDataStruct;		

typedef struct BLACK_SAVE_PARTY_SAVEPARTYDATASTRUCT
{ 
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    SAVE_PLAYER usercontrol_player_save_number<name="UsercontrolPlayerSaveNumber", comment="type: Black.Save.SAVE_PLAYER", bgcolor=cDkYellow>;
    int32 chapter<name="Chapter", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 gil<name="Gil", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 medal<name="Medal", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 coin<name="Coin", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 ability_point<name="AbilityPoint", comment="type: int32_t", bgcolor=cDkYellow>;
    uint32 rewardCount;
    struct RewardCountStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < rewardCount; i++) {
            typedef struct enumRewardCountField(int32 val) {
                local REWARD_TIMING Name = val;
                int32 value;
            } EnumeratedRewardCount<name=EnumToString(this.Name), read=this.value>;
            EnumeratedRewardCount reserved(i);
        }
    } rewardCountStruct<name="RewardCount", comment="type: int32_t, count: Black::Actor::REWARD_TIMING_AMOUNT", bgcolor=cDkYellow>;
    uint32 clearCount;
    struct ClearCountStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < clearCount; i++) {
            typedef struct enumClearCountField(int32 val) {
                local NEW_GAME_MODE Name = val;
                int32 value;
            } EnumeratedClearCount<name=EnumToString(this.Name), read=this.value>;
            EnumeratedClearCount reserved(i);
        }
    } clearCountStruct<name="ClearCount", comment="type: int32_t, count: Black::Save::NEW_GAME_MODE_AMOUNT", bgcolor=cDkYellow>;
    bool newgame_plus : 1 <name="NewGamePlus", comment="type: bool", bgcolor=cDkYellow>;
    bool premium_camera_status : 1 <name="PremiumCameraStatus", comment="type: bool", bgcolor=cDkYellow>;
    bool premium_camera_equipment : 1 <name="PremiumCameraEquipment", comment="type: bool", bgcolor=cDkYellow>;
    uint32 elementPowerCount;    
    struct ElementPowerStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < elementPowerCount; i++) {
            typedef struct enumElementPowerField(int32 val) {
                local STATUS_ELEMENT Name = val;
                float value;
            } EnumeratedElementPower<name=EnumToString(this.Name), read=this.value>;
            EnumeratedElementPower reserved(i);
        }
    } elementPowerStruct<name="ElementPower", comment="type: float, count: Black::Actor::STATUS_ELEMENT_AMOUNT", bgcolor=cDkYellow>;
    float phantom_gauge<name="PhantomGauge", comment="type: float", bgcolor=cDkYellow>;
    float phantom_gauge_max<name="PhantomGaugeMax", comment="type: float", bgcolor=cDkYellow>;
    bool job_command_available : 1<name="JobCommandAvailable", comment="type: bool", bgcolor=cDkYellow>;
    float job_command_gauge<name="JobCommandGauge", comment="type: float", bgcolor=cDkYellow>;
    float job_command_gauge_max<name="JobCommandGaugeMax", comment="type: float", bgcolor=cDkYellow>;
    int32 strategy_probability<name="StrategyProbability", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID camp_point_fixid<name="CampPointFixid", comment="type: SQEX.Ebony.Std.Fixid (uint32)", bgcolor=cDkYellow>;
    string_t camp_point_area_file_path<name="CampPointAreaFilePath", comment="type: Ebony.Base.String", bgcolor=cDkYellow>;
    bool isLoopDungeon : 1<name="IsLoopDungeon", comment="type: bool", bgcolor=cDkYellow>;
    int32 loopDungeonLevel<name="LoopDungeonLevel", comment="type: int32_t", bgcolor=cDkYellow>;
    FIXID before_camp_point_fixid<name="BeforeCampPointFixid", comment="type: SQEX.Ebony.Std.Fixid (uint32)", bgcolor=cDkYellow>;
    int32 link_count<name="LinkCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 death_count<name="DeathCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 kill_count<name="KillCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 picture_count<name="PictureCount", comment="type: int32_t", bgcolor=cDkYellow>;
    int64 world_time<name="WorldTime", comment="type: int64_t", bgcolor=cDkYellow>;
    int64 total_seconds<name="TotalSeconds", comment="type: int64_t", bgcolor=cDkYellow>;
    string_t weather_key<name="WeatherKey", comment="type: Ebony.Base.String", bgcolor=cDkYellow>;
    WeatherType weather_type<name="WeatherType", comment="type: Black.Weather.WeatherType", bgcolor=cDkYellow>;
    uint32 weather_index_command<name="WeatherIndexCommand", comment="type: uint32_t", bgcolor=cDkYellow>;
    MOVE_DISTANCE_TYPE move_distance_type<name="MoveDistanceType", comment="type: Black.Save.MOVE_DISTANCE_TYPE", bgcolor=cDkYellow>;
    uint32 move_count;
    struct MoveStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < move_count; i++) {
            typedef struct enumMoveField(int32 val) {
                local MOVE_DISTANCE_TYPE Name = val;
                SaveMoveDistanceStruct moveData;
            } EnumeratedMove<name=EnumToString(this.Name)>;
            EnumeratedMove reserved(i);
        }
    } moveStruct<name="Move", comment="type: Black.Save.Party.SaveMoveDistanceStruct, count: Black::Save::MOVE_DISTANCE_TYPE_AMOUNT", bgcolor=cDkYellow>;
    int battle_result_rank<name="BattleResultRank", comment="type: int, count: Black::Battle::BattleModeManager::RESULT_ITEM_AMOUNT", bgcolor=cDkYellow>;
    int battle_result_count<name="BattleResultCount", comment="type: int", bgcolor=cDkYellow>;
    DoubleVector4 camp_point_<name="CampPoint", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkYellow>;
    DoubleVector4 before_camp_point_<name="BeforeCampPoint", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkYellow>;
    DoubleVector4 loopDungeonBasePoint_<name="LoopDungeonBasePoint", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkYellow>;
    DoubleVector4 loopDungeonCampPoint_<name="LoopDungeonCampPoint", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkYellow>;    
    int32 reserve1<name="Reserve1", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve2<name="Reserve2", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve3<name="Reserve3", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve4<name="Reserve4", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve5<name="Reserve5", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve6<name="Reserve6", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve7<name="Reserve7", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 reserve8<name="Reserve8", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 unk[8]; 
} Black_Save_Party_SavePartyDataStruct;

typedef struct Black_Save_Party_SavePartyStruct
{  
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 Black_Save_SAVE_PARTY_AMOUNT;
    Black_Save_Party_SavePartyMemberStruct member[Black_Save_SAVE_PARTY_AMOUNT] <name="Party Member", read=(this.save_bank_number), comment="type: Black.Save.Party.SavePartyMemberStruct, count: Black::Save::SAVE_PARTY_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 Black_AI_Buddy_JOB_NUM;    
    struct JobStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_AI_Buddy_JOB_NUM; i++) {
            typedef struct EnumJobField(int32 val) {
                local JOB_TYPE Name = val;
                Black_Save_Party_SaveJobStruct jobData;
            } EnumeratedJob<name=EnumToString(this.Name)>;
            EnumeratedJob reserved(i);
        }
    } jobStruct<name="Job", comment="type: Black.Save.Party.SaveJobStruct, count: Black::AI::Buddy::JOB_NUM", bgcolor=cDkYellow, optimize=false>;
    SaveAbilityCountStruct ability_count <name="AbilityCount", comment="type: Black.Save.Ability.SaveAbilityCountStruct", bgcolor=cDkYellow>;
    Black_Save_Ability_SaveAbilityEffectCountStruct ability_effect_count <name="AbilityEffectCount", comment="type: Black.Save.Ability.SaveAbilityEffectCountStruct", bgcolor=cDkYellow>;
    uint32 Black_Actor_ABILITY_AMOUNT;    
    struct AbilityInformationStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_Actor_ABILITY_AMOUNT; i++) {
            typedef struct enumAbilityInfoField(int32 val) {
                local ABILITY_ENUM Name = val;
                Black_Save_Ability_SaveAbilityInformationStruct abilityData;
            } EnumeratedAbilityInfo<name=EnumToString(this.Name)>;
            EnumeratedAbilityInfo reserved(i);
        }
    } abilityInformationStruct<name="AbilityInformation", comment="type: Black.Save.Ability.SaveAbilityInformationStruct, count: Black::Actor::ABILITY_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    Black_Save_Party_SavePartyDataStruct data <name="Party Data", comment="type: Black.Save.Party.SavePartyDataStruct", bgcolor=cDkYellow>;
    uint32 Black_Save_SYSTEM_TOGGLE_AMOUNT;
    struct SystemToggleStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_Save_SYSTEM_TOGGLE_AMOUNT; i++) {
            typedef struct EnumSystemToggleField(int32 val) {
                local SYSTEM_TOGGLE Name = val;
                Black_Save_Party_SaveSystemToggleStruct systemtoggleData; 
            } EnumeratedSystemToggle<name=EnumToString(this.Name)>;
            EnumeratedSystemToggle reserved(i);
        }
    } SystemToggle<name="System Toggles", optimize=false>;
    uint32 Black_Save_SAVE_TROPHY_AMOUNT;
    Black_Save_Party_SaveTrophyStruct trophy[Black_Save_SAVE_TROPHY_AMOUNT] <name="Trophy", read=(this.exist == 0 ? "false" : "true"), comment="type: Black.Save.Party.SaveTrophyStruct, count: Black::Save::SAVE_TROPHY_AMOUNT", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Party_SavePartyStruct;

typedef struct Black_Save_Snapshot_SaveSnapshotImageInfoStruct
{
    structid_t structId <name="Struct ID", comment="type: uint32_t", bgcolor=cBlack>;
    uint32 snapId <name="Snapshot ID", comment="type: uint32_t", bgcolor=cDkGreen>;
    uint32 attributesFieldCount <name="Attributes Field Count", comment="type: uint32_t", bgcolor=cDkGreen>;    
    if (attributesFieldCount != 0)
    {
        FIXID attributesField[attributesFieldCount] <name="Snapshot Attribute ID", comment="type: Luminous.Std.DynamicArray<SQEX.Ebony.Std.Fixid>", bgcolor=cDkGreen>;
    }    
    uint64 snapTime <name="Snapshot Time", comment="type: int64_t", bgcolor=cDkGreen>;
    int32 photoLayerId <name="Photo Layer ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkGreen>;
    DoubleVector4 worldPosition <name="World Position", comment="type: Luminous.Math.DoubleVector4", bgcolor=cDkGreen>;
    uint8 importantType <name="Important Type", comment="type: uint8_t", bgcolor=cDkGreen>;
    uint8 phaseType <name="Phase Type", comment="type: uint8_t", bgcolor=cDkGreen>;
    bool isMarked <name="Is Marked", comment="type: bool", bgcolor=cDkGreen>;
    FIXID photoJenre <name="Photo Genre", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkGreen>;
    uint32 targetIdCount <name="Target ID Count", comment="type: uint32_t", bgcolor=cDkGreen>;
    FIXID targetIds[targetIdCount] <name="Target IDs", comment="type: SQEX.Ebony.Std.Fixid, count=3", bgcolor=cDkGreen>;
} Black_Save_Snapshot_SaveSnapshotImageInfoStruct;

typedef struct BLACK_SAVE_SNAPSHOT_SAVESNAPSHOTIMAGEINFOCONTAINERSTRUCT
{
    structid_t structId<bgcolor=cBlack>;
    uint32 snapShotCount<bgcolor=cDkGreen>;
    if (snapShotCount != 0)
    {
           Black_Save_Snapshot_SaveSnapshotImageInfoStruct blackSaveSnapshotSaveSnapshotImageInfoStruct[snapShotCount]<name="Snapshot Image Info", read=(this.snapId), optimize=false>;
    }
}Black_Save_Snapshot_SaveSnapshotImageInfoContainerStruct;

typedef struct Black_Save_Summon_SaveSummonDataStruct
{
    structid_t structId<bgcolor=cBlack>;
    SAVE_SUMMON id <name="Id", comment="type: Black.Save.SAVE_SUMMON", bgcolor=cDkYellow>;
    string_t name<name="Name", comment="type: char, count: Black::Actor::ACTOR_NAME_LENGTH", bgcolor=cDkYellow>;
    FIXID name_id <name="NameId", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool name_overwrite_flag : 1 <name="NameOverwriteFlag", comment="type: bool", bgcolor=cDkYellow>;
    bool exist : 1 <name="Exist", comment="type: bool", bgcolor=cDkYellow>;
    uint32 reserve1 <name="Reserve1", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 reserve2 <name="Reserve2", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 reserve3 <name="Reserve3", comment="type: uint32_t", bgcolor=cDkYellow>;
    uint32 reserve4 <name="Reserve4", comment="type: uint32_t", bgcolor=cDkYellow>;
} Black_Save_Summon_SaveSummonDataStruct;

typedef struct Black_Save_Summon_SaveSummonStruct
{
    structid_t structId<bgcolor=cBlack>;
    int32 summon_amount <name="SummonAmount", comment="type: int32_t", bgcolor=cDkYellow>;
    uint16 year <name="Year", comment="type: uint16_t", bgcolor=cDkYellow>;
    uint8 month <name="Month", comment="type: uint8_t", bgcolor=cDkYellow>;
    uint8 day <name="Day", comment="type: uint8_t", bgcolor=cDkYellow>;
    uint8 hour <name="Hour", comment="type: uint8_t", bgcolor=cDkYellow>;
    uint8 minute <name="Minute", comment="type: uint8_t", bgcolor=cDkYellow>;
    uint32 Black_Save_SAVE_SUMMON_BUFFER_AMOUNT;    
    struct SummonStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < Black_Save_SAVE_SUMMON_BUFFER_AMOUNT; i++) {
            typedef struct enumSummonField(int32 val) {
                local SAVE_SUMMON Name = val;
                Black_Save_Summon_SaveSummonDataStruct summonData;
            } EnumeratedSummon<name=EnumToString(this.Name)>;
            EnumeratedSummon reserved(i);
        }
    } summonStruct<name="Summon", comment="type: Black.Save.Summon.SaveSummonDataStruct, count: Black::Save::SAVE_SUMMON_BUFFER_AMOUNT", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Summon_SaveSummonStruct;

typedef struct Black_Save_AbilityTree_SaveAbilityTreeEntityStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID enableAbilityTreeEntityId <name="Enable Ability Tree Entity ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int abilityBankNumber <name="Ability Bank Number", comment="type: int", bgcolor=cDkYellow>;
} Black_Save_AbilityTree_SaveAbilityTreeEntityStruct;

typedef struct Black_Save_AbilityTree_SaveAbilityTreeStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 enableAbilityTreeEntityListCount <name="Enable Ability Tree Entity List Count", comment="size of enableAbilityTreeEntityList array", bgcolor=cDkYellow>;
    Black_Save_AbilityTree_SaveAbilityTreeEntityStruct enableAbilityTreeEntityList[enableAbilityTreeEntityListCount] <name="Enable Ability Tree Entity List", read=(this.enableAbilityTreeEntityId), comment="type: Black.Save.AbilityTree.SaveAbilityTreeEntityStruct", bgcolor=cDkYellow, optimize=false>;
    uint32 releaseBlockAbilityTreeEntityIdListCount <name="Release Block Ability Tree Entity ID List Count", comment="size of releaseBlockAbilityTreeEntityIdList array", bgcolor=cDkYellow>;
    FIXID releaseBlockAbilityTreeEntityIdList[releaseBlockAbilityTreeEntityIdListCount] <name="Release Block Ability Tree Entity ID List", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow, optimize=false>;
} Black_Save_AbilityTree_SaveAbilityTreeStruct;

typedef struct Black_Save_Multiplay_SaveChocoboDataStruct_ChocoboDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID nameId_ <name="Name ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    CHOCOBO_PERSONALITY personality_ <name="Personality", comment="type: Black.Save.Multiplay.SaveChocoboDataStruct.Personality", bgcolor=cDkYellow>;
    CHOCOBO_RARITY rarity_ <name="Rarity", comment="type: Black.Save.Multiplay.SaveChocoboDataStruct.Rarity", bgcolor=cDkYellow>;
    CHOCOBO_COLOR color_ <name="Color", comment="type: Black.Save.Multiplay.SaveChocoboDataStruct.Color", bgcolor=cDkYellow>;
    int32 stamina_ <name="Stamina", comment="type: int32_t", bgcolor=cDkYellow>;
    int32 jump_ <name="Jump", comment="type: int32_t", bgcolor=cDkYellow>;
    float speed_ <name="Speed", comment="type: float", bgcolor=cDkYellow>;
    uint32 evolValueCount <fgcolor=cGreen>;
    int32 evolValue_[evolValueCount] <name="Evol Value", comment="type: int32_t, count: Parameter::PARAMETER_MAX", bgcolor=cDkYellow>;
    uint32 trainingCntNum <fgcolor=cGreen>;
    struct TrainingCountStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < trainingCntNum; i++) {
            typedef struct EnumTrainingCountField(int32 val) {
                local CHOCOBO_TRAINING Name = val;
                short value;
            } EnumeratedTrainingCount<name=EnumToString(this.Name), read=this.value>;
            EnumeratedTrainingCount reserved(i);
        }
    } trainingCnt_<name="Training Count", comment="type: CHOCOBO_TRAINING, count: TRAINING_MAX", optimize=false>;
    uint32 specialTrainingCntNum <fgcolor=cGreen>;
    struct SpecialTrainingCountStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < specialTrainingCntNum; i++) {
            typedef struct EnumSpecialTrainingField(int32 val) {
                local CHOCOBO_SPECIAL_TRAINING Name = val;
                short value;
            } EnumeratedSpecialTraining<name=EnumToString(this.Name), read=this.value>;
            EnumeratedSpecialTraining reserved(i);
        }
    } specialTrainingNum_<name="Special Training Number", comment="type: CHOCOBO_SPECIAL_TRAINING, count: SPECIAL_TRAINING_MAX", optimize=false>;
    short skillLevel_ <name="Skill Level", comment="type: short", bgcolor=cDkYellow>;
    short limitMaxLevel_ <name="Limit Max Level", comment="type: short", bgcolor=cDkYellow>;
    short maxLevel_ <name="Max Level", comment="type: short", bgcolor=cDkYellow>;
    short level_ <name="Level", comment="type: short", bgcolor=cDkYellow>;
    short injuryPercent_ <name="Injury Percent", comment="type: short", bgcolor=cDkYellow>;
    bool isNew_ :1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
    bool isInjured_ :1 <name="Is Injured", comment="type: bool", bgcolor=cDkYellow>;
    uint32 trainingBonusCntNum <fgcolor=cGreen>;
    struct TrainingBonusCountStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < trainingBonusCntNum; i++) {
            typedef struct EnumTrainingBonusField(int32 val) {
                local CHOCOBO_TRAINING Name = val;
                short value;
            } EnumeratedTrainingBonus<name=EnumToString(this.Name), read=this.value>;
            EnumeratedTrainingBonus reserved(i);
        }
    } trainingBonusCnt_<name="Training Bonus Count", comment="type: CHOCOBO_TRAINING, count: TRAINING_MAX", optimize=false>;
    short trainingRateCnt_ <name="Training Rate Count", comment="type: short", bgcolor=cDkYellow>;
} Black_Save_Multiplay_SaveChocoboDataStruct_ChocoboDataStruct;

typedef struct Black_Save_Multiplay_SaveChocoboDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 chocoboNum_<fgcolor=cGreen>;
    uint32 maxChocoboNum <name="Chocobo Number", comment="type: uint32_t", bgcolor=cDkYellow>;
    Black_Save_Multiplay_SaveChocoboDataStruct_ChocoboDataStruct chocoboDataList_[maxChocoboNum] <name="Chocobo Data List", comment="type: Black.Save.Multiplay.SaveChocoboDataStruct.ChocoboDataStruct, count: MAX_CHOCOBO_NUM + 1", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Multiplay_SaveChocoboDataStruct;

typedef struct Black_Save_Chocobo_SaveChocoboStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    string_t name <name="Name", comment="type: char, count: SAVE_CHOCOBO_NAME", bgcolor=cDkYellow, optimize=false>;
    uint32 flagCount <fgcolor=cGreen>;
    FIXID flag_[flagCount] <name="Flag", comment="type: uint32_t, count: SAVE_CHOCOBO_FLAG_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    Black_Save_Multiplay_SaveChocoboDataStruct multiChocoboData_ <name="Multi Chocobo Data", comment="type: Black.Save.Multiplay.SaveChocoboDataStruct", bgcolor=cDkYellow>;
    uint32 effectedEntitlementCount <name="Effected Entitlement Count", comment="size of effectedEntitlement array", bgcolor=cDkYellow>;
    struct EffectedEntitlementStruct { // fully written out because bitfield issues with arrays
        bool RESERVED_INDEX_MAINMENU_ALREADY_OPENED : 1;
        bool RESERVED_FILTERED_MAP_ICON_1 : 1;
        bool RESERVED_FILTERED_MAP_ICON_2 : 1;
        bool RESERVED_MENU_ACTIVE_QUESTID : 1;
        bool RESERVED_MENU_ACTIVE_QUESTID_DEST : 1;
        bool RESERVED_CARNIVAL_SCORE_AE1 : 1;
        bool RESERVED_CARNIVAL_SCORE_AE2 : 1;
        bool RESERVED_CARNIVAL_SCORE_AE3 : 1;
        bool RESERVED_CARNIVAL_SCORE_AN1 : 1;
        bool RESERVED_CARNIVAL_SCORE_AN2 : 1;
        bool RESERVED_CARNIVAL_SCORE_AN3 : 1;
        bool RESERVED_CARNIVAL_SCORE_AH1 : 1;
        bool RESERVED_CARNIVAL_SCORE_AH2 : 1;
        bool RESERVED_CARNIVAL_SCORE_AH3 : 1;
        bool RESERVED_CARNIVAL_SCORE_BE1 : 1;
        bool RESERVED_CARNIVAL_SCORE_BE2 : 1;
        bool RESERVED_CARNIVAL_SCORE_BE3 : 1;
        bool RESERVED_CARNIVAL_SCORE_BN1 : 1;
        bool RESERVED_CARNIVAL_SCORE_BN2 : 1;
        bool RESERVED_CARNIVAL_SCORE_BN3 : 1;
        bool RESERVED_CARNIVAL_SCORE_BH1 : 1;
        bool RESERVED_CARNIVAL_SCORE_BH2 : 1;
        bool RESERVED_CARNIVAL_SCORE_BH3 : 1;
        bool RESERVED_CARNIVAL_SCORE_CE1 : 1;
        bool RESERVED_CARNIVAL_SCORE_CE2 : 1;
        bool RESERVED_CARNIVAL_SCORE_CE3 : 1;
        bool RESERVED_CARNIVAL_SCORE_CN1 : 1;
        bool RESERVED_CARNIVAL_SCORE_CN2 : 1;
        bool RESERVED_CARNIVAL_SCORE_CN3 : 1;
        bool RESERVED_CARNIVAL_SCORE_CH1 : 1;
        bool RESERVED_CARNIVAL_SCORE_CH2 : 1;
        bool RESERVED_CARNIVAL_SCORE_CH3 : 1;
        bool RESERVED_CARNIVAL_SCORE_DE1 : 1;
        bool RESERVED_CARNIVAL_SCORE_DE2 : 1;
        bool RESERVED_CARNIVAL_SCORE_DE3 : 1;
        bool RESERVED_CARNIVAL_SCORE_DN1 : 1;
        bool RESERVED_CARNIVAL_SCORE_DN2 : 1;
        bool RESERVED_CARNIVAL_SCORE_DN3 : 1;
        bool RESERVED_NOX_MULTI_POWER : 1;
        bool RESERVED_NOX_EPP_VEHICLE_CUSTAMIZE : 1;
        bool RESERVED_MENU_ACTIVE_QUESTID_FEATHER : 1;
        bool RESERVED_MENU_ACTIVE_QUESTID_DEST_FEATHER : 1;
        bool RESERVED_43 : 1;
        bool RESERVED_44 : 1;
        bool RESERVED_45 : 1;
        bool RESERVED_46 : 1;
        bool RESERVED_47 : 1;
        bool RESERVED_48 : 1;
        bool RESERVED_49 : 1;
        bool RESERVED_50 : 1;
    } effectedEntitlement_<name="Effected Entitlement", comment="type: SAVE_COMMON_EFFECTED_ENTITLEMENT, count: SAVE_COMMON_EFFECTED_ENTITLEMENT_COUNT_MAX", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Chocobo_SaveChocoboStruct;

typedef struct Black_Save_Common_SaveEpiScore {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    EPI_RESULT_SCENE chapter <name="Chapter", comment="type: Black.Save.Common.EPI_RESULT_SCENE", bgcolor=cDkYellow>;
    uint32 scoreCount <name="Score Count", comment="size of score array", bgcolor=cDkYellow>;
        struct scoreCountStruct {
        local int32 i <hidden=true>;
        for (i = 0; i < scoreCount; i++) {
            typedef struct EnumScoreField(int32 val) {
                local EPI_RESULT Name = val;
                int32 value;
            } EnumeratedScore<name=EnumToString(this.Name), read=this.value>;
            EnumeratedScore reserved(i);
        }
    } score <name="Score", comment="type: int32_t, count: Black::Save::Common::EPI_RESULT", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Common_SaveEpiScore;

typedef struct Black_Save_Multiplay_SavePlantMapDataStruct_IconDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id_ <name="Icon ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint8 state_ <name="State", comment="type: uint8_t", bgcolor=cDkYellow>;
} Black_Save_Multiplay_SavePlantMapDataStruct_IconDataStruct;

typedef struct Black_Save_Multiplay_SavePlantMapDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    bool isCompletedLesta_ : 1 <name="Is Completed Lesta", comment="type: bool", bgcolor=cDkYellow>;
    uint32 iconDataListCount <name="Icon Data List Count", comment="size of iconDataList array", bgcolor=cDkYellow>;
    Black_Save_Multiplay_SavePlantMapDataStruct_IconDataStruct iconDataList[iconDataListCount]
        <name="Icon Data List", comment="type: Black.Save.Multiplay.SavePlantMapDataStruct.IconDataStruct, count: MAX_ICON_NUM", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Multiplay_SavePlantMapDataStruct;

typedef struct Black_Save_Common_SaveCommonStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID presenceId_ <name="Presence ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool forbidSaveAnywhereFlag_ : 1 <name="Forbid Save Anywhere Flag", comment="type: bool", bgcolor=cDkYellow>;
    uint32 reservedCount <name="Reserved Count", comment="size of reserved array", bgcolor=cDkYellow>;
    int32 reserved[reservedCount] <name="Reserved", comment="type: int, count: SAVE_COMMON_RESERVED", bgcolor=cDkYellow, optimize=false>;
    uint32 reserved2Count <name="Reserved2 Count", comment="size of reserved2 array", bgcolor=cDkYellow>;
    int64 reserved2[reserved2Count] <name="Reserved2", comment="type: int64, count: SAVE_COMMON_RESERVED", bgcolor=cDkYellow, optimize=false>;
    uint32 noxScore_ <name="Nox Score", comment="type: uint32", bgcolor=cDkYellow>;
    Black_Save_Multiplay_SavePlantMapDataStruct plantMapData_ <name="Plant Map Data", comment="type: Black.Save.Multiplay.SavePlantMapDataStruct", bgcolor=cDkYellow, optimize=false>;
    Black_Save_Common_SaveEpiScore ignis_ <name="Ignis", comment="type: Black.Save.Common.SaveEpiScore", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Common_SaveCommonStruct;

typedef struct Black_Save_Encyclopedia_SaveEncyclopediaArchiveDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    bool isAddition : 1 <name="Is Addition", comment="type: bool", bgcolor=cDkYellow>;
    bool isNew : 1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Encyclopedia_SaveEncyclopediaArchiveDataStruct;

typedef struct Black_Save_Encyclopedia_SaveEncyclopediaCharacterDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    uint32 isAdditionCount <name="Is Addition Count", comment="size of isAddition array", bgcolor=cDkYellow>;
    bool isAddition1 : 1 <name="Is Added 1", comment="type: bool", bgcolor=cDkYellow>; //should be in a bitfield array as well
    bool isAddition2 : 1 <name="Is Added 2", comment="type: bool", bgcolor=cDkYellow>;
    bool isAddition3 : 1 <name="Is Added 3", comment="type: bool", bgcolor=cDkYellow>;
    bool isNew : 1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Encyclopedia_SaveEncyclopediaCharacterDataStruct;

typedef struct Black_Save_Encyclopedia_SaveEncyclopediaEnemyDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    FIXID id <name="ID", comment="type: SQEX.Ebony.Std.Fixid", bgcolor=cDkYellow>;
    int32 kill <name="Kill Count", comment="type: int32_t", bgcolor=cDkYellow>;
    bool isNew : 1 <name="Is New", comment="type: bool", bgcolor=cDkYellow>;
} Black_Save_Encyclopedia_SaveEncyclopediaEnemyDataStruct;

typedef struct Black_Save_Encyclopedia_SaveEncyclopediaStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
    uint32 enemyCount <name="Enemy Count", comment="size of enemy array", bgcolor=cDkYellow>;
    Black_Save_Encyclopedia_SaveEncyclopediaEnemyDataStruct enemy[enemyCount] <name="Enemy Data", read=(this.id), comment="type: Black.Save.Encyclopedia.SaveEncyclopediaEnemyDataStruct, count: Black::Save::SAVE_ENCYCLOPEDIA_ENEMY_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 characterCount <name="Character Count", comment="size of character array", bgcolor=cDkYellow>;
    Black_Save_Encyclopedia_SaveEncyclopediaCharacterDataStruct character[characterCount] <name="Character Data", read=(this.id), comment="type: Black.Save.Encyclopedia.SaveEncyclopediaCharacterDataStruct, count: Black::Save::SAVE_ENCYCLOPEDIA_CHARACTER_AMOUNT", bgcolor=cDkYellow, optimize=false>;
    uint32 archiveCount <name="Archive Count", comment="size of archive array", bgcolor=cDkYellow>;
    Black_Save_Encyclopedia_SaveEncyclopediaArchiveDataStruct archive[archiveCount] <name="Archive Data", read=(this.id), comment="type: Black.Save.Encyclopedia.SaveEncyclopediaArchiveDataStruct, count: Black::Save::SAVE_ENCYCLOPEDIA_ARCHIVE_AMOUNT", bgcolor=cDkYellow, optimize=false>;
} Black_Save_Encyclopedia_SaveEncyclopediaStruct;

typedef struct STRUCTMEMBER
{
    string_t memberName<name="memberName", bgcolor=cDkGreen>;
    string_t memberType<name="memberType", bgcolor=cDkGreen>;
    uint32 relativeMemoryOffsetInStruct<bgcolor=cDkYellow>;
    uint32 memberSize<bgcolor=cDkGreen>;
    uint16 itemCount<fgcolor=cGreen>;
    ubyte primitiveType;
    ubyte itemPrimitiveType;
    ubyte attr;		   
}StructMember <name=this.memberName.stringData, read=this.memberType.stringData>;

typedef struct STRUCTENTRY
{
    string_t structName<name="structName", bgcolor=cDkGreen>;
    structid_t structId<bgcolor=cBlack>;
    ubyte padding[8];
    uint16 memberCount<bgcolor=cDkGreen>;
    struct STRUCTMEMBERS
    {
        StructMember structMember[memberCount]<optimize=false>;
    }StructMembers<name="Struct Members">;
} StructEntry<name=this.structName.stringData>;

typedef struct FOOTERSTRUCTS
{
    uint32 footerStructsCount<bgcolor=cDkGreen>;
    StructEntry structEntry[footerStructsCount]<optimize=false>;
}FooterStructs;

typedef struct ENCRYPTIONFOOTER
{
    uint64 iv1<bgcolor=cDkGreen>;
    uint64 iv2<bgcolor=cDkGreen>;
    uint64 tweak1<bgcolor=cDkGreen>;
    uint64 tweak2<bgcolor=cDkGreen>;
    uint32 seed<bgcolor=cDkGreen>;
    uint64 nullPaddingA;
    uint64 nullPaddingB;
    ubyte end2Value<bgcolor=cDkGreen>;
}EncryptionFooter;

struct FILE
{
    local structid_t structIdCheck = ReadUInt64(24);
    local int64 fileSize = FileSize();
    Printf("Parsing save file. Enums names will load when finished, please be patient.\n");
    if (structIdCheck == 2478702013964663189)
    {
       // Header
       Header header<name="Header", optimize=false, open=false>; 
       //Save Structs   
       Black_Save_SaveInformation blackSaveSaveInformation<name="Black.Save.SaveInformation", optimize=false, open=true>; 
       Black_Save_Player_SaveDataStruct blackSaveDataStruct<name="Black.Save.Player.SaveDataStruct", optimize=false>;
       Black_Save_Party_SavePartyStruct blackSavePartyStruct<name="Black.Save.Party.SavePartyStruct", optimize=false>;
       Black_Save_Equipment_SaveEquipmentStruct blackSaveEquipmentStruct<name="Black.Save.Equipment.SaveEquipmentStruct", optimize=false>;
       Black_Save_Summon_SaveSummonStruct blackSaveSummonSaveSummonStruct<name="Black.Save.Summon.SaveSummonStruct", optimize=false>;
       Black_Save_Item_SaveItemStruct blackSaveItemStruct<name="Black.Save.Item.SaveItemStruct", optimize=false>;
       Black_Save_Dinner_SaveDinnerStruct blackSaveDinnerStruct<name="Black.Save.Dinner.SaveDinnerStruct", optimize=false>;
       Black_Save_Quest_SaveQuestStruct blackSaveQuestStruct<name="Black.Save.Quest.SaveQuestStruct", optimize=false>;
       Black_Save_Menu_SaveMenuStruct blackSaveMenuStruct<name="Black.Save.Menu.SaveMenuStruct", optimize=false>;
       Black_Save_Vehicle_SaveVehicleStruct blackSaveVehicleStruct<name="Black.Save.Vehicle.SaveVehicleStruct", optimize=false>;
       Black_Save_Vehicle_SaveVehicleStruct2 blackSaveVehicleStruct2<name="Black.Save.Vehicle.SaveVehicleStruct2", optimize=false>;
       Black_Save_Fishing_SaveFishingStruct blackSaveFishingStruct2<name="Black.Save.Fishing.SaveFishingStruct", optimize=false>;
       Black_Save_EventScript_SaveEventScriptStruct blackSaveEventScriptStruct<name="Black.Save.EventScript.SaveEventScriptStruct", optimize=false>;
       Black_Save_Diner_SaveDinerStruct blackSaveDinerStruct<name="Black.Save.Diner.SaveDinerStruct", optimize=false>;
       Black_Save_Mobhunt_SaveMobhuntMainStruct blackSaveMobhuntMainStruct<name="Black.Save.Mobhunt.SaveMobhuntMainStruct", optimize=false>;
       Black_Save_MemoryQuest_SaveMemoryQuestStruct blackSaveMemoryQuestStruct<name="Black.Save.MemoryQuest.SaveMemoryQuestStruct", optimize=false>;
       Black_Save_AbilityTree_SaveAbilityTreeStruct blackSaveAbilityTreeStruct<name="Black.Save.AbilityTree.SaveAbilityTreeStruct", optimize=false>;
       Black_Save_Chocobo_SaveChocoboStruct blackSaveChocoboStruct<name="Black.Save.Chocobo.SaveChocoboStruct", optimize=false>;
       Black_Save_Encyclopedia_SaveEncyclopediaStruct blackSaveEncyclopediaStruct<name="Black.Save.Encyclopedia.SaveEncyclopediaStruct", optimize=false>;
       Black_Save_Snapshot_SaveSnapshotImageInfoContainerStruct blackSaveSnapshotSaveSnapshotImageInfoContainerStruct<name="Black.Save.Snapshot.SaveSnapshotImageInfoContainerStruct", optimize=false>;
       Black_Save_Common_SaveCommonStruct blackSaveCommonStruct<name="Black.Save.Common.SaveCommonStruct", optimize=false>;
       // Footer Structs
       FSeek(header.footerStructsOffset);
       FooterStructs footerStructs<name="Footer Structs", optimize=false>;
       // Encryption Footer
       FSeek(fileSize - 53);
       EncryptionFooter encryptionFooter<name="Encryption Footer", optimize=false>;
    }
    else
    {
       Printf("File is encrypted!");
       FSeek(fileSize - 53);
       EncryptionFooter encryptionFooter<name="Encryption Footer", optimize=false>;
    }    
    Printf("Template finished\n");

}File<name="FFXV gameplay0.save file", open=true>;