//------------------------------------------------
//--- 010 Editor v15.0.2 Binary Template
//
//      File: avatar0_mod.save.bt
//   Authors: Rinual
//   Version: 1.0
//   Purpose: Analyzing and debuging FFXV avatar0_mod saves
//  Category: Save Files
//   History: Surihix - Header, Footer, Encryption 
//   (Needs a decrypted save, for example https://github.com/Surihix/FFXVSaveCrypt)
//
//------------------------------------------------
LittleEndian();

typedef int32 FIXID;

typedef uint64 structid_t <format=hex, fgcolor=0x00C0FF>;
typedef ubyte bool <read=(this == 0 ? "false" : "true")>;

// Shared structs

typedef struct STRING_T
{
    int stringLength; 
    if (stringLength != 0)
    {
        char stringData[stringLength];
    }
} string_t <name="string_t", read=(this.stringLength == 0 ? "null" : this.stringData)>;

//------------------

typedef struct HEADER
{
    char magic[4]<comment="not decrypted correctly", bgcolor=cDkPurple>;
    uint32 version<bgcolor=cDkRed>;
    uint32 reserved;
    uint32 footerStructsOffset<bgcolor=cWhite>;
    uint32 formatId<bgcolor=cYellow>;
    uint32 versionId<bgcolor=cBlue>;
}Header;
typedef struct STRUCTMEMBER
{
    string_t memberName<name="memberName", bgcolor=cLtGreen>;
    string_t memberType<name="memberType", bgcolor=cDkGreen>;
    uint32 relativeMemoryOffsetInStruct<bgcolor=cDkYellow>;
    uint32 memberSize<bgcolor=cYellow>;
    uint16 itemCount<bgcolor=cGreen>;
    ubyte primitiveType<bgcolor=cWhite>;
    ubyte itemPrimitiveType <bgcolor=cLtBlue>;
    ubyte attr <bgcolor=cDkBlue>;		   
}StructMember <name=this.memberName.stringData, read=this.memberType.stringData>;

typedef struct STRUCTENTRY
{
    string_t structName<name="structName", bgcolor=cDkBlue>;
    structid_t structId<bgcolor=cBlack>;
    ubyte padding[8];
    uint16 memberCount<bgcolor=cLtRed>;
    struct STRUCTMEMBERS
    {
        StructMember structMember[memberCount]<optimize=false>;
    }StructMembers<name="Struct Members">;
} StructEntry<name=this.structName.stringData>;

typedef struct FOOTERSTRUCTS
{
    uint32 footerStructsCount<bgcolor=cLtGreen>;
    StructEntry structEntry[footerStructsCount]<optimize=false>;
}FooterStructs;

typedef struct ENCRYPTIONFOOTER
{
    uint64 iv1<bgcolor=cDkGreen>;
    uint64 iv2<bgcolor=cDkGreen>;
    uint64 tweak1<bgcolor=cDkGreen>;
    uint64 tweak2<bgcolor=cDkGreen>;
    uint32 seed<bgcolor=cDkGreen>;
    uint64 nullPaddingA;
    uint64 nullPaddingB;
    ubyte end2Value<bgcolor=cDkGreen>;
}EncryptionFooter;

//--------------

typedef struct ModItemStyleEditEntryPathSet
{
        char modPath[256];

} ModItemStyleEditEntryPathSet <name="Mod Path">;

typedef struct Black_Save_Multiplay_SaveAvatarModDataStruct {
    structid_t struct_id <name="Struct ID", bgcolor=cBlack>;
   ModItemStyleEditEntryPathSet styleEditEntryPath[12]<name="Style Edit Mod Path", read=(this.modPath), bgcolor=cDkBlue>;
} Black_Save_Multiplay_SaveAvatarModDataStruct;

//-----------
 
struct FILE
{
    local structid_t structIdCheck = ReadUInt64(24);   
    local int64 fileSize = FileSize();
    if (structIdCheck == 3700093695232160334)
    {
       // Header
       Header header<name="Header", optimize=false, open=false>; 
       //Save Structs          
      Black_Save_Multiplay_SaveAvatarModDataStruct SaveAvatarModDataStruct <name="AvatarModData", optimize=false, open=false>;        
       // Footer Structs
       FSeek(header.footerStructsOffset);
       FooterStructs footerStructs<name="Footer Structs", optimize=false>;
       // Encryption Footer
       FSeek(fileSize - 53);
       EncryptionFooter encryptionFooter<name="Encryption Footer", optimize=false>;
    }
    else
    {
       Printf("File is encrypted!");
       FSeek(fileSize - 53);
       EncryptionFooter encryptionFooter<name="Encryption Footer", optimize=false>;
    }    
    Printf("Template finished\n");

}File<name="FFXV avatar0_mod.save file", open=true>;